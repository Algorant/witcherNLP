1660072625793	geckodriver	INFO	Listening on 127.0.0.1:49943
1660073209467	geckodriver	INFO	Listening on 127.0.0.1:53927
1660073209970	mozrunner::runner	INFO	Running command: "/usr/bin/firefox" "--marionette" "--remote-debugging-port" "48303" "--remote-allow-hosts" "localhost" "-no-remote" "-profile" "/tmp/rust_mozprofilez8Cdpm"
1660073210336	Marionette	INFO	Marionette enabled
1660073210339	Marionette	INFO	Listening on port 40505
WebDriver BiDi listening on ws://localhost:48303
Read port: 40505
1660073210416	RemoteAgent	WARN	TLS certificate errors will be ignored for this session
console.warn: SearchSettings: "get: No settings file exists, new profile?" (new NotFoundError("Could not open the file at /tmp/rust_mozprofilez8Cdpm/search.json.mozlz4", (void 0)))
Missing chrome or resource URL: resource://gre/modules/UpdateListener.jsm
Missing chrome or resource URL: resource://gre/modules/UpdateListener.sys.mjs
DevTools listening on ws://localhost:48303/devtools/browser/f9f22933-1b4a-4328-9865-6a54a61f7bc2
Missing chrome or resource URL: resource://gre/modules/UpdateListener.jsm
Missing chrome or resource URL: resource://gre/modules/UpdateListener.sys.mjs
console.error: "Error during quit-application-granted: [Exception... \"File error: Not found\"  nsresult: \"0x80520012 (NS_ERROR_FILE_NOT_FOUND)\"  location: \"JS frame :: resource:///modules/BrowserGlue.jsm :: _onQuitApplicationGranted/tasks< :: line 2006\"  data: no]"
1660073223499	Marionette	INFO	Stopped listening on port 40505
console.warn: TopSitesFeed: Failed to fetch data from Contile server: NetworkError when attempting to fetch resource.
1660073388562	geckodriver::marionette	ERROR	Failed to close browser connection: Socket not connected (os error 107)
1660073404925	geckodriver	INFO	Listening on 127.0.0.1:49531
1660073405428	mozrunner::runner	INFO	Running command: "/usr/bin/firefox" "--marionette" "--remote-debugging-port" "44403" "--remote-allow-hosts" "localhost" "-no-remote" "-profile" "/tmp/rust_mozprofileGkIrR2"
1660073406180	Marionette	INFO	Marionette enabled
1660073406183	Marionette	INFO	Listening on port 36535
WebDriver BiDi listening on ws://localhost:44403
Read port: 36535
1660073406269	RemoteAgent	WARN	TLS certificate errors will be ignored for this session
console.warn: SearchSettings: "get: No settings file exists, new profile?" (new NotFoundError("Could not open the file at /tmp/rust_mozprofileGkIrR2/search.json.mozlz4", (void 0)))
Missing chrome or resource URL: resource://gre/modules/UpdateListener.jsm
Missing chrome or resource URL: resource://gre/modules/UpdateListener.sys.mjs
DevTools listening on ws://localhost:44403/devtools/browser/b6ceb78e-2789-4743-8e60-65a68d852ad5
Missing chrome or resource URL: resource://gre/modules/UpdateListener.jsm
Missing chrome or resource URL: resource://gre/modules/UpdateListener.sys.mjs
console.error: "Error during quit-application-granted: [Exception... \"File error: Not found\"  nsresult: \"0x80520012 (NS_ERROR_FILE_NOT_FOUND)\"  location: \"JS frame :: resource:///modules/BrowserGlue.jsm :: _onQuitApplicationGranted/tasks< :: line 2006\"  data: no]"
1660073409698	Marionette	INFO	Stopped listening on port 36535
console.warn: TopSitesFeed: Failed to fetch data from Contile server: NetworkError when attempting to fetch resource.
1660073413241	geckodriver::marionette	ERROR	Failed to close browser connection: Socket not connected (os error 107)
1660073865623	geckodriver	INFO	Listening on 127.0.0.1:51481
1660073866127	mozrunner::runner	INFO	Running command: "/usr/bin/firefox" "--marionette" "--remote-debugging-port" "50945" "--remote-allow-hosts" "localhost" "-no-remote" "-profile" "/tmp/rust_mozprofileXK1xQd"
1660073866986	Marionette	INFO	Marionette enabled
1660073866989	Marionette	INFO	Listening on port 36279
WebDriver BiDi listening on ws://localhost:50945
Read port: 36279
1660073867063	RemoteAgent	WARN	TLS certificate errors will be ignored for this session
console.warn: SearchSettings: "get: No settings file exists, new profile?" (new NotFoundError("Could not open the file at /tmp/rust_mozprofileXK1xQd/search.json.mozlz4", (void 0)))
Missing chrome or resource URL: resource://gre/modules/UpdateListener.jsm
Missing chrome or resource URL: resource://gre/modules/UpdateListener.sys.mjs
DevTools listening on ws://localhost:50945/devtools/browser/23b9594f-e509-4ed5-98e9-b1bb758b2ae4
ATTENTION: default value of option mesa_glthread overridden by environment.
JavaScript warning: https://www.amazon.com/ line 2149 > injectedScript, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript error: https://eus.rubiconproject.com/usync.js, line 4: SecurityError: The operation is insecure.
ATTENTION: default value of option mesa_glthread overridden by environment.
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 7598 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 660 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript error: resource://devtools/server/actors/utils/sources-manager.js, line 432: TypeError: channel is null
JavaScript error: resource://devtools/server/actors/utils/sources-manager.js, line 432: TypeError: channel is null
JavaScript error: resource://devtools/server/actors/utils/sources-manager.js, line 432: TypeError: channel is null
SourceActor threw an exception: [Exception... "Component returned failure code: 0x80470002 (NS_BASE_STREAM_CLOSED) [nsIInputStream.available]"  nsresult: "0x80470002 (NS_BASE_STREAM_CLOSED)"  location: "JS frame :: resource://devtools/shared/DevToolsUtils.js :: onResponse :: line 594"  data: no]
Stack: onResponse@resource://devtools/shared/DevToolsUtils.js:594:34
onStopRequest@resource://gre/modules/NetUtil.jsm:128:18
Line: 594, column: 0
console.error: ({})
JavaScript error: resource://devtools/shared/DevToolsUtils.js, line 594: NS_BASE_STREAM_CLOSED: Component returned failure code: 0x80470002 (NS_BASE_STREAM_CLOSED) [nsIInputStream.available]
SourceActor threw an exception: [Exception... "Component returned failure code: 0x80470002 (NS_BASE_STREAM_CLOSED) [nsIInputStream.available]"  nsresult: "0x80470002 (NS_BASE_STREAM_CLOSED)"  location: "JS frame :: resource://devtools/shared/DevToolsUtils.js :: onResponse :: line 594"  data: no]
Stack: onResponse@resource://devtools/shared/DevToolsUtils.js:594:34
onStopRequest@resource://gre/modules/NetUtil.jsm:128:18
Line: 594, column: 0
console.error: ({})
JavaScript error: resource://devtools/shared/DevToolsUtils.js, line 594: NS_BASE_STREAM_CLOSED: Component returned failure code: 0x80470002 (NS_BASE_STREAM_CLOSED) [nsIInputStream.available]
console.error: "Unable to find target with innerWindowId:4294967360"
console.error: "Unable to find target with innerWindowId:4294967391"
console.error: "Unable to find target with innerWindowId:4294967434"
console.error: "Unable to find target with innerWindowId:4294967324"
console.error: "Unable to find target with innerWindowId:4294967391"
console.error: "Unable to find target with innerWindowId:4294967360"
console.error: "Unable to find target with innerWindowId:4294967356"
console.error: "Unable to find target with innerWindowId:4294967360"
console.error: "Unable to find target with innerWindowId:4294967434"
Handler function threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_onRequestHeader@resource://devtools/server/actors/network-monitor/network-observer.js:756:10
NetworkObserver.prototype.observeActivity<@resource://devtools/server/actors/network-monitor/network-observer.js:637:12
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
Handler function threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_onRequestHeader@resource://devtools/server/actors/network-monitor/network-observer.js:756:10
NetworkObserver.prototype.observeActivity<@resource://devtools/server/actors/network-monitor/network-observer.js:637:12
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
Handler function threw an exception: TypeError: httpActivity.owner is null
Stack: _onResponseHeader@resource://devtools/server/actors/network-monitor/network-observer.js:1018:5
_dispatchActivity@resource://devtools/server/actors/network-monitor/network-observer.js:558:14
NetworkObserver.prototype.observeActivity<@resource://devtools/server/actors/network-monitor/network-observer.js:667:12
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 1018, column: 5
console.error: (new TypeError("httpActivity.owner is null", "resource://devtools/server/actors/network-monitor/network-observer.js", 1018))
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:338:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
Handler function threw an exception: TypeError: httpActivity.owner is null
Stack: _onResponseHeader@resource://devtools/server/actors/network-monitor/network-observer.js:1018:5
_dispatchActivity@resource://devtools/server/actors/network-monitor/network-observer.js:558:14
NetworkObserver.prototype.observeActivity<@resource://devtools/server/actors/network-monitor/network-observer.js:667:12
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 1018, column: 5
console.error: (new TypeError("httpActivity.owner is null", "resource://devtools/server/actors/network-monitor/network-observer.js", 1018))
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:338:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
console.error: "Unable to find target with innerWindowId:4294967324"
console.error: (new TypeError("currentNode is null", "resource://devtools/client/inspector/shared/style-change-tracker.js", 66))
TypeError: currentNode is null: canMutationImpactCurrentStyles@resource://devtools/client/inspector/shared/style-change-tracker.js:66:20
onMutations@resource://devtools/client/inspector/shared/style-change-tracker.js:84:41
_emit@resource://devtools/shared/event-emitter.js:242:32
emit@resource://devtools/shared/event-emitter.js:186:18
emit@resource://devtools/shared/event-emitter.js:330:18
getMutations@resource://devtools/client/fronts/walker.js:312:10

console.error: "Unable to find target with innerWindowId:4294967324"
console.warn: "Error while destroying front:" "inspector" (new Error("Connection closed, pending request to server0.conn0.windowGlobal4294967435/domwalker56, type getEmbedderElement failed\n\nRequest stack:\nrequest@resource://devtools/shared/protocol/Front.js:293:14\ngenerateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19\nreparentRemoteFrame@resource://devtools/client/fronts/walker.js:408:26\n", "resource://devtools/shared/protocol/Front.js", 107))
console.error: "Failed to start [root-node] legacy listener for target null" (new Error("Connection closed, pending request to server0.conn0.windowGlobal4294967435/domwalker56, type getEmbedderElement failed\n\nRequest stack:\nrequest@resource://devtools/shared/protocol/Front.js:293:14\ngenerateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19\nreparentRemoteFrame@resource://devtools/client/fronts/walker.js:408:26\n", "resource://devtools/shared/protocol/Front.js", 107))
JavaScript error: resource://devtools/shared/protocol/Front.js, line 107: Error: Connection closed, pending request to server0.conn0.windowGlobal4294967435/domwalker56, type getEmbedderElement failed

Request stack:
request@resource://devtools/shared/protocol/Front.js:293:14
generateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19
reparentRemoteFrame@resource://devtools/client/fronts/walker.js:408:26

console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
console.error: "Unable to find target with innerWindowId:4294967435"
JavaScript error: https://eus.rubiconproject.com/usync.js, line 4: SecurityError: The operation is insecure.
JavaScript error: resource://devtools/client/framework/toolbox.js, line 3382: TypeError: data.frameData.id is null
console.error: "Error while calling actor 'domwalker's method 'getEmbedderElement'" "Component returned failure code: 0x80004005 (NS_ERROR_FAILURE) [inIDeepTreeWalker.currentNode]"
console.error: ({})
console.warn: "Error while destroying front:" "inspector" (new Error("Protocol error (NS_ERROR_FAILURE): Component returned failure code: 0x80004005 (NS_ERROR_FAILURE) [inIDeepTreeWalker.currentNode] from: server0.conn0.windowGlobal4294967479/domwalker36 (resource://devtools/server/actors/inspector/document-walker.js:79:0)", "resource://devtools/shared/protocol/Front.js", 376))
console.error: "Failed to start [root-node] legacy listener for target null" (new Error("Protocol error (NS_ERROR_FAILURE): Component returned failure code: 0x80004005 (NS_ERROR_FAILURE) [inIDeepTreeWalker.currentNode] from: server0.conn0.windowGlobal4294967479/domwalker36 (resource://devtools/server/actors/inspector/document-walker.js:79:0)", "resource://devtools/shared/protocol/Front.js", 376))
JavaScript error: resource://devtools/shared/protocol/Front.js, line 376: Error: Protocol error (NS_ERROR_FAILURE): Component returned failure code: 0x80004005 (NS_ERROR_FAILURE) [inIDeepTreeWalker.currentNode] from: server0.conn0.windowGlobal4294967479/domwalker36 (resource://devtools/server/actors/inspector/document-walker.js:79:0)
ATTENTION: default value of option mesa_glthread overridden by environment.
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 4196 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
console.warn: "Async method failed in safeAsyncMethod" (new Error("Connection closed, pending request to server0.conn0.windowGlobal4294967502/layout23, type getGrids failed\n\nRequest stack:\nrequest@resource://devtools/shared/protocol/Front.js:293:14\ngenerateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19\ngetAllGrids@resource://devtools/client/fronts/layout.js:171:17\nexports.safeAsyncMethod/<@resource://devtools/shared/async-utils.js:61:25\ngetGrids@resource://devtools/client/inspector/grids/grid-inspector.js:449:35\n", "resource://devtools/shared/protocol/Front.js", 107))
console.warn: "Async method failed in safeAsyncMethod" (new Error("Connection closed, pending request to server0.conn0.windowGlobal4294967502/layout23, type getGrids failed\n\nRequest stack:\nrequest@resource://devtools/shared/protocol/Front.js:293:14\ngenerateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19\ngetAllGrids@resource://devtools/client/fronts/layout.js:171:17\nexports.safeAsyncMethod/<@resource://devtools/shared/async-utils.js:61:25\ngetGrids@resource://devtools/client/inspector/grids/grid-inspector.js:449:35\n", "resource://devtools/shared/protocol/Front.js", 107))
console.warn: "Async method failed in safeAsyncMethod" (new Error("Connection closed, pending request to server0.conn0.windowGlobal4294967502/layout23, type getGrids failed\n\nRequest stack:\nrequest@resource://devtools/shared/protocol/Front.js:293:14\ngenerateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19\ngetAllGrids@resource://devtools/client/fronts/layout.js:171:17\nexports.safeAsyncMethod/<@resource://devtools/shared/async-utils.js:61:25\ngetGrids@resource://devtools/client/inspector/grids/grid-inspector.js:449:35\n", "resource://devtools/shared/protocol/Front.js", 107))
JavaScript error: , line 0: uncaught exception: 7
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 1790 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 3197 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
console.error: "Unable to find target with innerWindowId:4294967447"
console.error: "Unable to find target with innerWindowId:4294967492"
console.error: "Unable to find target with innerWindowId:4294967505"
console.error: "Unable to find target with innerWindowId:4294967479"
console.error: "Unable to find target with innerWindowId:4294967447"
console.error: "Unable to find target with innerWindowId:4294967447"
JavaScript error: https://eus.rubiconproject.com/usync.js, line 4: SecurityError: The operation is insecure.
ATTENTION: default value of option mesa_glthread overridden by environment.
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 254 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript error: resource://devtools/client/framework/toolbox.js, line 3382: TypeError: data.frameData.id is null
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 853 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
console.warn: "Async method failed in safeAsyncMethod" (new Error("Connection closed, pending request to server0.conn0.windowGlobal4294967594/layout23, type getGrids failed\n\nRequest stack:\nrequest@resource://devtools/shared/protocol/Front.js:293:14\ngenerateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19\ngetAllGrids@resource://devtools/client/fronts/layout.js:171:17\nexports.safeAsyncMethod/<@resource://devtools/shared/async-utils.js:61:25\ngetGrids@resource://devtools/client/inspector/grids/grid-inspector.js:449:35\n", "resource://devtools/shared/protocol/Front.js", 107))
JavaScript error: , line 0: uncaught exception: 7
ATTENTION: default value of option mesa_glthread overridden by environment.
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 4384 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript error: resource://devtools/client/framework/toolbox.js, line 3382: TypeError: data.frameData.id is null
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
console.error: "Error when attaching target:" (new Error("Connection closed, pending request to server0.conn0.windowGlobal4294967617/thread1, type isAttached failed\n\nRequest stack:\nrequest@resource://devtools/shared/protocol/Front.js:293:14\ngenerateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19\nattachThread@resource://devtools/client/fronts/targets/target-mixin.js:561:49\n", "resource://devtools/shared/protocol/Front.js", 107))
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: watch :: line 1658"  data: no]
Stack: watch@resource://devtools/server/actors/targets/window-global.js:1658:28
_watchDocshells@resource://devtools/server/actors/targets/window-global.js:777:28
initialize/<@resource://devtools/server/actors/targets/window-global.js:348:42
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 1658, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
console.error: "Error while calling actor 'thread's method 'isAttached'" "JSWindowActorChild.sendAsyncMessage: JSWindowActorChild cannot send at the moment"
console.error: (new InvalidStateError("JSWindowActorChild.sendAsyncMessage: JSWindowActorChild cannot send at the moment", (void 0), 375))
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
console.error: "Error when destroying StyleSheet manager for" ({notifyResourceAvailable:function bound notifyResourceAvailable() {
    [native code]
}, notifyResourceDestroyed:function bound notifyResourceDestroyed() {
    [native code]
}, notifyResourceUpdated:function bound notifyResourceUpdated() {
    [native code]
}, conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, actorID:"server0.conn0.windowGlobal4294967617/windowGlobalTarget2", _actorSpec:{typeName:"windowGlobalTarget", methods:[{name:"detach", request:{type:"detach", template:{type:"detach"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"ensureCSSErrorReportingEnabled", request:{type:"ensureCSSErrorReportingEnabled", template:{type:"ensureCSSErrorReportingEnabled"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"focus", request:{type:"focus", template:{type:"focus"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"goForward", request:{type:"goForward", template:{type:"goForward"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"goBack", request:{type:"goBack", template:{type:"goBack"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reload", request:{type:"reload", template:{type:"reload", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"navigateTo", request:{type:"navigateTo", template:{type:"navigateTo", url:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["url"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reconfigure", request:{type:"reconfigure", template:{type:"reconfigure", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"switchToFrame", request:{type:"switchToFrame", template:{type:"switchToFrame", windowId:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["windowId"]}]}, response:{template:{_type:"windowGlobalTarget.switchtoframe", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"windowGlobalTarget.switchtoframe", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"listFrames", request:{type:"listFrames", template:{type:"listFrames"}, args:[]}, response:{template:{_type:"windowGlobalTarget.listframes", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"windowGlobalTarget.listframes", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"listWorkers", request:{type:"listWorkers", template:{type:"listWorkers"}, args:[]}, response:{template:{_type:"windowGlobalTarget.workers", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"windowGlobalTarget.workers", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"logInPage", request:{type:"logInPage", template:{type:"logInPage", text:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, category:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, flags:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["text"]}, {placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["category"]}, {placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["flags"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}], events:{}}, docShell:({}), _originalWindow:{get window() {
    [native code]
}, get document() {
    [native code]
}, get location() {
    [native code]
}, set location() {
    [native code]
}, get top() {
    [native code]
}, close:function close() {
    [native code]
}, stop:function stop() {
    [native code]
}, focus:function focus() {
    [native code]
}, blur:function blur() {
    [native code]
}, open:function open() {
    [native code]
}, alert:function alert() {
    [native code]
}, confirm:function confirm() {
    [native code]
}, prompt:function prompt() {
    [native code]
}, print:function print() {
    [native code]
}, printPreview:function printPreview() {
    [native code]
}, postMessage:function postMessage() {
    [native code]
}, captureEvents:function captureEvents() {
    [native code]
}, releaseEvents:function releaseEvents() {
    [native code]
}, getSelection:function getSelection() {
    [native code]
}, getComputedStyle:function getComputedStyle() {
    [native code]
}, matchMedia:function matchMedia() {
    [native code]
}, moveTo:function moveTo() {
    [native code]
}, moveBy:function moveBy() {
    [native code]
}, resizeTo:function resizeTo() {
    [native code]
}, resizeBy:function resizeBy() {
    [native code]
}, scroll:function scroll() {
    [native code]
}, scrollTo:function scrollTo() {
    [native code]
}, scrollBy:function scrollBy() {
    [native code]
}, getDefaultComputedStyle:function getDefaultComputedStyle() {
    [native code]
}, scrollByLines:function scrollByLines() {
    [native code]
}, scrollByPages:function scrollByPages() {
    [native code]
}, sizeToContent:function sizeToContent() {
    [native code]
}, updateCommands:function updateCommands() {
    [native code]
}, find:function find() {
    [native code]
}, dump:function dump() {
    [native code]
}, setResizable:function setResizable() {
    [native code]
}, requestIdleCallback:function requestIdleCallback() {
    [native code]
}, cancelIdleCallback:function cancelIdleCallback() {
    [native code]
}, getRegionalPrefsLocales:function getRegionalPrefsLocales() {
    [native code]
}, getWebExposedLocales:function getWebExposedLocales() {
    [native code]
}, requestAnimationFrame:function requestAnimationFrame() {
    [native code]
}, cancelAnimationFrame:function cancelAnimationFrame() {
    [native code]
}, reportError:function reportError() {
    [native code]
}, btoa:function btoa() {
    [native code]
}, atob:function atob() {
    [native code]
}, setTimeout:function setTimeout() {
    [native code]
}, clearTimeout:function clearTimeout() {
    [native code]
}, setInterval:function setInterval() {
    [native code]
}, clearInterval:function clearInterval() {
    [native code]
}, queueMicrotask:function queueMicrotask() {
    [native code]
}, createImageBitmap:function createImageBitmap() {
    [native code]
}, structuredClone:function structuredClone() {
    [native code]
}, fetch:function fetch() {
    [native code]
}, get self() {
    [native code]
}, set self() {
    [native code]
}, get name() {
    [native code]
}, set name() {
    [native code]
}, get history() {
    [native code]
}, get customElements() {
    [native code]
}, get locationbar() {
    [native code]
}, set locationbar() {
    [native code]
}, get menubar() {
    [native code]
}, set menubar() {
    [native code]
}, get personalbar() {
    [native code]
}, set personalbar() {
    [native code]
}, get scrollbars() {
    [native code]
}, set scrollbars() {
    [native code]
}, get statusbar() {
    [native code]
}, set statusbar() {
    [native code]
}, get toolbar() {
    [native code]
}, set toolbar() {
    [native code]
}, get status() {
    [native code]
}, set status() {
    [native code]
}, get closed() {
    [native code]
}, get event() {
    [native code]
}, set event() {
    [native code]
}, get frames() {
    [native code]
}, set frames() {
    [native code]
}, get length() {
    [native code]
}, set length() {
    [native code]
}, get opener() {
    [native code]
}, set opener() {
    [native code]
}, get parent() {
    [native code]
}, set parent() {
    [native code]
}, get frameElement() {
    [native code]
}, get navigator() {
    [native code]
}, get clientInformation() {
    [native code]
}, get external() {
    [native code]
}, set external() {
    [native code]
}, get applicationCache() {
    [native code]
}, get screen() {
    [native code]
}, set screen() {
    [native code]
}, get innerWidth() {
    [native code]
}, set innerWidth() {
    [native code]
}, get innerHeight() {
    [native code]
}, set innerHeight() {
    [native code]
}, get scrollX() {
    [native code]
}, set scrollX() {
    [native code]
}, get pageXOffset() {
    [native code]
}, set pageXOffset() {
    [native code]
}, get scrollY() {
    [native code]
}, set scrollY() {
    [native code]
}, get pageYOffset() {
    [native code]
}, set pageYOffset() {
    [native code]
}, get screenLeft() {
    [native code]
}, set screenLeft() {
    [native code]
}, get screenTop() {
    [native code]
}, set screenTop() {
    [native code]
}, get screenX() {
    [native code]
}, set screenX() {
    [native code]
}, get screenY() {
    [native code]
}, set screenY() {
    [native code]
}, get outerWidth() {
    [native code]
}, set outerWidth() {
    [native code]
}, get outerHeight() {
    [native code]
}, set outerHeight() {
    [native code]
}, get performance() {
    [native code]
}, set performance() {
    [native code]
}, get mozInnerScreenX() {
    [native code]
}, get mozInnerScreenY() {
    [native code]
}, get devicePixelRatio() {
    [native code]
}, set devicePixelRatio() {
    [native code]
}, get scrollMaxX() {
    [native code]
}, set scrollMaxX() {
    [native code]
}, get scrollMaxY() {
    [native code]
}, set scrollMaxY() {
    [native code]
}, get fullScreen() {
    [native code]
}, set fullScreen() {
    [native code]
}, get ondevicemotion() {
    [native code]
}, set ondevicemotion() {
    [native code]
}, get ondeviceorientation() {
    [native code]
}, set ondeviceorientation() {
    [native code]
}, get onabsolutedeviceorientation() {
    [native code]
}, set onabsolutedeviceorientation() {
    [native code]
}, get InstallTrigger() {
    [native code]
}, set InstallTrigger() {
    [native code]
}, get intlUtils() {
    [native code]
}, get visualViewport() {
    [native code]
}, set visualViewport() {
    [native code]
}, get crypto() {
    [native code]
}, get onabort() {
    [native code]
}, set onabort() {
    [native code]
}, get onblur() {
    [native code]
}, set onblur() {
    [native code]
}, get onfocus() {
    [native code]
}, set onfocus() {
    [native code]
}, get onauxclick() {
    [native code]
}, set onauxclick() {
    [native code]
}, get onbeforeinput() {
    [native code]
}, set onbeforeinput() {
    [native code]
}, get oncanplay() {
    [native code]
}, set oncanplay() {
    [native code]
}, get oncanplaythrough() {
    [native code]
}, set oncanplaythrough() {
    [native code]
}, get onchange() {
    [native code]
}, set onchange() {
    [native code]
}, get onclick() {
    [native code]
}, set onclick() {
    [native code]
}, get onclose() {
    [native code]
}, set onclose() {
    [native code]
}, get oncontextmenu() {
    [native code]
}, set oncontextmenu() {
    [native code]
}, get oncuechange() {
    [native code]
}, set oncuechange() {
    [native code]
}, get ondblclick() {
    [native code]
}, set ondblclick() {
    [native code]
}, get ondrag() {
    [native code]
}, set ondrag() {
    [native code]
}, get ondragend() {
    [native code]
}, set ondragend() {
    [native code]
}, get ondragenter() {
    [native code]
}, set ondragenter() {
    [native code]
}, get ondragexit() {
    [native code]
}, set ondragexit() {
    [native code]
}, get ondragleave() {
    [native code]
}, set ondragleave() {
    [native code]
}, get ondragover() {
    [native code]
}, set ondragover() {
    [native code]
}, get ondragstart() {
    [native code]
}, set ondragstart() {
    [native code]
}, get ondrop() {
    [native code]
}, set ondrop() {
    [native code]
}, get ondurationchange() {
    [native code]
}, set ondurationchange() {
    [native code]
}, get onemptied() {
    [native code]
}, set onemptied() {
    [native code]
}, get onended() {
    [native code]
}, set onended() {
    [native code]
}, get onformdata() {
    [native code]
}, set onformdata() {
    [native code]
}, get oninput() {
    [native code]
}, set oninput() {
    [native code]
}, get oninvalid() {
    [native code]
}, set oninvalid() {
    [native code]
}, get onkeydown() {
    [native code]
}, set onkeydown() {
    [native code]
}, get onkeypress() {
    [native code]
}, set onkeypress() {
    [native code]
}, get onkeyup() {
    [native code]
}, set onkeyup() {
    [native code]
}, get onload() {
    [native code]
}, set onload() {
    [native code]
}, get onloadeddata() {
    [native code]
}, set onloadeddata() {
    [native code]
}, get onloadedmetadata() {
    [native code]
}, set onloadedmetadata() {
    [native code]
}, get onloadend() {
    [native code]
}, set onloadend() {
    [native code]
}, get onloadstart() {
    [native code]
}, set onloadstart() {
    [native code]
}, get onmousedown() {
    [native code]
}, set onmousedown() {
    [native code]
}, get onmouseenter() {
    [native code]
}, set onmouseenter() {
    [native code]
}, get onmouseleave() {
    [native code]
}, set onmouseleave() {
    [native code]
}, get onmousemove() {
    [native code]
}, set onmousemove() {
    [native code]
}, get onmouseout() {
    [native code]
}, set onmouseout() {
    [native code]
}, get onmouseover() {
    [native code]
}, set onmouseover() {
    [native code]
}, get onmouseup() {
    [native code]
}, set onmouseup() {
    [native code]
}, get onwheel() {
    [native code]
}, set onwheel() {
    [native code]
}, get onpause() {
    [native code]
}, set onpause() {
    [native code]
}, get onplay() {
    [native code]
}, set onplay() {
    [native code]
}, get onplaying() {
    [native code]
}, set onplaying() {
    [native code]
}, get onprogress() {
    [native code]
}, set onprogress() {
    [native code]
}, get onratechange() {
    [native code]
}, set onratechange() {
    [native code]
}, get onreset() {
    [native code]
}, set onreset() {
    [native code]
}, get onresize() {
    [native code]
}, set onresize() {
    [native code]
}, get onscroll() {
    [native code]
}, set onscroll() {
    [native code]
}, get onsecuritypolicyviolation() {
    [native code]
}, set onsecuritypolicyviolation() {
    [native code]
}, get onseeked() {
    [native code]
}, set onseeked() {
    [native code]
}, get onseeking() {
    [native code]
}, set onseeking() {
    [native code]
}, get onselect() {
    [native code]
}, set onselect() {
    [native code]
}, get onslotchange() {
    [native code]
}, set onslotchange() {
    [native code]
}, get onstalled() {
    [native code]
}, set onstalled() {
    [native code]
}, get onsubmit() {
    [native code]
}, set onsubmit() {
    [native code]
}, get onsuspend() {
    [native code]
}, set onsuspend() {
    [native code]
}, get ontimeupdate() {
    [native code]
}, set ontimeupdate() {
    [native code]
}, get onvolumechange() {
    [native code]
}, set onvolumechange() {
    [native code]
}, get onwaiting() {
    [native code]
}, set onwaiting() {
    [native code]
}, get onselectstart() {
    [native code]
}, set onselectstart() {
    [native code]
}, get onselectionchange() {
    [native code]
}, set onselectionchange() {
    [native code]
}, get ontoggle() {
    [native code]
}, set ontoggle() {
    [native code]
}, get onpointercancel() {
    [native code]
}, set onpointercancel() {
    [native code]
}, get onpointerdown() {
    [native code]
}, set onpointerdown() {
    [native code]
}, get onpointerup() {
    [native code]
}, set onpointerup() {
    [native code]
}, get onpointermove() {
    [native code]
}, set onpointermove() {
    [native code]
}, get onpointerout() {
    [native code]
}, set onpointerout() {
    [native code]
}, get onpointerover() {
    [native code]
}, set onpointerover() {
    [native code]
}, get onpointerenter() {
    [native code]
}, set onpointerenter() {
    [native code]
}, get onpointerleave() {
    [native code]
}, set onpointerleave() {
    [native code]
}, get ongotpointercapture() {
    [native code]
}, set ongotpointercapture() {
    [native code]
}, get onlostpointercapture() {
    [native code]
}, set onlostpointercapture() {
    [native code]
}, get onmozfullscreenchange() {
    [native code]
}, set onmozfullscreenchange() {
    [native code]
}, get onmozfullscreenerror() {
    [native code]
}, set onmozfullscreenerror() {
    [native code]
}, get onanimationcancel() {
    [native code]
}, set onanimationcancel() {
    [native code]
}, get onanimationend() {
    [native code]
}, set onanimationend() {
    [native code]
}, get onanimationiteration() {
    [native code]
}, set onanimationiteration() {
    [native code]
}, get onanimationstart() {
    [native code]
}, set onanimationstart() {
    [native code]
}, get ontransitioncancel() {
    [native code]
}, set ontransitioncancel() {
    [native code]
}, get ontransitionend() {
    [native code]
}, set ontransitionend() {
    [native code]
}, get ontransitionrun() {
    [native code]
}, set ontransitionrun() {
    [native code]
}, get ontransitionstart() {
    [native code]
}, set ontransitionstart() {
    [native code]
}, get onwebkitanimationend() {
    [native code]
}, set onwebkitanimationend() {
    [native code]
}, get onwebkitanimationiteration() {
    [native code]
}, set onwebkitanimationiteration() {
    [native code]
}, get onwebkitanimationstart() {
    [native code]
}, set onwebkitanimationstart() {
    [native code]
}, get onwebkittransitionend() {
    [native code]
}, set onwebkittransitionend() {
    [native code]
}, get u2f() {
    [native code]
}, set u2f() {
    [native code]
}, get onerror() {
    [native code]
}, set onerror() {
    [native code]
}, get speechSynthesis() {
    [native code]
}, get onafterprint() {
    [native code]
}, set onafterprint() {
    [native code]
}, get onbeforeprint() {
    [native code]
}, set onbeforeprint() {
    [native code]
}, get onbeforeunload() {
    [native code]
}, set onbeforeunload() {
    [native code]
}, get onhashchange() {
    [native code]
}, set onhashchange() {
    [native code]
}, get onlanguagechange() {
    [native code]
}, set onlanguagechange() {
    [native code]
}, get onmessage() {
    [native code]
}, set onmessage() {
    [native code]
}, get onmessageerror() {
    [native code]
}, set onmessageerror() {
    [native code]
}, get onoffline() {
    [native code]
}, set onoffline() {
    [native code]
}, get ononline() {
    [native code]
}, set ononline() {
    [native code]
}, get onpagehide() {
    [native code]
}, set onpagehide() {
    [native code]
}, get onpageshow() {
    [native code]
}, set onpageshow() {
    [native code]
}, get onpopstate() {
    [native code]
}, set onpopstate() {
    [native code]
}, get onrejectionhandled() {
    [native code]
}, set onrejectionhandled() {
    [native code]
}, get onstorage() {
    [native code]
}, set onstorage() {
    [native code]
}, get onunhandledrejection() {
    [native code]
}, set onunhandledrejection() {
    [native code]
}, get onunload() {
    [native code]
}, set onunload() {
    [native code]
}, get ongamepadconnected() {
    [native code]
}, set ongamepadconnected() {
    [native code]
}, get ongamepaddisconnected() {
    [native code]
}, set ongamepaddisconnected() {
    [native code]
}, get localStorage() {
    [native code]
}, get origin() {
    [native code]
}, set origin() {
    [native code]
}, get crossOriginIsolated() {
    [native code]
}, get isSecureContext() {
    [native code]
}, get indexedDB() {
    [native code]
}, get caches() {
    [native code]
}, get sessionStorage() {
    [native code]
}, mozScrollSnap:function mozScrollSnap() {
    [native code]
}, openDialog:function openDialog() {
    [native code]
}, getInterface:function getInterface() {
    [native code]
}, shouldReportForServiceWorkerScope:function shouldReportForServiceWorkerScope() {
    [native code]
}, setScrollMarks:function setScrollMarks() {
    [native code]
}, get controllers() {
    [native code]
}, set controllers() {
    [native code]
}, get realFrameElement() {
    [native code]
}, get docShell() {
    [native code]
}, get browsingContext() {
    [native code]
}, get desktopToDeviceScale() {
    [native code]
}, get scrollMinX() {
    [native code]
}, get scrollMinY() {
    [native code]
}, get windowRoot() {
    [native code]
}, get windowUtils() {
    [native code]
}, get windowGlobalChild() {
    [native code]
}, get clientPrincipal() {
    [native code]
}, get isChromeWindow() {
    [native code]
}, get Glean() {
    [native code]
}, get GleanPings() {
    [native code]
}}, isPrivate:false, followWindowGlobalLifeCycle:true, isTopLevelTarget:false, ignoreSubFrames:true, sessionContext:{type:"browser-element", browserId:7, isServerTargetSwitchingEnabled:true, isPopupDebuggingEnabled:false, supportedTargets:{frame:true, process:true, worker:true}, supportedResources:{'console-message':true, 'css-change':true, 'css-message':true, 'document-event':true, Cache:true, cookies:true, 'error-message':true, 'indexed-db':true, 'local-storage':true, 'session-storage':true, 'platform-message':true, 'network-event':true, 'network-event-stacktrace':true, reflow:true, stylesheet:true, source:true, 'thread-state':true, 'server-sent-event':true, websocket:true}}, _extraActors:{consoleActor:{_options:{id:"devtools/server/actors/webconsole", prefix:"console", constructorName:"WebConsoleActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"consoleActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"consoleActor", actorID:"server0.conn0.windowGlobal4294967617/consoleActor3", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, inspectorActor:{_options:{id:"devtools/server/actors/inspector/inspector", prefix:"inspector", constructorName:"InspectorActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"inspectorActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"inspectorActor", actorID:"server0.conn0.windowGlobal4294967617/inspectorActor4", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, styleSheetsActor:{_options:{id:"devtools/server/actors/style-sheets", prefix:"styleSheets", constructorName:"StyleSheetsActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"styleSheetsActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"styleSheetsActor", actorID:"server0.conn0.windowGlobal4294967617/styleSheetsActor5", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, storageActor:{_options:{id:"devtools/server/actors/storage", prefix:"storage", constructorName:"StorageActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"storageActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"storageActor", actorID:"server0.conn0.windowGlobal4294967617/storageActor6", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, memoryActor:{_options:{id:"devtools/server/actors/memory", prefix:"memory", constructorName:"MemoryActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"memoryActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"memoryActor", actorID:"server0.conn0.windowGlobal4294967617/memoryActor7", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, reflowActor:{_options:{id:"devtools/server/actors/reflow", prefix:"reflow", constructorName:"ReflowActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"reflowActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"reflowActor", actorID:"server0.conn0.windowGlobal4294967617/reflowActor8", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, cssPropertiesActor:{_options:{id:"devtools/server/actors/css-properties", prefix:"cssProperties", constructorName:"CssPropertiesActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"cssPropertiesActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"cssPropertiesActor", actorID:"server0.conn0.windowGlobal4294967617/cssPropertiesActor9", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, animationsActor:{_options:{id:"devtools/server/actors/animation", prefix:"animations", constructorName:"AnimationsActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"animationsActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"animationsActor", actorID:"server0.conn0.windowGlobal4294967617/animationsActor10", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, responsiveActor:{_options:{id:"devtools/server/actors/emulation/responsive", prefix:"responsive", constructorName:"ResponsiveActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"responsiveActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"responsiveActor", actorID:"server0.conn0.windowGlobal4294967617/responsiveActor11", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, webExtensionInspectedWindowActor:{_options:{id:"devtools/server/actors/addon/webextension-inspected-window", prefix:"webExtensionInspectedWindow", constructorName:"WebExtensionInspectedWindowActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"webExtensionInspectedWindowActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"webExtensionInspectedWindowActor", actorID:"server0.conn0.windowGlobal4294967617/webExtensionInspectedWindowActor12", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, accessibilityActor:{_options:{id:"devtools/server/actors/accessibility/accessibility", prefix:"accessibility", constructorName:"AccessibilityActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"accessibilityActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"accessibilityActor", actorID:"server0.conn0.windowGlobal4294967617/accessibilityActor13", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, changesActor:{_options:{id:"devtools/server/actors/changes", prefix:"changes", constructorName:"ChangesActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"changesActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"changesActor", actorID:"server0.conn0.windowGlobal4294967617/changesActor14", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, webSocketActor:{_options:{id:"devtools/server/actors/network-monitor/websocket-actor", prefix:"webSocket", constructorName:"WebSocketActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"webSocketActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"webSocketActor", actorID:"server0.conn0.windowGlobal4294967617/webSocketActor15", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, eventSourceActor:{_options:{id:"devtools/server/actors/network-monitor/eventsource-actor", prefix:"eventSource", constructorName:"EventSourceActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"eventSourceActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"eventSourceActor", actorID:"server0.conn0.windowGlobal4294967617/eventSourceActor16", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, manifestActor:{_options:{id:"devtools/server/actors/manifest", prefix:"manifest", constructorName:"ManifestActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"manifestActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"manifestActor", actorID:"server0.conn0.windowGlobal4294967617/manifestActor17", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, networkContentActor:{_options:{id:"devtools/server/actors/network-monitor/network-content", prefix:"networkContent", constructorName:"NetworkContentActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"networkContentActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"networkContentActor", actorID:"server0.conn0.windowGlobal4294967617/networkContentActor18", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, screenshotContentActor:{_options:{id:"devtools/server/actors/screenshot-content", prefix:"screenshotContent", constructorName:"ScreenshotContentActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"screenshotContentActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"screenshotContentActor", actorID:"server0.conn0.windowGlobal4294967617/screenshotContentActor19", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}}, _sourcesManager:{_thread:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, actorID:"server0.conn0.windowGlobal4294967617/thread1", _actorSpec:{typeName:"thread", methods:[{name:"attach", request:{type:"attach", template:{type:"attach", options:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, args:[{placeholder:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reconfigure", request:{type:"reconfigure", template:{type:"reconfigure", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"resume", request:{type:"resume", template:{type:"resume", resumeLimit:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, frameActorID:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["resumeLimit"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["frameActorID"]}]}, response:{template:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"frames", request:{type:"frames", template:{type:"frames", start:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, count:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["start"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["count"]}]}, response:{template:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"interrupt", request:{type:"interrupt", template:{type:"interrupt", when:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["when"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"sources", request:{type:"sources", template:{type:"sources"}, args:[]}, response:{template:{sources:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["sources"]}, release:(void 0), oneway:(void 0)}, {name:"skipBreakpoints", request:{type:"skipBreakpoints", template:{type:"skipBreakpoints", skip:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["skip"]}]}, response:{template:{skip:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}}, release:(void 0), oneway:(void 0)}, {name:"dumpThread", request:{type:"dumpThread", template:{type:"dumpThread"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"dumpPools", request:{type:"dumpPools", template:{type:"dumpPools"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"setBreakpoint", request:{type:"setBreakpoint", template:{type:"setBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, options:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"removeBreakpoint", request:{type:"removeBreakpoint", template:{type:"removeBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"setXHRBreakpoint", request:{type:"setXHRBreakpoint", template:{type:"setXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"removeXHRBreakpoint", request:{type:"removeXHRBreakpoint", template:{type:"removeXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getAvailableEventBreakpoints", request:{type:"getAvailableEventBreakpoints", template:{type:"getAvailableEventBreakpoints"}, args:[]}, response:{template:{value:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getActiveEventBreakpoints", request:{type:"getActiveEventBreakpoints", template:{type:"getActiveEventBreakpoints"}, args:[]}, response:{template:{ids:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}, release:(void 0), oneway:(void 0)}, {name:"setActiveEventBreakpoints", request:{type:"setActiveEventBreakpoints", template:{type:"setActiveEventBreakpoints", ids:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"pauseOnExceptions", request:{type:"pauseOnExceptions", template:{type:"pauseOnExceptions", pauseOnExceptions:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, ignoreCaughtExceptions:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["pauseOnExceptions"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ignoreCaughtExceptions"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"toggleEventLogging", request:{type:"toggleEventLogging", template:{type:"toggleEventLogging", logEventBreakpoints:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["logEventBreakpoints"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"isAttached", request:{type:"isAttached", template:{type:"isAttached"}, args:[]}, response:{template:{value:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, retVal:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["value"]}, release:(void 0), oneway:(void 0)}], events:{}}, _state:"running", _parent:{}, global:{get window() {
    [native code]
}, get document() {
    [native code]
}, get location() {
    [native code]
}, set location() {
    [native code]
}, get top() {
    [native code]
}, close:function close() {
    [native code]
}, stop:function stop() {
    [native code]
}, focus:function focus() {
    [native code]
}, blur:function blur() {
    [native code]
}, open:function open() {
    [native code]
}, alert:function alert() {
    [native code]
}, confirm:function confirm() {
    [native code]
}, prompt:function prompt() {
    [native code]
}, print:function print() {
    [native code]
}, printPreview:function printPreview() {
    [native code]
}, postMessage:function postMessage() {
    [native code]
}, captureEvents:function captureEvents() {
    [native code]
}, releaseEvents:function releaseEvents() {
    [native code]
}, getSelection:function getSelection() {
    [native code]
}, getComputedStyle:function getComputedStyle() {
    [native code]
}, matchMedia:function matchMedia() {
    [native code]
}, moveTo:function moveTo() {
    [native code]
}, moveBy:function moveBy() {
    [native code]
}, resizeTo:function resizeTo() {
    [native code]
}, resizeBy:function resizeBy() {
    [native code]
}, scroll:function scroll() {
    [native code]
}, scrollTo:function scrollTo() {
    [native code]
}, scrollBy:function scrollBy() {
    [native code]
}, getDefaultComputedStyle:function getDefaultComputedStyle() {
    [native code]
}, scrollByLines:function scrollByLines() {
    [native code]
}, scrollByPages:function scrollByPages() {
    [native code]
}, sizeToContent:function sizeToContent() {
    [native code]
}, updateCommands:function updateCommands() {
    [native code]
}, find:function find() {
    [native code]
}, dump:function dump() {
    [native code]
}, setResizable:function setResizable() {
    [native code]
}, requestIdleCallback:function requestIdleCallback() {
    [native code]
}, cancelIdleCallback:function cancelIdleCallback() {
    [native code]
}, getRegionalPrefsLocales:function getRegionalPrefsLocales() {
    [native code]
}, getWebExposedLocales:function getWebExposedLocales() {
    [native code]
}, requestAnimationFrame:function requestAnimationFrame() {
    [native code]
}, cancelAnimationFrame:function cancelAnimationFrame() {
    [native code]
}, reportError:function reportError() {
    [native code]
}, btoa:function btoa() {
    [native code]
}, atob:function atob() {
    [native code]
}, setTimeout:function setTimeout() {
    [native code]
}, clearTimeout:function clearTimeout() {
    [native code]
}, setInterval:function setInterval() {
    [native code]
}, clearInterval:function clearInterval() {
    [native code]
}, queueMicrotask:function queueMicrotask() {
    [native code]
}, createImageBitmap:function createImageBitmap() {
    [native code]
}, structuredClone:function structuredClone() {
    [native code]
}, fetch:function fetch() {
    [native code]
}, get self() {
    [native code]
}, set self() {
    [native code]
}, get name() {
    [native code]
}, set name() {
    [native code]
}, get history() {
    [native code]
}, get customElements() {
    [native code]
}, get locationbar() {
    [native code]
}, set locationbar() {
    [native code]
}, get menubar() {
    [native code]
}, set menubar() {
    [native code]
}, get personalbar() {
    [native code]
}, set personalbar() {
    [native code]
}, get scrollbars() {
    [native code]
}, set scrollbars() {
    [native code]
}, get statusbar() {
    [native code]
}, set statusbar() {
    [native code]
}, get toolbar() {
    [native code]
}, set toolbar() {
    [native code]
}, get status() {
    [native code]
}, set status() {
    [native code]
}, get closed() {
    [native code]
}, get event() {
    [native code]
}, set event() {
    [native code]
}, get frames() {
    [native code]
}, set frames() {
    [native code]
}, get length() {
    [native code]
}, set length() {
    [native code]
}, get opener() {
    [native code]
}, set opener() {
    [native code]
}, get parent() {
    [native code]
}, set parent() {
    [native code]
}, get frameElement() {
    [native code]
}, get navigator() {
    [native code]
}, get clientInformation() {
    [native code]
}, get external() {
    [native code]
}, set external() {
    [native code]
}, get applicationCache() {
    [native code]
}, get screen() {
    [native code]
}, set screen() {
    [native code]
}, get innerWidth() {
    [native code]
}, set innerWidth() {
    [native code]
}, get innerHeight() {
    [native code]
}, set innerHeight() {
    [native code]
}, get scrollX() {
    [native code]
}, set scrollX() {
    [native code]
}, get pageXOffset() {
    [native code]
}, set pageXOffset() {
    [native code]
}, get scrollY() {
    [native code]
}, set scrollY() {
    [native code]
}, get pageYOffset() {
    [native code]
}, set pageYOffset() {
    [native code]
}, get screenLeft() {
    [native code]
}, set screenLeft() {
    [native code]
}, get screenTop() {
    [native code]
}, set screenTop() {
    [native code]
}, get screenX() {
    [native code]
}, set screenX() {
    [native code]
}, get screenY() {
    [native code]
}, set screenY() {
    [native code]
}, get outerWidth() {
    [native code]
}, set outerWidth() {
    [native code]
}, get outerHeight() {
    [native code]
}, set outerHeight() {
    [native code]
}, get performance() {
    [native code]
}, set performance() {
    [native code]
}, get mozInnerScreenX() {
    [native code]
}, get mozInnerScreenY() {
    [native code]
}, get devicePixelRatio() {
    [native code]
}, set devicePixelRatio() {
    [native code]
}, get scrollMaxX() {
    [native code]
}, set scrollMaxX() {
    [native code]
}, get scrollMaxY() {
    [native code]
}, set scrollMaxY() {
    [native code]
}, get fullScreen() {
    [native code]
}, set fullScreen() {
    [native code]
}, get ondevicemotion() {
    [native code]
}, set ondevicemotion() {
    [native code]
}, get ondeviceorientation() {
    [native code]
}, set ondeviceorientation() {
    [native code]
}, get onabsolutedeviceorientation() {
    [native code]
}, set onabsolutedeviceorientation() {
    [native code]
}, get InstallTrigger() {
    [native code]
}, set InstallTrigger() {
    [native code]
}, get intlUtils() {
    [native code]
}, get visualViewport() {
    [native code]
}, set visualViewport() {
    [native code]
}, get crypto() {
    [native code]
}, get onabort() {
    [native code]
}, set onabort() {
    [native code]
}, get onblur() {
    [native code]
}, set onblur() {
    [native code]
}, get onfocus() {
    [native code]
}, set onfocus() {
    [native code]
}, get onauxclick() {
    [native code]
}, set onauxclick() {
    [native code]
}, get onbeforeinput() {
    [native code]
}, set onbeforeinput() {
    [native code]
}, get oncanplay() {
    [native code]
}, set oncanplay() {
    [native code]
}, get oncanplaythrough() {
    [native code]
}, set oncanplaythrough() {
    [native code]
}, get onchange() {
    [native code]
}, set onchange() {
    [native code]
}, get onclick() {
    [native code]
}, set onclick() {
    [native code]
}, get onclose() {
    [native code]
}, set onclose() {
    [native code]
}, get oncontextmenu() {
    [native code]
}, set oncontextmenu() {
    [native code]
}, get oncuechange() {
    [native code]
}, set oncuechange() {
    [native code]
}, get ondblclick() {
    [native code]
}, set ondblclick() {
    [native code]
}, get ondrag() {
    [native code]
}, set ondrag() {
    [native code]
}, get ondragend() {
    [native code]
}, set ondragend() {
    [native code]
}, get ondragenter() {
    [native code]
}, set ondragenter() {
    [native code]
}, get ondragexit() {
    [native code]
}, set ondragexit() {
    [native code]
}, get ondragleave() {
    [native code]
}, set ondragleave() {
    [native code]
}, get ondragover() {
    [native code]
}, set ondragover() {
    [native code]
}, get ondragstart() {
    [native code]
}, set ondragstart() {
    [native code]
}, get ondrop() {
    [native code]
}, set ondrop() {
    [native code]
}, get ondurationchange() {
    [native code]
}, set ondurationchange() {
    [native code]
}, get onemptied() {
    [native code]
}, set onemptied() {
    [native code]
}, get onended() {
    [native code]
}, set onended() {
    [native code]
}, get onformdata() {
    [native code]
}, set onformdata() {
    [native code]
}, get oninput() {
    [native code]
}, set oninput() {
    [native code]
}, get oninvalid() {
    [native code]
}, set oninvalid() {
    [native code]
}, get onkeydown() {
    [native code]
}, set onkeydown() {
    [native code]
}, get onkeypress() {
    [native code]
}, set onkeypress() {
    [native code]
}, get onkeyup() {
    [native code]
}, set onkeyup() {
    [native code]
}, get onload() {
    [native code]
}, set onload() {
    [native code]
}, get onloadeddata() {
    [native code]
}, set onloadeddata() {
    [native code]
}, get onloadedmetadata() {
    [native code]
}, set onloadedmetadata() {
    [native code]
}, get onloadend() {
    [native code]
}, set onloadend() {
    [native code]
}, get onloadstart() {
    [native code]
}, set onloadstart() {
    [native code]
}, get onmousedown() {
    [native code]
}, set onmousedown() {
    [native code]
}, get onmouseenter() {
    [native code]
}, set onmouseenter() {
    [native code]
}, get onmouseleave() {
    [native code]
}, set onmouseleave() {
    [native code]
}, get onmousemove() {
    [native code]
}, set onmousemove() {
    [native code]
}, get onmouseout() {
    [native code]
}, set onmouseout() {
    [native code]
}, get onmouseover() {
    [native code]
}, set onmouseover() {
    [native code]
}, get onmouseup() {
    [native code]
}, set onmouseup() {
    [native code]
}, get onwheel() {
    [native code]
}, set onwheel() {
    [native code]
}, get onpause() {
    [native code]
}, set onpause() {
    [native code]
}, get onplay() {
    [native code]
}, set onplay() {
    [native code]
}, get onplaying() {
    [native code]
}, set onplaying() {
    [native code]
}, get onprogress() {
    [native code]
}, set onprogress() {
    [native code]
}, get onratechange() {
    [native code]
}, set onratechange() {
    [native code]
}, get onreset() {
    [native code]
}, set onreset() {
    [native code]
}, get onresize() {
    [native code]
}, set onresize() {
    [native code]
}, get onscroll() {
    [native code]
}, set onscroll() {
    [native code]
}, get onsecuritypolicyviolation() {
    [native code]
}, set onsecuritypolicyviolation() {
    [native code]
}, get onseeked() {
    [native code]
}, set onseeked() {
    [native code]
}, get onseeking() {
    [native code]
}, set onseeking() {
    [native code]
}, get onselect() {
    [native code]
}, set onselect() {
    [native code]
}, get onslotchange() {
    [native code]
}, set onslotchange() {
    [native code]
}, get onstalled() {
    [native code]
}, set onstalled() {
    [native code]
}, get onsubmit() {
    [native code]
}, set onsubmit() {
    [native code]
}, get onsuspend() {
    [native code]
}, set onsuspend() {
    [native code]
}, get ontimeupdate() {
    [native code]
}, set ontimeupdate() {
    [native code]
}, get onvolumechange() {
    [native code]
}, set onvolumechange() {
    [native code]
}, get onwaiting() {
    [native code]
}, set onwaiting() {
    [native code]
}, get onselectstart() {
    [native code]
}, set onselectstart() {
    [native code]
}, get onselectionchange() {
    [native code]
}, set onselectionchange() {
    [native code]
}, get ontoggle() {
    [native code]
}, set ontoggle() {
    [native code]
}, get onpointercancel() {
    [native code]
}, set onpointercancel() {
    [native code]
}, get onpointerdown() {
    [native code]
}, set onpointerdown() {
    [native code]
}, get onpointerup() {
    [native code]
}, set onpointerup() {
    [native code]
}, get onpointermove() {
    [native code]
}, set onpointermove() {
    [native code]
}, get onpointerout() {
    [native code]
}, set onpointerout() {
    [native code]
}, get onpointerover() {
    [native code]
}, set onpointerover() {
    [native code]
}, get onpointerenter() {
    [native code]
}, set onpointerenter() {
    [native code]
}, get onpointerleave() {
    [native code]
}, set onpointerleave() {
    [native code]
}, get ongotpointercapture() {
    [native code]
}, set ongotpointercapture() {
    [native code]
}, get onlostpointercapture() {
    [native code]
}, set onlostpointercapture() {
    [native code]
}, get onmozfullscreenchange() {
    [native code]
}, set onmozfullscreenchange() {
    [native code]
}, get onmozfullscreenerror() {
    [native code]
}, set onmozfullscreenerror() {
    [native code]
}, get onanimationcancel() {
    [native code]
}, set onanimationcancel() {
    [native code]
}, get onanimationend() {
    [native code]
}, set onanimationend() {
    [native code]
}, get onanimationiteration() {
    [native code]
}, set onanimationiteration() {
    [native code]
}, get onanimationstart() {
    [native code]
}, set onanimationstart() {
    [native code]
}, get ontransitioncancel() {
    [native code]
}, set ontransitioncancel() {
    [native code]
}, get ontransitionend() {
    [native code]
}, set ontransitionend() {
    [native code]
}, get ontransitionrun() {
    [native code]
}, set ontransitionrun() {
    [native code]
}, get ontransitionstart() {
    [native code]
}, set ontransitionstart() {
    [native code]
}, get onwebkitanimationend() {
    [native code]
}, set onwebkitanimationend() {
    [native code]
}, get onwebkitanimationiteration() {
    [native code]
}, set onwebkitanimationiteration() {
    [native code]
}, get onwebkitanimationstart() {
    [native code]
}, set onwebkitanimationstart() {
    [native code]
}, get onwebkittransitionend() {
    [native code]
}, set onwebkittransitionend() {
    [native code]
}, get u2f() {
    [native code]
}, set u2f() {
    [native code]
}, get onerror() {
    [native code]
}, set onerror() {
    [native code]
}, get speechSynthesis() {
    [native code]
}, get onafterprint() {
    [native code]
}, set onafterprint() {
    [native code]
}, get onbeforeprint() {
    [native code]
}, set onbeforeprint() {
    [native code]
}, get onbeforeunload() {
    [native code]
}, set onbeforeunload() {
    [native code]
}, get onhashchange() {
    [native code]
}, set onhashchange() {
    [native code]
}, get onlanguagechange() {
    [native code]
}, set onlanguagechange() {
    [native code]
}, get onmessage() {
    [native code]
}, set onmessage() {
    [native code]
}, get onmessageerror() {
    [native code]
}, set onmessageerror() {
    [native code]
}, get onoffline() {
    [native code]
}, set onoffline() {
    [native code]
}, get ononline() {
    [native code]
}, set ononline() {
    [native code]
}, get onpagehide() {
    [native code]
}, set onpagehide() {
    [native code]
}, get onpageshow() {
    [native code]
}, set onpageshow() {
    [native code]
}, get onpopstate() {
    [native code]
}, set onpopstate() {
    [native code]
}, get onrejectionhandled() {
    [native code]
}, set onrejectionhandled() {
    [native code]
}, get onstorage() {
    [native code]
}, set onstorage() {
    [native code]
}, get onunhandledrejection() {
    [native code]
}, set onunhandledrejection() {
    [native code]
}, get onunload() {
    [native code]
}, set onunload() {
    [native code]
}, get ongamepadconnected() {
    [native code]
}, set ongamepadconnected() {
    [native code]
}, get ongamepaddisconnected() {
    [native code]
}, set ongamepaddisconnected() {
    [native code]
}, get localStorage() {
    [native code]
}, get origin() {
    [native code]
}, set origin() {
    [native code]
}, get crossOriginIsolated() {
    [native code]
}, get isSecureContext() {
    [native code]
}, get indexedDB() {
    [native code]
}, get caches() {
    [native code]
}, get sessionStorage() {
    [native code]
}, mozScrollSnap:function mozScrollSnap() {
    [native code]
}, openDialog:function openDialog() {
    [native code]
}, getInterface:function getInterface() {
    [native code]
}, shouldReportForServiceWorkerScope:function shouldReportForServiceWorkerScope() {
    [native code]
}, setScrollMarks:function setScrollMarks() {
    [native code]
}, get controllers() {
    [native code]
}, set controllers() {
    [native code]
}, get realFrameElement() {
    [native code]
}, get docShell() {
    [native code]
}, get browsingContext() {
    [native code]
}, get desktopToDeviceScale() {
    [native code]
}, get scrollMinX() {
    [native code]
}, get scrollMinY() {
    [native code]
}, get windowRoot() {
    [native code]
}, get windowUtils() {
    [native code]
}, get windowGlobalChild() {
    [native code]
}, get clientPrincipal() {
    [native code]
}, get isChromeWindow() {
    [native code]
}, get Glean() {
    [native code]
}, get GleanPings() {
    [native code]
}}, _options:{skipBreakpoints:false, pauseOnExceptions:false, ignoreCaughtExceptions:true, shouldShowOverlay:true, shouldIncludeSavedFrames:true, shouldIncludeAsyncLiveFrames:false, logEventBreakpoints:false, observeAsmJS:true}, _gripDepth:0, _parentClosed:false, _observingNetwork:false, _frameActors:[], _xhrBreakpoints:[], _dbg:{addDebuggees:(function() {
    for (const global of findDebuggees(this)) {
      safeAddDebuggee(this, global);
    }
  }), disable:(function() {
    dbg.removeAllDebuggees();
    dbg.onNewGlobalObject = undefined;
  }), enable:(function() {
    dbg.addDebuggees();
    dbg.onNewGlobalObject = onNewGlobalObject;
  }), onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}}, _threadLifetimePool:{__poolMap:{}, parentPool:null, conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, label:"thread", _isDestroyed:false, objectActors:{}}, _activeEventPause:null, _pauseOverlay:null, _priorPause:null, _activeEventBreakpoints:{}, _frameActorMap:{}, _debuggerSourcesSeen:{}, _onLoadBreakpointURLs:{}, _handledFrameExceptions:{}, _watchpointsMap:{threadActor:{}, _watchpoints:{}}, breakpointActorMap:{_threadActor:{}, _actors:{}}, _nestedEventLoop:{_thread:{}, _entered:false, _resolved:false}, onNewSourceEvent:function bound onNewSourceEvent() {
    [native code]
}, createCompletionGrip:function bound createCompletionGrip() {
    [native code]
}, onDebuggerStatement:function bound onDebuggerStatement() {
    [native code]
}, onNewScript:function bound onNewScript() {
    [native code]
}, objectGrip:function bound objectGrip() {
    [native code]
}, pauseObjectGrip:function bound pauseObjectGrip() {
    [native code]
}, _onOpeningRequest:function bound _onOpeningRequest() {
    [native code]
}, _onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}, _onExceptionUnwind:function bound _onExceptionUnwind() {
    [native code]
}, _eventBreakpointListener:function bound _eventBreakpointListener() {
    [native code]
}, _onWindowReady:function bound _onWindowReady() {
    [native code]
}, _onWillNavigate:function bound _onWillNavigate() {
    [native code]
}, _onNavigate:function bound _onNavigate() {
    [native code]
}, _firstStatementBreakpoint:null, _debuggerNotificationObserver:{}, parentPool:{}, alreadyAttached:true, wrappedJSObject:{}, _pendingResponse:{}, [Symbol("EventEmitter/listeners")]:{}}, blackBoxedSources:{}, _sourceActors:{}, _urlContents:{}, _urlWaiters:{}, _sourcesByInternalSourceId:null, [Symbol("EventEmitter/listeners")]:{}}, _styleSheetActors:{}, _shouldAddNewGlobalAsDebuggee:function bound _shouldAddNewGlobalAsDebuggee() {
    [native code]
}, makeDebugger:function bound makeDebugger() {
    [native code]
}, watchNewDocShells:false, _workerDescriptorActorList:null, _workerDescriptorActorPool:null, _onWorkerDescriptorActorListChanged:function bound _onWorkerDescriptorActorListChanged() {
    [native code]
}, _onConsoleApiProfilerEvent:function bound _onConsoleApiProfilerEvent() {
    [native code]
}, threadActor:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, actorID:"server0.conn0.windowGlobal4294967617/thread1", _actorSpec:{typeName:"thread", methods:[{name:"attach", request:{type:"attach", template:{type:"attach", options:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, args:[{placeholder:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reconfigure", request:{type:"reconfigure", template:{type:"reconfigure", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"resume", request:{type:"resume", template:{type:"resume", resumeLimit:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, frameActorID:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["resumeLimit"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["frameActorID"]}]}, response:{template:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"frames", request:{type:"frames", template:{type:"frames", start:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, count:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["start"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["count"]}]}, response:{template:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"interrupt", request:{type:"interrupt", template:{type:"interrupt", when:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["when"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"sources", request:{type:"sources", template:{type:"sources"}, args:[]}, response:{template:{sources:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["sources"]}, release:(void 0), oneway:(void 0)}, {name:"skipBreakpoints", request:{type:"skipBreakpoints", template:{type:"skipBreakpoints", skip:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["skip"]}]}, response:{template:{skip:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}}, release:(void 0), oneway:(void 0)}, {name:"dumpThread", request:{type:"dumpThread", template:{type:"dumpThread"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"dumpPools", request:{type:"dumpPools", template:{type:"dumpPools"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"setBreakpoint", request:{type:"setBreakpoint", template:{type:"setBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, options:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"removeBreakpoint", request:{type:"removeBreakpoint", template:{type:"removeBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"setXHRBreakpoint", request:{type:"setXHRBreakpoint", template:{type:"setXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"removeXHRBreakpoint", request:{type:"removeXHRBreakpoint", template:{type:"removeXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getAvailableEventBreakpoints", request:{type:"getAvailableEventBreakpoints", template:{type:"getAvailableEventBreakpoints"}, args:[]}, response:{template:{value:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getActiveEventBreakpoints", request:{type:"getActiveEventBreakpoints", template:{type:"getActiveEventBreakpoints"}, args:[]}, response:{template:{ids:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}, release:(void 0), oneway:(void 0)}, {name:"setActiveEventBreakpoints", request:{type:"setActiveEventBreakpoints", template:{type:"setActiveEventBreakpoints", ids:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"pauseOnExceptions", request:{type:"pauseOnExceptions", template:{type:"pauseOnExceptions", pauseOnExceptions:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, ignoreCaughtExceptions:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["pauseOnExceptions"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ignoreCaughtExceptions"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"toggleEventLogging", request:{type:"toggleEventLogging", template:{type:"toggleEventLogging", logEventBreakpoints:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["logEventBreakpoints"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"isAttached", request:{type:"isAttached", template:{type:"isAttached"}, args:[]}, response:{template:{value:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, retVal:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["value"]}, release:(void 0), oneway:(void 0)}], events:{}}, _state:"running", _parent:{}, global:{get window() {
    [native code]
}, get document() {
    [native code]
}, get location() {
    [native code]
}, set location() {
    [native code]
}, get top() {
    [native code]
}, close:function close() {
    [native code]
}, stop:function stop() {
    [native code]
}, focus:function focus() {
    [native code]
}, blur:function blur() {
    [native code]
}, open:function open() {
    [native code]
}, alert:function alert() {
    [native code]
}, confirm:function confirm() {
    [native code]
}, prompt:function prompt() {
    [native code]
}, print:function print() {
    [native code]
}, printPreview:function printPreview() {
    [native code]
}, postMessage:function postMessage() {
    [native code]
}, captureEvents:function captureEvents() {
    [native code]
}, releaseEvents:function releaseEvents() {
    [native code]
}, getSelection:function getSelection() {
    [native code]
}, getComputedStyle:function getComputedStyle() {
    [native code]
}, matchMedia:function matchMedia() {
    [native code]
}, moveTo:function moveTo() {
    [native code]
}, moveBy:function moveBy() {
    [native code]
}, resizeTo:function resizeTo() {
    [native code]
}, resizeBy:function resizeBy() {
    [native code]
}, scroll:function scroll() {
    [native code]
}, scrollTo:function scrollTo() {
    [native code]
}, scrollBy:function scrollBy() {
    [native code]
}, getDefaultComputedStyle:function getDefaultComputedStyle() {
    [native code]
}, scrollByLines:function scrollByLines() {
    [native code]
}, scrollByPages:function scrollByPages() {
    [native code]
}, sizeToContent:function sizeToContent() {
    [native code]
}, updateCommands:function updateCommands() {
    [native code]
}, find:function find() {
    [native code]
}, dump:function dump() {
    [native code]
}, setResizable:function setResizable() {
    [native code]
}, requestIdleCallback:function requestIdleCallback() {
    [native code]
}, cancelIdleCallback:function cancelIdleCallback() {
    [native code]
}, getRegionalPrefsLocales:function getRegionalPrefsLocales() {
    [native code]
}, getWebExposedLocales:function getWebExposedLocales() {
    [native code]
}, requestAnimationFrame:function requestAnimationFrame() {
    [native code]
}, cancelAnimationFrame:function cancelAnimationFrame() {
    [native code]
}, reportError:function reportError() {
    [native code]
}, btoa:function btoa() {
    [native code]
}, atob:function atob() {
    [native code]
}, setTimeout:function setTimeout() {
    [native code]
}, clearTimeout:function clearTimeout() {
    [native code]
}, setInterval:function setInterval() {
    [native code]
}, clearInterval:function clearInterval() {
    [native code]
}, queueMicrotask:function queueMicrotask() {
    [native code]
}, createImageBitmap:function createImageBitmap() {
    [native code]
}, structuredClone:function structuredClone() {
    [native code]
}, fetch:function fetch() {
    [native code]
}, get self() {
    [native code]
}, set self() {
    [native code]
}, get name() {
    [native code]
}, set name() {
    [native code]
}, get history() {
    [native code]
}, get customElements() {
    [native code]
}, get locationbar() {
    [native code]
}, set locationbar() {
    [native code]
}, get menubar() {
    [native code]
}, set menubar() {
    [native code]
}, get personalbar() {
    [native code]
}, set personalbar() {
    [native code]
}, get scrollbars() {
    [native code]
}, set scrollbars() {
    [native code]
}, get statusbar() {
    [native code]
}, set statusbar() {
    [native code]
}, get toolbar() {
    [native code]
}, set toolbar() {
    [native code]
}, get status() {
    [native code]
}, set status() {
    [native code]
}, get closed() {
    [native code]
}, get event() {
    [native code]
}, set event() {
    [native code]
}, get frames() {
    [native code]
}, set frames() {
    [native code]
}, get length() {
    [native code]
}, set length() {
    [native code]
}, get opener() {
    [native code]
}, set opener() {
    [native code]
}, get parent() {
    [native code]
}, set parent() {
    [native code]
}, get frameElement() {
    [native code]
}, get navigator() {
    [native code]
}, get clientInformation() {
    [native code]
}, get external() {
    [native code]
}, set external() {
    [native code]
}, get applicationCache() {
    [native code]
}, get screen() {
    [native code]
}, set screen() {
    [native code]
}, get innerWidth() {
    [native code]
}, set innerWidth() {
    [native code]
}, get innerHeight() {
    [native code]
}, set innerHeight() {
    [native code]
}, get scrollX() {
    [native code]
}, set scrollX() {
    [native code]
}, get pageXOffset() {
    [native code]
}, set pageXOffset() {
    [native code]
}, get scrollY() {
    [native code]
}, set scrollY() {
    [native code]
}, get pageYOffset() {
    [native code]
}, set pageYOffset() {
    [native code]
}, get screenLeft() {
    [native code]
}, set screenLeft() {
    [native code]
}, get screenTop() {
    [native code]
}, set screenTop() {
    [native code]
}, get screenX() {
    [native code]
}, set screenX() {
    [native code]
}, get screenY() {
    [native code]
}, set screenY() {
    [native code]
}, get outerWidth() {
    [native code]
}, set outerWidth() {
    [native code]
}, get outerHeight() {
    [native code]
}, set outerHeight() {
    [native code]
}, get performance() {
    [native code]
}, set performance() {
    [native code]
}, get mozInnerScreenX() {
    [native code]
}, get mozInnerScreenY() {
    [native code]
}, get devicePixelRatio() {
    [native code]
}, set devicePixelRatio() {
    [native code]
}, get scrollMaxX() {
    [native code]
}, set scrollMaxX() {
    [native code]
}, get scrollMaxY() {
    [native code]
}, set scrollMaxY() {
    [native code]
}, get fullScreen() {
    [native code]
}, set fullScreen() {
    [native code]
}, get ondevicemotion() {
    [native code]
}, set ondevicemotion() {
    [native code]
}, get ondeviceorientation() {
    [native code]
}, set ondeviceorientation() {
    [native code]
}, get onabsolutedeviceorientation() {
    [native code]
}, set onabsolutedeviceorientation() {
    [native code]
}, get InstallTrigger() {
    [native code]
}, set InstallTrigger() {
    [native code]
}, get intlUtils() {
    [native code]
}, get visualViewport() {
    [native code]
}, set visualViewport() {
    [native code]
}, get crypto() {
    [native code]
}, get onabort() {
    [native code]
}, set onabort() {
    [native code]
}, get onblur() {
    [native code]
}, set onblur() {
    [native code]
}, get onfocus() {
    [native code]
}, set onfocus() {
    [native code]
}, get onauxclick() {
    [native code]
}, set onauxclick() {
    [native code]
}, get onbeforeinput() {
    [native code]
}, set onbeforeinput() {
    [native code]
}, get oncanplay() {
    [native code]
}, set oncanplay() {
    [native code]
}, get oncanplaythrough() {
    [native code]
}, set oncanplaythrough() {
    [native code]
}, get onchange() {
    [native code]
}, set onchange() {
    [native code]
}, get onclick() {
    [native code]
}, set onclick() {
    [native code]
}, get onclose() {
    [native code]
}, set onclose() {
    [native code]
}, get oncontextmenu() {
    [native code]
}, set oncontextmenu() {
    [native code]
}, get oncuechange() {
    [native code]
}, set oncuechange() {
    [native code]
}, get ondblclick() {
    [native code]
}, set ondblclick() {
    [native code]
}, get ondrag() {
    [native code]
}, set ondrag() {
    [native code]
}, get ondragend() {
    [native code]
}, set ondragend() {
    [native code]
}, get ondragenter() {
    [native code]
}, set ondragenter() {
    [native code]
}, get ondragexit() {
    [native code]
}, set ondragexit() {
    [native code]
}, get ondragleave() {
    [native code]
}, set ondragleave() {
    [native code]
}, get ondragover() {
    [native code]
}, set ondragover() {
    [native code]
}, get ondragstart() {
    [native code]
}, set ondragstart() {
    [native code]
}, get ondrop() {
    [native code]
}, set ondrop() {
    [native code]
}, get ondurationchange() {
    [native code]
}, set ondurationchange() {
    [native code]
}, get onemptied() {
    [native code]
}, set onemptied() {
    [native code]
}, get onended() {
    [native code]
}, set onended() {
    [native code]
}, get onformdata() {
    [native code]
}, set onformdata() {
    [native code]
}, get oninput() {
    [native code]
}, set oninput() {
    [native code]
}, get oninvalid() {
    [native code]
}, set oninvalid() {
    [native code]
}, get onkeydown() {
    [native code]
}, set onkeydown() {
    [native code]
}, get onkeypress() {
    [native code]
}, set onkeypress() {
    [native code]
}, get onkeyup() {
    [native code]
}, set onkeyup() {
    [native code]
}, get onload() {
    [native code]
}, set onload() {
    [native code]
}, get onloadeddata() {
    [native code]
}, set onloadeddata() {
    [native code]
}, get onloadedmetadata() {
    [native code]
}, set onloadedmetadata() {
    [native code]
}, get onloadend() {
    [native code]
}, set onloadend() {
    [native code]
}, get onloadstart() {
    [native code]
}, set onloadstart() {
    [native code]
}, get onmousedown() {
    [native code]
}, set onmousedown() {
    [native code]
}, get onmouseenter() {
    [native code]
}, set onmouseenter() {
    [native code]
}, get onmouseleave() {
    [native code]
}, set onmouseleave() {
    [native code]
}, get onmousemove() {
    [native code]
}, set onmousemove() {
    [native code]
}, get onmouseout() {
    [native code]
}, set onmouseout() {
    [native code]
}, get onmouseover() {
    [native code]
}, set onmouseover() {
    [native code]
}, get onmouseup() {
    [native code]
}, set onmouseup() {
    [native code]
}, get onwheel() {
    [native code]
}, set onwheel() {
    [native code]
}, get onpause() {
    [native code]
}, set onpause() {
    [native code]
}, get onplay() {
    [native code]
}, set onplay() {
    [native code]
}, get onplaying() {
    [native code]
}, set onplaying() {
    [native code]
}, get onprogress() {
    [native code]
}, set onprogress() {
    [native code]
}, get onratechange() {
    [native code]
}, set onratechange() {
    [native code]
}, get onreset() {
    [native code]
}, set onreset() {
    [native code]
}, get onresize() {
    [native code]
}, set onresize() {
    [native code]
}, get onscroll() {
    [native code]
}, set onscroll() {
    [native code]
}, get onsecuritypolicyviolation() {
    [native code]
}, set onsecuritypolicyviolation() {
    [native code]
}, get onseeked() {
    [native code]
}, set onseeked() {
    [native code]
}, get onseeking() {
    [native code]
}, set onseeking() {
    [native code]
}, get onselect() {
    [native code]
}, set onselect() {
    [native code]
}, get onslotchange() {
    [native code]
}, set onslotchange() {
    [native code]
}, get onstalled() {
    [native code]
}, set onstalled() {
    [native code]
}, get onsubmit() {
    [native code]
}, set onsubmit() {
    [native code]
}, get onsuspend() {
    [native code]
}, set onsuspend() {
    [native code]
}, get ontimeupdate() {
    [native code]
}, set ontimeupdate() {
    [native code]
}, get onvolumechange() {
    [native code]
}, set onvolumechange() {
    [native code]
}, get onwaiting() {
    [native code]
}, set onwaiting() {
    [native code]
}, get onselectstart() {
    [native code]
}, set onselectstart() {
    [native code]
}, get onselectionchange() {
    [native code]
}, set onselectionchange() {
    [native code]
}, get ontoggle() {
    [native code]
}, set ontoggle() {
    [native code]
}, get onpointercancel() {
    [native code]
}, set onpointercancel() {
    [native code]
}, get onpointerdown() {
    [native code]
}, set onpointerdown() {
    [native code]
}, get onpointerup() {
    [native code]
}, set onpointerup() {
    [native code]
}, get onpointermove() {
    [native code]
}, set onpointermove() {
    [native code]
}, get onpointerout() {
    [native code]
}, set onpointerout() {
    [native code]
}, get onpointerover() {
    [native code]
}, set onpointerover() {
    [native code]
}, get onpointerenter() {
    [native code]
}, set onpointerenter() {
    [native code]
}, get onpointerleave() {
    [native code]
}, set onpointerleave() {
    [native code]
}, get ongotpointercapture() {
    [native code]
}, set ongotpointercapture() {
    [native code]
}, get onlostpointercapture() {
    [native code]
}, set onlostpointercapture() {
    [native code]
}, get onmozfullscreenchange() {
    [native code]
}, set onmozfullscreenchange() {
    [native code]
}, get onmozfullscreenerror() {
    [native code]
}, set onmozfullscreenerror() {
    [native code]
}, get onanimationcancel() {
    [native code]
}, set onanimationcancel() {
    [native code]
}, get onanimationend() {
    [native code]
}, set onanimationend() {
    [native code]
}, get onanimationiteration() {
    [native code]
}, set onanimationiteration() {
    [native code]
}, get onanimationstart() {
    [native code]
}, set onanimationstart() {
    [native code]
}, get ontransitioncancel() {
    [native code]
}, set ontransitioncancel() {
    [native code]
}, get ontransitionend() {
    [native code]
}, set ontransitionend() {
    [native code]
}, get ontransitionrun() {
    [native code]
}, set ontransitionrun() {
    [native code]
}, get ontransitionstart() {
    [native code]
}, set ontransitionstart() {
    [native code]
}, get onwebkitanimationend() {
    [native code]
}, set onwebkitanimationend() {
    [native code]
}, get onwebkitanimationiteration() {
    [native code]
}, set onwebkitanimationiteration() {
    [native code]
}, get onwebkitanimationstart() {
    [native code]
}, set onwebkitanimationstart() {
    [native code]
}, get onwebkittransitionend() {
    [native code]
}, set onwebkittransitionend() {
    [native code]
}, get u2f() {
    [native code]
}, set u2f() {
    [native code]
}, get onerror() {
    [native code]
}, set onerror() {
    [native code]
}, get speechSynthesis() {
    [native code]
}, get onafterprint() {
    [native code]
}, set onafterprint() {
    [native code]
}, get onbeforeprint() {
    [native code]
}, set onbeforeprint() {
    [native code]
}, get onbeforeunload() {
    [native code]
}, set onbeforeunload() {
    [native code]
}, get onhashchange() {
    [native code]
}, set onhashchange() {
    [native code]
}, get onlanguagechange() {
    [native code]
}, set onlanguagechange() {
    [native code]
}, get onmessage() {
    [native code]
}, set onmessage() {
    [native code]
}, get onmessageerror() {
    [native code]
}, set onmessageerror() {
    [native code]
}, get onoffline() {
    [native code]
}, set onoffline() {
    [native code]
}, get ononline() {
    [native code]
}, set ononline() {
    [native code]
}, get onpagehide() {
    [native code]
}, set onpagehide() {
    [native code]
}, get onpageshow() {
    [native code]
}, set onpageshow() {
    [native code]
}, get onpopstate() {
    [native code]
}, set onpopstate() {
    [native code]
}, get onrejectionhandled() {
    [native code]
}, set onrejectionhandled() {
    [native code]
}, get onstorage() {
    [native code]
}, set onstorage() {
    [native code]
}, get onunhandledrejection() {
    [native code]
}, set onunhandledrejection() {
    [native code]
}, get onunload() {
    [native code]
}, set onunload() {
    [native code]
}, get ongamepadconnected() {
    [native code]
}, set ongamepadconnected() {
    [native code]
}, get ongamepaddisconnected() {
    [native code]
}, set ongamepaddisconnected() {
    [native code]
}, get localStorage() {
    [native code]
}, get origin() {
    [native code]
}, set origin() {
    [native code]
}, get crossOriginIsolated() {
    [native code]
}, get isSecureContext() {
    [native code]
}, get indexedDB() {
    [native code]
}, get caches() {
    [native code]
}, get sessionStorage() {
    [native code]
}, mozScrollSnap:function mozScrollSnap() {
    [native code]
}, openDialog:function openDialog() {
    [native code]
}, getInterface:function getInterface() {
    [native code]
}, shouldReportForServiceWorkerScope:function shouldReportForServiceWorkerScope() {
    [native code]
}, setScrollMarks:function setScrollMarks() {
    [native code]
}, get controllers() {
    [native code]
}, set controllers() {
    [native code]
}, get realFrameElement() {
    [native code]
}, get docShell() {
    [native code]
}, get browsingContext() {
    [native code]
}, get desktopToDeviceScale() {
    [native code]
}, get scrollMinX() {
    [native code]
}, get scrollMinY() {
    [native code]
}, get windowRoot() {
    [native code]
}, get windowUtils() {
    [native code]
}, get windowGlobalChild() {
    [native code]
}, get clientPrincipal() {
    [native code]
}, get isChromeWindow() {
    [native code]
}, get Glean() {
    [native code]
}, get GleanPings() {
    [native code]
}}, _options:{skipBreakpoints:false, pauseOnExceptions:false, ignoreCaughtExceptions:true, shouldShowOverlay:true, shouldIncludeSavedFrames:true, shouldIncludeAsyncLiveFrames:false, logEventBreakpoints:false, observeAsmJS:true}, _gripDepth:0, _parentClosed:false, _observingNetwork:false, _frameActors:[], _xhrBreakpoints:[], _dbg:{addDebuggees:(function() {
    for (const global of findDebuggees(this)) {
      safeAddDebuggee(this, global);
    }
  }), disable:(function() {
    dbg.removeAllDebuggees();
    dbg.onNewGlobalObject = undefined;
  }), enable:(function() {
    dbg.addDebuggees();
    dbg.onNewGlobalObject = onNewGlobalObject;
  }), onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}}, _threadLifetimePool:{__poolMap:{}, parentPool:null, conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, label:"thread", _isDestroyed:false, objectActors:{}}, _activeEventPause:null, _pauseOverlay:null, _priorPause:null, _activeEventBreakpoints:{}, _frameActorMap:{}, _debuggerSourcesSeen:{}, _onLoadBreakpointURLs:{}, _handledFrameExceptions:{}, _watchpointsMap:{threadActor:{}, _watchpoints:{}}, breakpointActorMap:{_threadActor:{}, _actors:{}}, _nestedEventLoop:{_thread:{}, _entered:false, _resolved:false}, onNewSourceEvent:function bound onNewSourceEvent() {
    [native code]
}, createCompletionGrip:function bound createCompletionGrip() {
    [native code]
}, onDebuggerStatement:function bound onDebuggerStatement() {
    [native code]
}, onNewScript:function bound onNewScript() {
    [native code]
}, objectGrip:function bound objectGrip() {
    [native code]
}, pauseObjectGrip:function bound pauseObjectGrip() {
    [native code]
}, _onOpeningRequest:function bound _onOpeningRequest() {
    [native code]
}, _onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}, _onExceptionUnwind:function bound _onExceptionUnwind() {
    [native code]
}, _eventBreakpointListener:function bound _eventBreakpointListener() {
    [native code]
}, _onWindowReady:function bound _onWindowReady() {
    [native code]
}, _onWillNavigate:function bound _onWillNavigate() {
    [native code]
}, _onNavigate:function bound _onNavigate() {
    [native code]
}, _firstStatementBreakpoint:null, _debuggerNotificationObserver:{}, parentPool:{}, alreadyAttached:true, wrappedJSObject:{}, _pendingResponse:{}, [Symbol("EventEmitter/listeners")]:{}}, __poolMap:{}, _progressListener:{_targetActor:{}, _onWindowCreated:function bound () {
    [native code]
}, _onWindowHidden:function bound () {
    [native code]
}, _knownWindowIDs:{}, _watchedDocShells:{}}, _docShellsObserved:true, parentPool:{}, createdFromJsWindowActor:true, _targetScopedActorPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967617/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967617", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, _dbg:{addDebuggees:(function() {
    for (const global of findDebuggees(this)) {
      safeAddDebuggee(this, global);
    }
  }), disable:(function() {
    dbg.removeAllDebuggees();
    dbg.onNewGlobalObject = undefined;
  }), enable:(function() {
    dbg.addDebuggees();
    dbg.onNewGlobalObject = onNewGlobalObject;
  }), onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}}, _styleSheetManager:{_styleSheetCount:0, _styleSheetMap:{}, _mqlList:[], _targetActor:{}, _onApplicableStateChanged:function bound _onApplicableStateChanged() {
    [native code]
}, _onTargetActorWindowReady:function bound _onTargetActorWindowReady() {
    [native code]
}, [Symbol("EventEmitter/listeners")]:{}}, [Symbol("EventEmitter/listeners")]:{}}) ": " (new TypeError("this._targetActor.chromeEventHandler is null", "resource://devtools/server/actors/utils/stylesheets-manager.js", 867))
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 1706: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/connectors/js-window-actor/DevToolsFrameChild.jsm, line 375: InvalidStateError: JSWindowActorChild.sendAsyncMessage: JSWindowActorChild cannot send at the moment
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
Handler function threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_onRequestHeader@resource://devtools/server/actors/network-monitor/network-observer.js:756:10
NetworkObserver.prototype.observeActivity<@resource://devtools/server/actors/network-monitor/network-observer.js:637:12
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
Handler function threw an exception: TypeError: httpActivity.owner is null
Stack: _onResponseHeader@resource://devtools/server/actors/network-monitor/network-observer.js:1018:5
_dispatchActivity@resource://devtools/server/actors/network-monitor/network-observer.js:558:14
NetworkObserver.prototype.observeActivity<@resource://devtools/server/actors/network-monitor/network-observer.js:667:12
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 1018, column: 5
console.error: (new TypeError("httpActivity.owner is null", "resource://devtools/server/actors/network-monitor/network-observer.js", 1018))
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:338:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: https://s0.2mdn.net/sadbundle/4163918015545716211/index.html, line 259: TypeError: studio.Enabler is undefined
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
ATTENTION: default value of option mesa_glthread overridden by environment.
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 876 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
console.error: "Failed to start [root-node] legacy listener for target null" (new Error("Connection closed, pending request to server0.conn0.windowGlobal4294967634/domwalker21, type watchRootNode failed\n\nRequest stack:\nrequest@resource://devtools/shared/protocol/Front.js:293:14\ngenerateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19\nmodule.exports@resource://devtools/shared/commands/resource/legacy-listeners/root-node.js:60:31\n", "resource://devtools/shared/protocol/Front.js", 107))
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
console.error: "Error when attaching target:" (new Error("Connection closed, pending request to server0.conn0.windowGlobal4294967758/thread1, type isAttached failed\n\nRequest stack:\nrequest@resource://devtools/shared/protocol/Front.js:293:14\ngenerateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19\nattachThread@resource://devtools/client/fronts/targets/target-mixin.js:561:49\n", "resource://devtools/shared/protocol/Front.js", 107))
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
console.error: "Error when attaching target:" (new Error("Connection closed, pending request to server0.conn0.windowGlobal4294967760/thread1, type isAttached failed\n\nRequest stack:\nrequest@resource://devtools/shared/protocol/Front.js:293:14\ngenerateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19\nattachThread@resource://devtools/client/fronts/targets/target-mixin.js:561:49\n", "resource://devtools/shared/protocol/Front.js", 107))
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: watch :: line 1658"  data: no]
Stack: watch@resource://devtools/server/actors/targets/window-global.js:1658:28
_watchDocshells@resource://devtools/server/actors/targets/window-global.js:777:28
initialize/<@resource://devtools/server/actors/targets/window-global.js:348:42
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 1658, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
console.error: "Error while calling actor 'thread's method 'isAttached'" "JSWindowActorChild.sendAsyncMessage: JSWindowActorChild cannot send at the moment"
console.error: (new InvalidStateError("JSWindowActorChild.sendAsyncMessage: JSWindowActorChild cannot send at the moment", (void 0), 375))
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
console.error: "Error when destroying StyleSheet manager for" ({notifyResourceAvailable:function bound notifyResourceAvailable() {
    [native code]
}, notifyResourceDestroyed:function bound notifyResourceDestroyed() {
    [native code]
}, notifyResourceUpdated:function bound notifyResourceUpdated() {
    [native code]
}, conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, actorID:"server0.conn0.windowGlobal4294967760/windowGlobalTarget2", _actorSpec:{typeName:"windowGlobalTarget", methods:[{name:"detach", request:{type:"detach", template:{type:"detach"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"ensureCSSErrorReportingEnabled", request:{type:"ensureCSSErrorReportingEnabled", template:{type:"ensureCSSErrorReportingEnabled"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"focus", request:{type:"focus", template:{type:"focus"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"goForward", request:{type:"goForward", template:{type:"goForward"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"goBack", request:{type:"goBack", template:{type:"goBack"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reload", request:{type:"reload", template:{type:"reload", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"navigateTo", request:{type:"navigateTo", template:{type:"navigateTo", url:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["url"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reconfigure", request:{type:"reconfigure", template:{type:"reconfigure", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"switchToFrame", request:{type:"switchToFrame", template:{type:"switchToFrame", windowId:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["windowId"]}]}, response:{template:{_type:"windowGlobalTarget.switchtoframe", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"windowGlobalTarget.switchtoframe", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"listFrames", request:{type:"listFrames", template:{type:"listFrames"}, args:[]}, response:{template:{_type:"windowGlobalTarget.listframes", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"windowGlobalTarget.listframes", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"listWorkers", request:{type:"listWorkers", template:{type:"listWorkers"}, args:[]}, response:{template:{_type:"windowGlobalTarget.workers", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"windowGlobalTarget.workers", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"logInPage", request:{type:"logInPage", template:{type:"logInPage", text:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, category:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, flags:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["text"]}, {placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["category"]}, {placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["flags"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}], events:{}}, docShell:({}), _originalWindow:{get window() {
    [native code]
}, get document() {
    [native code]
}, get location() {
    [native code]
}, set location() {
    [native code]
}, get top() {
    [native code]
}, close:function close() {
    [native code]
}, stop:function stop() {
    [native code]
}, focus:function focus() {
    [native code]
}, blur:function blur() {
    [native code]
}, open:function open() {
    [native code]
}, alert:function alert() {
    [native code]
}, confirm:function confirm() {
    [native code]
}, prompt:function prompt() {
    [native code]
}, print:function print() {
    [native code]
}, printPreview:function printPreview() {
    [native code]
}, postMessage:function postMessage() {
    [native code]
}, captureEvents:function captureEvents() {
    [native code]
}, releaseEvents:function releaseEvents() {
    [native code]
}, getSelection:function getSelection() {
    [native code]
}, getComputedStyle:function getComputedStyle() {
    [native code]
}, matchMedia:function matchMedia() {
    [native code]
}, moveTo:function moveTo() {
    [native code]
}, moveBy:function moveBy() {
    [native code]
}, resizeTo:function resizeTo() {
    [native code]
}, resizeBy:function resizeBy() {
    [native code]
}, scroll:function scroll() {
    [native code]
}, scrollTo:function scrollTo() {
    [native code]
}, scrollBy:function scrollBy() {
    [native code]
}, getDefaultComputedStyle:function getDefaultComputedStyle() {
    [native code]
}, scrollByLines:function scrollByLines() {
    [native code]
}, scrollByPages:function scrollByPages() {
    [native code]
}, sizeToContent:function sizeToContent() {
    [native code]
}, updateCommands:function updateCommands() {
    [native code]
}, find:function find() {
    [native code]
}, dump:function dump() {
    [native code]
}, setResizable:function setResizable() {
    [native code]
}, requestIdleCallback:function requestIdleCallback() {
    [native code]
}, cancelIdleCallback:function cancelIdleCallback() {
    [native code]
}, getRegionalPrefsLocales:function getRegionalPrefsLocales() {
    [native code]
}, getWebExposedLocales:function getWebExposedLocales() {
    [native code]
}, requestAnimationFrame:function requestAnimationFrame() {
    [native code]
}, cancelAnimationFrame:function cancelAnimationFrame() {
    [native code]
}, reportError:function reportError() {
    [native code]
}, btoa:function btoa() {
    [native code]
}, atob:function atob() {
    [native code]
}, setTimeout:function setTimeout() {
    [native code]
}, clearTimeout:function clearTimeout() {
    [native code]
}, setInterval:function setInterval() {
    [native code]
}, clearInterval:function clearInterval() {
    [native code]
}, queueMicrotask:function queueMicrotask() {
    [native code]
}, createImageBitmap:function createImageBitmap() {
    [native code]
}, structuredClone:function structuredClone() {
    [native code]
}, fetch:function fetch() {
    [native code]
}, get self() {
    [native code]
}, set self() {
    [native code]
}, get name() {
    [native code]
}, set name() {
    [native code]
}, get history() {
    [native code]
}, get customElements() {
    [native code]
}, get locationbar() {
    [native code]
}, set locationbar() {
    [native code]
}, get menubar() {
    [native code]
}, set menubar() {
    [native code]
}, get personalbar() {
    [native code]
}, set personalbar() {
    [native code]
}, get scrollbars() {
    [native code]
}, set scrollbars() {
    [native code]
}, get statusbar() {
    [native code]
}, set statusbar() {
    [native code]
}, get toolbar() {
    [native code]
}, set toolbar() {
    [native code]
}, get status() {
    [native code]
}, set status() {
    [native code]
}, get closed() {
    [native code]
}, get event() {
    [native code]
}, set event() {
    [native code]
}, get frames() {
    [native code]
}, set frames() {
    [native code]
}, get length() {
    [native code]
}, set length() {
    [native code]
}, get opener() {
    [native code]
}, set opener() {
    [native code]
}, get parent() {
    [native code]
}, set parent() {
    [native code]
}, get frameElement() {
    [native code]
}, get navigator() {
    [native code]
}, get clientInformation() {
    [native code]
}, get external() {
    [native code]
}, set external() {
    [native code]
}, get applicationCache() {
    [native code]
}, get screen() {
    [native code]
}, set screen() {
    [native code]
}, get innerWidth() {
    [native code]
}, set innerWidth() {
    [native code]
}, get innerHeight() {
    [native code]
}, set innerHeight() {
    [native code]
}, get scrollX() {
    [native code]
}, set scrollX() {
    [native code]
}, get pageXOffset() {
    [native code]
}, set pageXOffset() {
    [native code]
}, get scrollY() {
    [native code]
}, set scrollY() {
    [native code]
}, get pageYOffset() {
    [native code]
}, set pageYOffset() {
    [native code]
}, get screenLeft() {
    [native code]
}, set screenLeft() {
    [native code]
}, get screenTop() {
    [native code]
}, set screenTop() {
    [native code]
}, get screenX() {
    [native code]
}, set screenX() {
    [native code]
}, get screenY() {
    [native code]
}, set screenY() {
    [native code]
}, get outerWidth() {
    [native code]
}, set outerWidth() {
    [native code]
}, get outerHeight() {
    [native code]
}, set outerHeight() {
    [native code]
}, get performance() {
    [native code]
}, set performance() {
    [native code]
}, get mozInnerScreenX() {
    [native code]
}, get mozInnerScreenY() {
    [native code]
}, get devicePixelRatio() {
    [native code]
}, set devicePixelRatio() {
    [native code]
}, get scrollMaxX() {
    [native code]
}, set scrollMaxX() {
    [native code]
}, get scrollMaxY() {
    [native code]
}, set scrollMaxY() {
    [native code]
}, get fullScreen() {
    [native code]
}, set fullScreen() {
    [native code]
}, get ondevicemotion() {
    [native code]
}, set ondevicemotion() {
    [native code]
}, get ondeviceorientation() {
    [native code]
}, set ondeviceorientation() {
    [native code]
}, get onabsolutedeviceorientation() {
    [native code]
}, set onabsolutedeviceorientation() {
    [native code]
}, get InstallTrigger() {
    [native code]
}, set InstallTrigger() {
    [native code]
}, get intlUtils() {
    [native code]
}, get visualViewport() {
    [native code]
}, set visualViewport() {
    [native code]
}, get crypto() {
    [native code]
}, get onabort() {
    [native code]
}, set onabort() {
    [native code]
}, get onblur() {
    [native code]
}, set onblur() {
    [native code]
}, get onfocus() {
    [native code]
}, set onfocus() {
    [native code]
}, get onauxclick() {
    [native code]
}, set onauxclick() {
    [native code]
}, get onbeforeinput() {
    [native code]
}, set onbeforeinput() {
    [native code]
}, get oncanplay() {
    [native code]
}, set oncanplay() {
    [native code]
}, get oncanplaythrough() {
    [native code]
}, set oncanplaythrough() {
    [native code]
}, get onchange() {
    [native code]
}, set onchange() {
    [native code]
}, get onclick() {
    [native code]
}, set onclick() {
    [native code]
}, get onclose() {
    [native code]
}, set onclose() {
    [native code]
}, get oncontextmenu() {
    [native code]
}, set oncontextmenu() {
    [native code]
}, get oncuechange() {
    [native code]
}, set oncuechange() {
    [native code]
}, get ondblclick() {
    [native code]
}, set ondblclick() {
    [native code]
}, get ondrag() {
    [native code]
}, set ondrag() {
    [native code]
}, get ondragend() {
    [native code]
}, set ondragend() {
    [native code]
}, get ondragenter() {
    [native code]
}, set ondragenter() {
    [native code]
}, get ondragexit() {
    [native code]
}, set ondragexit() {
    [native code]
}, get ondragleave() {
    [native code]
}, set ondragleave() {
    [native code]
}, get ondragover() {
    [native code]
}, set ondragover() {
    [native code]
}, get ondragstart() {
    [native code]
}, set ondragstart() {
    [native code]
}, get ondrop() {
    [native code]
}, set ondrop() {
    [native code]
}, get ondurationchange() {
    [native code]
}, set ondurationchange() {
    [native code]
}, get onemptied() {
    [native code]
}, set onemptied() {
    [native code]
}, get onended() {
    [native code]
}, set onended() {
    [native code]
}, get onformdata() {
    [native code]
}, set onformdata() {
    [native code]
}, get oninput() {
    [native code]
}, set oninput() {
    [native code]
}, get oninvalid() {
    [native code]
}, set oninvalid() {
    [native code]
}, get onkeydown() {
    [native code]
}, set onkeydown() {
    [native code]
}, get onkeypress() {
    [native code]
}, set onkeypress() {
    [native code]
}, get onkeyup() {
    [native code]
}, set onkeyup() {
    [native code]
}, get onload() {
    [native code]
}, set onload() {
    [native code]
}, get onloadeddata() {
    [native code]
}, set onloadeddata() {
    [native code]
}, get onloadedmetadata() {
    [native code]
}, set onloadedmetadata() {
    [native code]
}, get onloadend() {
    [native code]
}, set onloadend() {
    [native code]
}, get onloadstart() {
    [native code]
}, set onloadstart() {
    [native code]
}, get onmousedown() {
    [native code]
}, set onmousedown() {
    [native code]
}, get onmouseenter() {
    [native code]
}, set onmouseenter() {
    [native code]
}, get onmouseleave() {
    [native code]
}, set onmouseleave() {
    [native code]
}, get onmousemove() {
    [native code]
}, set onmousemove() {
    [native code]
}, get onmouseout() {
    [native code]
}, set onmouseout() {
    [native code]
}, get onmouseover() {
    [native code]
}, set onmouseover() {
    [native code]
}, get onmouseup() {
    [native code]
}, set onmouseup() {
    [native code]
}, get onwheel() {
    [native code]
}, set onwheel() {
    [native code]
}, get onpause() {
    [native code]
}, set onpause() {
    [native code]
}, get onplay() {
    [native code]
}, set onplay() {
    [native code]
}, get onplaying() {
    [native code]
}, set onplaying() {
    [native code]
}, get onprogress() {
    [native code]
}, set onprogress() {
    [native code]
}, get onratechange() {
    [native code]
}, set onratechange() {
    [native code]
}, get onreset() {
    [native code]
}, set onreset() {
    [native code]
}, get onresize() {
    [native code]
}, set onresize() {
    [native code]
}, get onscroll() {
    [native code]
}, set onscroll() {
    [native code]
}, get onsecuritypolicyviolation() {
    [native code]
}, set onsecuritypolicyviolation() {
    [native code]
}, get onseeked() {
    [native code]
}, set onseeked() {
    [native code]
}, get onseeking() {
    [native code]
}, set onseeking() {
    [native code]
}, get onselect() {
    [native code]
}, set onselect() {
    [native code]
}, get onslotchange() {
    [native code]
}, set onslotchange() {
    [native code]
}, get onstalled() {
    [native code]
}, set onstalled() {
    [native code]
}, get onsubmit() {
    [native code]
}, set onsubmit() {
    [native code]
}, get onsuspend() {
    [native code]
}, set onsuspend() {
    [native code]
}, get ontimeupdate() {
    [native code]
}, set ontimeupdate() {
    [native code]
}, get onvolumechange() {
    [native code]
}, set onvolumechange() {
    [native code]
}, get onwaiting() {
    [native code]
}, set onwaiting() {
    [native code]
}, get onselectstart() {
    [native code]
}, set onselectstart() {
    [native code]
}, get onselectionchange() {
    [native code]
}, set onselectionchange() {
    [native code]
}, get ontoggle() {
    [native code]
}, set ontoggle() {
    [native code]
}, get onpointercancel() {
    [native code]
}, set onpointercancel() {
    [native code]
}, get onpointerdown() {
    [native code]
}, set onpointerdown() {
    [native code]
}, get onpointerup() {
    [native code]
}, set onpointerup() {
    [native code]
}, get onpointermove() {
    [native code]
}, set onpointermove() {
    [native code]
}, get onpointerout() {
    [native code]
}, set onpointerout() {
    [native code]
}, get onpointerover() {
    [native code]
}, set onpointerover() {
    [native code]
}, get onpointerenter() {
    [native code]
}, set onpointerenter() {
    [native code]
}, get onpointerleave() {
    [native code]
}, set onpointerleave() {
    [native code]
}, get ongotpointercapture() {
    [native code]
}, set ongotpointercapture() {
    [native code]
}, get onlostpointercapture() {
    [native code]
}, set onlostpointercapture() {
    [native code]
}, get onmozfullscreenchange() {
    [native code]
}, set onmozfullscreenchange() {
    [native code]
}, get onmozfullscreenerror() {
    [native code]
}, set onmozfullscreenerror() {
    [native code]
}, get onanimationcancel() {
    [native code]
}, set onanimationcancel() {
    [native code]
}, get onanimationend() {
    [native code]
}, set onanimationend() {
    [native code]
}, get onanimationiteration() {
    [native code]
}, set onanimationiteration() {
    [native code]
}, get onanimationstart() {
    [native code]
}, set onanimationstart() {
    [native code]
}, get ontransitioncancel() {
    [native code]
}, set ontransitioncancel() {
    [native code]
}, get ontransitionend() {
    [native code]
}, set ontransitionend() {
    [native code]
}, get ontransitionrun() {
    [native code]
}, set ontransitionrun() {
    [native code]
}, get ontransitionstart() {
    [native code]
}, set ontransitionstart() {
    [native code]
}, get onwebkitanimationend() {
    [native code]
}, set onwebkitanimationend() {
    [native code]
}, get onwebkitanimationiteration() {
    [native code]
}, set onwebkitanimationiteration() {
    [native code]
}, get onwebkitanimationstart() {
    [native code]
}, set onwebkitanimationstart() {
    [native code]
}, get onwebkittransitionend() {
    [native code]
}, set onwebkittransitionend() {
    [native code]
}, get u2f() {
    [native code]
}, set u2f() {
    [native code]
}, get onerror() {
    [native code]
}, set onerror() {
    [native code]
}, get speechSynthesis() {
    [native code]
}, get onafterprint() {
    [native code]
}, set onafterprint() {
    [native code]
}, get onbeforeprint() {
    [native code]
}, set onbeforeprint() {
    [native code]
}, get onbeforeunload() {
    [native code]
}, set onbeforeunload() {
    [native code]
}, get onhashchange() {
    [native code]
}, set onhashchange() {
    [native code]
}, get onlanguagechange() {
    [native code]
}, set onlanguagechange() {
    [native code]
}, get onmessage() {
    [native code]
}, set onmessage() {
    [native code]
}, get onmessageerror() {
    [native code]
}, set onmessageerror() {
    [native code]
}, get onoffline() {
    [native code]
}, set onoffline() {
    [native code]
}, get ononline() {
    [native code]
}, set ononline() {
    [native code]
}, get onpagehide() {
    [native code]
}, set onpagehide() {
    [native code]
}, get onpageshow() {
    [native code]
}, set onpageshow() {
    [native code]
}, get onpopstate() {
    [native code]
}, set onpopstate() {
    [native code]
}, get onrejectionhandled() {
    [native code]
}, set onrejectionhandled() {
    [native code]
}, get onstorage() {
    [native code]
}, set onstorage() {
    [native code]
}, get onunhandledrejection() {
    [native code]
}, set onunhandledrejection() {
    [native code]
}, get onunload() {
    [native code]
}, set onunload() {
    [native code]
}, get ongamepadconnected() {
    [native code]
}, set ongamepadconnected() {
    [native code]
}, get ongamepaddisconnected() {
    [native code]
}, set ongamepaddisconnected() {
    [native code]
}, get localStorage() {
    [native code]
}, get origin() {
    [native code]
}, set origin() {
    [native code]
}, get crossOriginIsolated() {
    [native code]
}, get isSecureContext() {
    [native code]
}, get indexedDB() {
    [native code]
}, get caches() {
    [native code]
}, get sessionStorage() {
    [native code]
}, mozScrollSnap:function mozScrollSnap() {
    [native code]
}, openDialog:function openDialog() {
    [native code]
}, getInterface:function getInterface() {
    [native code]
}, shouldReportForServiceWorkerScope:function shouldReportForServiceWorkerScope() {
    [native code]
}, setScrollMarks:function setScrollMarks() {
    [native code]
}, get controllers() {
    [native code]
}, set controllers() {
    [native code]
}, get realFrameElement() {
    [native code]
}, get docShell() {
    [native code]
}, get browsingContext() {
    [native code]
}, get desktopToDeviceScale() {
    [native code]
}, get scrollMinX() {
    [native code]
}, get scrollMinY() {
    [native code]
}, get windowRoot() {
    [native code]
}, get windowUtils() {
    [native code]
}, get windowGlobalChild() {
    [native code]
}, get clientPrincipal() {
    [native code]
}, get isChromeWindow() {
    [native code]
}, get Glean() {
    [native code]
}, get GleanPings() {
    [native code]
}}, isPrivate:false, followWindowGlobalLifeCycle:true, isTopLevelTarget:false, ignoreSubFrames:true, sessionContext:{type:"browser-element", browserId:7, isServerTargetSwitchingEnabled:true, isPopupDebuggingEnabled:false, supportedTargets:{frame:true, process:true, worker:true}, supportedResources:{'console-message':true, 'css-change':true, 'css-message':true, 'document-event':true, Cache:true, cookies:true, 'error-message':true, 'indexed-db':true, 'local-storage':true, 'session-storage':true, 'platform-message':true, 'network-event':true, 'network-event-stacktrace':true, reflow:true, stylesheet:true, source:true, 'thread-state':true, 'server-sent-event':true, websocket:true}}, _extraActors:{consoleActor:{_options:{id:"devtools/server/actors/webconsole", prefix:"console", constructorName:"WebConsoleActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"consoleActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"consoleActor", actorID:"server0.conn0.windowGlobal4294967760/consoleActor3", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, inspectorActor:{_options:{id:"devtools/server/actors/inspector/inspector", prefix:"inspector", constructorName:"InspectorActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"inspectorActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"inspectorActor", actorID:"server0.conn0.windowGlobal4294967760/inspectorActor4", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, styleSheetsActor:{_options:{id:"devtools/server/actors/style-sheets", prefix:"styleSheets", constructorName:"StyleSheetsActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"styleSheetsActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"styleSheetsActor", actorID:"server0.conn0.windowGlobal4294967760/styleSheetsActor5", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, storageActor:{_options:{id:"devtools/server/actors/storage", prefix:"storage", constructorName:"StorageActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"storageActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"storageActor", actorID:"server0.conn0.windowGlobal4294967760/storageActor6", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, memoryActor:{_options:{id:"devtools/server/actors/memory", prefix:"memory", constructorName:"MemoryActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"memoryActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"memoryActor", actorID:"server0.conn0.windowGlobal4294967760/memoryActor7", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, reflowActor:{_options:{id:"devtools/server/actors/reflow", prefix:"reflow", constructorName:"ReflowActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"reflowActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"reflowActor", actorID:"server0.conn0.windowGlobal4294967760/reflowActor8", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, cssPropertiesActor:{_options:{id:"devtools/server/actors/css-properties", prefix:"cssProperties", constructorName:"CssPropertiesActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"cssPropertiesActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"cssPropertiesActor", actorID:"server0.conn0.windowGlobal4294967760/cssPropertiesActor9", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, animationsActor:{_options:{id:"devtools/server/actors/animation", prefix:"animations", constructorName:"AnimationsActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"animationsActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"animationsActor", actorID:"server0.conn0.windowGlobal4294967760/animationsActor10", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, responsiveActor:{_options:{id:"devtools/server/actors/emulation/responsive", prefix:"responsive", constructorName:"ResponsiveActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"responsiveActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"responsiveActor", actorID:"server0.conn0.windowGlobal4294967760/responsiveActor11", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, webExtensionInspectedWindowActor:{_options:{id:"devtools/server/actors/addon/webextension-inspected-window", prefix:"webExtensionInspectedWindow", constructorName:"WebExtensionInspectedWindowActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"webExtensionInspectedWindowActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"webExtensionInspectedWindowActor", actorID:"server0.conn0.windowGlobal4294967760/webExtensionInspectedWindowActor12", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, accessibilityActor:{_options:{id:"devtools/server/actors/accessibility/accessibility", prefix:"accessibility", constructorName:"AccessibilityActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"accessibilityActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"accessibilityActor", actorID:"server0.conn0.windowGlobal4294967760/accessibilityActor13", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, changesActor:{_options:{id:"devtools/server/actors/changes", prefix:"changes", constructorName:"ChangesActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"changesActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"changesActor", actorID:"server0.conn0.windowGlobal4294967760/changesActor14", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, webSocketActor:{_options:{id:"devtools/server/actors/network-monitor/websocket-actor", prefix:"webSocket", constructorName:"WebSocketActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"webSocketActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"webSocketActor", actorID:"server0.conn0.windowGlobal4294967760/webSocketActor15", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, eventSourceActor:{_options:{id:"devtools/server/actors/network-monitor/eventsource-actor", prefix:"eventSource", constructorName:"EventSourceActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"eventSourceActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"eventSourceActor", actorID:"server0.conn0.windowGlobal4294967760/eventSourceActor16", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, manifestActor:{_options:{id:"devtools/server/actors/manifest", prefix:"manifest", constructorName:"ManifestActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"manifestActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"manifestActor", actorID:"server0.conn0.windowGlobal4294967760/manifestActor17", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, networkContentActor:{_options:{id:"devtools/server/actors/network-monitor/network-content", prefix:"networkContent", constructorName:"NetworkContentActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"networkContentActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"networkContentActor", actorID:"server0.conn0.windowGlobal4294967760/networkContentActor18", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, screenshotContentActor:{_options:{id:"devtools/server/actors/screenshot-content", prefix:"screenshotContent", constructorName:"ScreenshotContentActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"screenshotContentActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"screenshotContentActor", actorID:"server0.conn0.windowGlobal4294967760/screenshotContentActor19", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}}, _sourcesManager:{_thread:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, actorID:"server0.conn0.windowGlobal4294967760/thread1", _actorSpec:{typeName:"thread", methods:[{name:"attach", request:{type:"attach", template:{type:"attach", options:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, args:[{placeholder:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reconfigure", request:{type:"reconfigure", template:{type:"reconfigure", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"resume", request:{type:"resume", template:{type:"resume", resumeLimit:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, frameActorID:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["resumeLimit"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["frameActorID"]}]}, response:{template:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"frames", request:{type:"frames", template:{type:"frames", start:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, count:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["start"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["count"]}]}, response:{template:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"interrupt", request:{type:"interrupt", template:{type:"interrupt", when:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["when"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"sources", request:{type:"sources", template:{type:"sources"}, args:[]}, response:{template:{sources:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["sources"]}, release:(void 0), oneway:(void 0)}, {name:"skipBreakpoints", request:{type:"skipBreakpoints", template:{type:"skipBreakpoints", skip:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["skip"]}]}, response:{template:{skip:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}}, release:(void 0), oneway:(void 0)}, {name:"dumpThread", request:{type:"dumpThread", template:{type:"dumpThread"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"dumpPools", request:{type:"dumpPools", template:{type:"dumpPools"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"setBreakpoint", request:{type:"setBreakpoint", template:{type:"setBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, options:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"removeBreakpoint", request:{type:"removeBreakpoint", template:{type:"removeBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"setXHRBreakpoint", request:{type:"setXHRBreakpoint", template:{type:"setXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"removeXHRBreakpoint", request:{type:"removeXHRBreakpoint", template:{type:"removeXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getAvailableEventBreakpoints", request:{type:"getAvailableEventBreakpoints", template:{type:"getAvailableEventBreakpoints"}, args:[]}, response:{template:{value:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getActiveEventBreakpoints", request:{type:"getActiveEventBreakpoints", template:{type:"getActiveEventBreakpoints"}, args:[]}, response:{template:{ids:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}, release:(void 0), oneway:(void 0)}, {name:"setActiveEventBreakpoints", request:{type:"setActiveEventBreakpoints", template:{type:"setActiveEventBreakpoints", ids:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"pauseOnExceptions", request:{type:"pauseOnExceptions", template:{type:"pauseOnExceptions", pauseOnExceptions:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, ignoreCaughtExceptions:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["pauseOnExceptions"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ignoreCaughtExceptions"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"toggleEventLogging", request:{type:"toggleEventLogging", template:{type:"toggleEventLogging", logEventBreakpoints:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["logEventBreakpoints"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"isAttached", request:{type:"isAttached", template:{type:"isAttached"}, args:[]}, response:{template:{value:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, retVal:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["value"]}, release:(void 0), oneway:(void 0)}], events:{}}, _state:"running", _parent:{}, global:{get window() {
    [native code]
}, get document() {
    [native code]
}, get location() {
    [native code]
}, set location() {
    [native code]
}, get top() {
    [native code]
}, close:function close() {
    [native code]
}, stop:function stop() {
    [native code]
}, focus:function focus() {
    [native code]
}, blur:function blur() {
    [native code]
}, open:function open() {
    [native code]
}, alert:function alert() {
    [native code]
}, confirm:function confirm() {
    [native code]
}, prompt:function prompt() {
    [native code]
}, print:function print() {
    [native code]
}, printPreview:function printPreview() {
    [native code]
}, postMessage:function postMessage() {
    [native code]
}, captureEvents:function captureEvents() {
    [native code]
}, releaseEvents:function releaseEvents() {
    [native code]
}, getSelection:function getSelection() {
    [native code]
}, getComputedStyle:function getComputedStyle() {
    [native code]
}, matchMedia:function matchMedia() {
    [native code]
}, moveTo:function moveTo() {
    [native code]
}, moveBy:function moveBy() {
    [native code]
}, resizeTo:function resizeTo() {
    [native code]
}, resizeBy:function resizeBy() {
    [native code]
}, scroll:function scroll() {
    [native code]
}, scrollTo:function scrollTo() {
    [native code]
}, scrollBy:function scrollBy() {
    [native code]
}, getDefaultComputedStyle:function getDefaultComputedStyle() {
    [native code]
}, scrollByLines:function scrollByLines() {
    [native code]
}, scrollByPages:function scrollByPages() {
    [native code]
}, sizeToContent:function sizeToContent() {
    [native code]
}, updateCommands:function updateCommands() {
    [native code]
}, find:function find() {
    [native code]
}, dump:function dump() {
    [native code]
}, setResizable:function setResizable() {
    [native code]
}, requestIdleCallback:function requestIdleCallback() {
    [native code]
}, cancelIdleCallback:function cancelIdleCallback() {
    [native code]
}, getRegionalPrefsLocales:function getRegionalPrefsLocales() {
    [native code]
}, getWebExposedLocales:function getWebExposedLocales() {
    [native code]
}, requestAnimationFrame:function requestAnimationFrame() {
    [native code]
}, cancelAnimationFrame:function cancelAnimationFrame() {
    [native code]
}, reportError:function reportError() {
    [native code]
}, btoa:function btoa() {
    [native code]
}, atob:function atob() {
    [native code]
}, setTimeout:function setTimeout() {
    [native code]
}, clearTimeout:function clearTimeout() {
    [native code]
}, setInterval:function setInterval() {
    [native code]
}, clearInterval:function clearInterval() {
    [native code]
}, queueMicrotask:function queueMicrotask() {
    [native code]
}, createImageBitmap:function createImageBitmap() {
    [native code]
}, structuredClone:function structuredClone() {
    [native code]
}, fetch:function fetch() {
    [native code]
}, get self() {
    [native code]
}, set self() {
    [native code]
}, get name() {
    [native code]
}, set name() {
    [native code]
}, get history() {
    [native code]
}, get customElements() {
    [native code]
}, get locationbar() {
    [native code]
}, set locationbar() {
    [native code]
}, get menubar() {
    [native code]
}, set menubar() {
    [native code]
}, get personalbar() {
    [native code]
}, set personalbar() {
    [native code]
}, get scrollbars() {
    [native code]
}, set scrollbars() {
    [native code]
}, get statusbar() {
    [native code]
}, set statusbar() {
    [native code]
}, get toolbar() {
    [native code]
}, set toolbar() {
    [native code]
}, get status() {
    [native code]
}, set status() {
    [native code]
}, get closed() {
    [native code]
}, get event() {
    [native code]
}, set event() {
    [native code]
}, get frames() {
    [native code]
}, set frames() {
    [native code]
}, get length() {
    [native code]
}, set length() {
    [native code]
}, get opener() {
    [native code]
}, set opener() {
    [native code]
}, get parent() {
    [native code]
}, set parent() {
    [native code]
}, get frameElement() {
    [native code]
}, get navigator() {
    [native code]
}, get clientInformation() {
    [native code]
}, get external() {
    [native code]
}, set external() {
    [native code]
}, get applicationCache() {
    [native code]
}, get screen() {
    [native code]
}, set screen() {
    [native code]
}, get innerWidth() {
    [native code]
}, set innerWidth() {
    [native code]
}, get innerHeight() {
    [native code]
}, set innerHeight() {
    [native code]
}, get scrollX() {
    [native code]
}, set scrollX() {
    [native code]
}, get pageXOffset() {
    [native code]
}, set pageXOffset() {
    [native code]
}, get scrollY() {
    [native code]
}, set scrollY() {
    [native code]
}, get pageYOffset() {
    [native code]
}, set pageYOffset() {
    [native code]
}, get screenLeft() {
    [native code]
}, set screenLeft() {
    [native code]
}, get screenTop() {
    [native code]
}, set screenTop() {
    [native code]
}, get screenX() {
    [native code]
}, set screenX() {
    [native code]
}, get screenY() {
    [native code]
}, set screenY() {
    [native code]
}, get outerWidth() {
    [native code]
}, set outerWidth() {
    [native code]
}, get outerHeight() {
    [native code]
}, set outerHeight() {
    [native code]
}, get performance() {
    [native code]
}, set performance() {
    [native code]
}, get mozInnerScreenX() {
    [native code]
}, get mozInnerScreenY() {
    [native code]
}, get devicePixelRatio() {
    [native code]
}, set devicePixelRatio() {
    [native code]
}, get scrollMaxX() {
    [native code]
}, set scrollMaxX() {
    [native code]
}, get scrollMaxY() {
    [native code]
}, set scrollMaxY() {
    [native code]
}, get fullScreen() {
    [native code]
}, set fullScreen() {
    [native code]
}, get ondevicemotion() {
    [native code]
}, set ondevicemotion() {
    [native code]
}, get ondeviceorientation() {
    [native code]
}, set ondeviceorientation() {
    [native code]
}, get onabsolutedeviceorientation() {
    [native code]
}, set onabsolutedeviceorientation() {
    [native code]
}, get InstallTrigger() {
    [native code]
}, set InstallTrigger() {
    [native code]
}, get intlUtils() {
    [native code]
}, get visualViewport() {
    [native code]
}, set visualViewport() {
    [native code]
}, get crypto() {
    [native code]
}, get onabort() {
    [native code]
}, set onabort() {
    [native code]
}, get onblur() {
    [native code]
}, set onblur() {
    [native code]
}, get onfocus() {
    [native code]
}, set onfocus() {
    [native code]
}, get onauxclick() {
    [native code]
}, set onauxclick() {
    [native code]
}, get onbeforeinput() {
    [native code]
}, set onbeforeinput() {
    [native code]
}, get oncanplay() {
    [native code]
}, set oncanplay() {
    [native code]
}, get oncanplaythrough() {
    [native code]
}, set oncanplaythrough() {
    [native code]
}, get onchange() {
    [native code]
}, set onchange() {
    [native code]
}, get onclick() {
    [native code]
}, set onclick() {
    [native code]
}, get onclose() {
    [native code]
}, set onclose() {
    [native code]
}, get oncontextmenu() {
    [native code]
}, set oncontextmenu() {
    [native code]
}, get oncuechange() {
    [native code]
}, set oncuechange() {
    [native code]
}, get ondblclick() {
    [native code]
}, set ondblclick() {
    [native code]
}, get ondrag() {
    [native code]
}, set ondrag() {
    [native code]
}, get ondragend() {
    [native code]
}, set ondragend() {
    [native code]
}, get ondragenter() {
    [native code]
}, set ondragenter() {
    [native code]
}, get ondragexit() {
    [native code]
}, set ondragexit() {
    [native code]
}, get ondragleave() {
    [native code]
}, set ondragleave() {
    [native code]
}, get ondragover() {
    [native code]
}, set ondragover() {
    [native code]
}, get ondragstart() {
    [native code]
}, set ondragstart() {
    [native code]
}, get ondrop() {
    [native code]
}, set ondrop() {
    [native code]
}, get ondurationchange() {
    [native code]
}, set ondurationchange() {
    [native code]
}, get onemptied() {
    [native code]
}, set onemptied() {
    [native code]
}, get onended() {
    [native code]
}, set onended() {
    [native code]
}, get onformdata() {
    [native code]
}, set onformdata() {
    [native code]
}, get oninput() {
    [native code]
}, set oninput() {
    [native code]
}, get oninvalid() {
    [native code]
}, set oninvalid() {
    [native code]
}, get onkeydown() {
    [native code]
}, set onkeydown() {
    [native code]
}, get onkeypress() {
    [native code]
}, set onkeypress() {
    [native code]
}, get onkeyup() {
    [native code]
}, set onkeyup() {
    [native code]
}, get onload() {
    [native code]
}, set onload() {
    [native code]
}, get onloadeddata() {
    [native code]
}, set onloadeddata() {
    [native code]
}, get onloadedmetadata() {
    [native code]
}, set onloadedmetadata() {
    [native code]
}, get onloadend() {
    [native code]
}, set onloadend() {
    [native code]
}, get onloadstart() {
    [native code]
}, set onloadstart() {
    [native code]
}, get onmousedown() {
    [native code]
}, set onmousedown() {
    [native code]
}, get onmouseenter() {
    [native code]
}, set onmouseenter() {
    [native code]
}, get onmouseleave() {
    [native code]
}, set onmouseleave() {
    [native code]
}, get onmousemove() {
    [native code]
}, set onmousemove() {
    [native code]
}, get onmouseout() {
    [native code]
}, set onmouseout() {
    [native code]
}, get onmouseover() {
    [native code]
}, set onmouseover() {
    [native code]
}, get onmouseup() {
    [native code]
}, set onmouseup() {
    [native code]
}, get onwheel() {
    [native code]
}, set onwheel() {
    [native code]
}, get onpause() {
    [native code]
}, set onpause() {
    [native code]
}, get onplay() {
    [native code]
}, set onplay() {
    [native code]
}, get onplaying() {
    [native code]
}, set onplaying() {
    [native code]
}, get onprogress() {
    [native code]
}, set onprogress() {
    [native code]
}, get onratechange() {
    [native code]
}, set onratechange() {
    [native code]
}, get onreset() {
    [native code]
}, set onreset() {
    [native code]
}, get onresize() {
    [native code]
}, set onresize() {
    [native code]
}, get onscroll() {
    [native code]
}, set onscroll() {
    [native code]
}, get onsecuritypolicyviolation() {
    [native code]
}, set onsecuritypolicyviolation() {
    [native code]
}, get onseeked() {
    [native code]
}, set onseeked() {
    [native code]
}, get onseeking() {
    [native code]
}, set onseeking() {
    [native code]
}, get onselect() {
    [native code]
}, set onselect() {
    [native code]
}, get onslotchange() {
    [native code]
}, set onslotchange() {
    [native code]
}, get onstalled() {
    [native code]
}, set onstalled() {
    [native code]
}, get onsubmit() {
    [native code]
}, set onsubmit() {
    [native code]
}, get onsuspend() {
    [native code]
}, set onsuspend() {
    [native code]
}, get ontimeupdate() {
    [native code]
}, set ontimeupdate() {
    [native code]
}, get onvolumechange() {
    [native code]
}, set onvolumechange() {
    [native code]
}, get onwaiting() {
    [native code]
}, set onwaiting() {
    [native code]
}, get onselectstart() {
    [native code]
}, set onselectstart() {
    [native code]
}, get onselectionchange() {
    [native code]
}, set onselectionchange() {
    [native code]
}, get ontoggle() {
    [native code]
}, set ontoggle() {
    [native code]
}, get onpointercancel() {
    [native code]
}, set onpointercancel() {
    [native code]
}, get onpointerdown() {
    [native code]
}, set onpointerdown() {
    [native code]
}, get onpointerup() {
    [native code]
}, set onpointerup() {
    [native code]
}, get onpointermove() {
    [native code]
}, set onpointermove() {
    [native code]
}, get onpointerout() {
    [native code]
}, set onpointerout() {
    [native code]
}, get onpointerover() {
    [native code]
}, set onpointerover() {
    [native code]
}, get onpointerenter() {
    [native code]
}, set onpointerenter() {
    [native code]
}, get onpointerleave() {
    [native code]
}, set onpointerleave() {
    [native code]
}, get ongotpointercapture() {
    [native code]
}, set ongotpointercapture() {
    [native code]
}, get onlostpointercapture() {
    [native code]
}, set onlostpointercapture() {
    [native code]
}, get onmozfullscreenchange() {
    [native code]
}, set onmozfullscreenchange() {
    [native code]
}, get onmozfullscreenerror() {
    [native code]
}, set onmozfullscreenerror() {
    [native code]
}, get onanimationcancel() {
    [native code]
}, set onanimationcancel() {
    [native code]
}, get onanimationend() {
    [native code]
}, set onanimationend() {
    [native code]
}, get onanimationiteration() {
    [native code]
}, set onanimationiteration() {
    [native code]
}, get onanimationstart() {
    [native code]
}, set onanimationstart() {
    [native code]
}, get ontransitioncancel() {
    [native code]
}, set ontransitioncancel() {
    [native code]
}, get ontransitionend() {
    [native code]
}, set ontransitionend() {
    [native code]
}, get ontransitionrun() {
    [native code]
}, set ontransitionrun() {
    [native code]
}, get ontransitionstart() {
    [native code]
}, set ontransitionstart() {
    [native code]
}, get onwebkitanimationend() {
    [native code]
}, set onwebkitanimationend() {
    [native code]
}, get onwebkitanimationiteration() {
    [native code]
}, set onwebkitanimationiteration() {
    [native code]
}, get onwebkitanimationstart() {
    [native code]
}, set onwebkitanimationstart() {
    [native code]
}, get onwebkittransitionend() {
    [native code]
}, set onwebkittransitionend() {
    [native code]
}, get u2f() {
    [native code]
}, set u2f() {
    [native code]
}, get onerror() {
    [native code]
}, set onerror() {
    [native code]
}, get speechSynthesis() {
    [native code]
}, get onafterprint() {
    [native code]
}, set onafterprint() {
    [native code]
}, get onbeforeprint() {
    [native code]
}, set onbeforeprint() {
    [native code]
}, get onbeforeunload() {
    [native code]
}, set onbeforeunload() {
    [native code]
}, get onhashchange() {
    [native code]
}, set onhashchange() {
    [native code]
}, get onlanguagechange() {
    [native code]
}, set onlanguagechange() {
    [native code]
}, get onmessage() {
    [native code]
}, set onmessage() {
    [native code]
}, get onmessageerror() {
    [native code]
}, set onmessageerror() {
    [native code]
}, get onoffline() {
    [native code]
}, set onoffline() {
    [native code]
}, get ononline() {
    [native code]
}, set ononline() {
    [native code]
}, get onpagehide() {
    [native code]
}, set onpagehide() {
    [native code]
}, get onpageshow() {
    [native code]
}, set onpageshow() {
    [native code]
}, get onpopstate() {
    [native code]
}, set onpopstate() {
    [native code]
}, get onrejectionhandled() {
    [native code]
}, set onrejectionhandled() {
    [native code]
}, get onstorage() {
    [native code]
}, set onstorage() {
    [native code]
}, get onunhandledrejection() {
    [native code]
}, set onunhandledrejection() {
    [native code]
}, get onunload() {
    [native code]
}, set onunload() {
    [native code]
}, get ongamepadconnected() {
    [native code]
}, set ongamepadconnected() {
    [native code]
}, get ongamepaddisconnected() {
    [native code]
}, set ongamepaddisconnected() {
    [native code]
}, get localStorage() {
    [native code]
}, get origin() {
    [native code]
}, set origin() {
    [native code]
}, get crossOriginIsolated() {
    [native code]
}, get isSecureContext() {
    [native code]
}, get indexedDB() {
    [native code]
}, get caches() {
    [native code]
}, get sessionStorage() {
    [native code]
}, mozScrollSnap:function mozScrollSnap() {
    [native code]
}, openDialog:function openDialog() {
    [native code]
}, getInterface:function getInterface() {
    [native code]
}, shouldReportForServiceWorkerScope:function shouldReportForServiceWorkerScope() {
    [native code]
}, setScrollMarks:function setScrollMarks() {
    [native code]
}, get controllers() {
    [native code]
}, set controllers() {
    [native code]
}, get realFrameElement() {
    [native code]
}, get docShell() {
    [native code]
}, get browsingContext() {
    [native code]
}, get desktopToDeviceScale() {
    [native code]
}, get scrollMinX() {
    [native code]
}, get scrollMinY() {
    [native code]
}, get windowRoot() {
    [native code]
}, get windowUtils() {
    [native code]
}, get windowGlobalChild() {
    [native code]
}, get clientPrincipal() {
    [native code]
}, get isChromeWindow() {
    [native code]
}, get Glean() {
    [native code]
}, get GleanPings() {
    [native code]
}}, _options:{skipBreakpoints:false, pauseOnExceptions:false, ignoreCaughtExceptions:true, shouldShowOverlay:true, shouldIncludeSavedFrames:true, shouldIncludeAsyncLiveFrames:false, logEventBreakpoints:false, observeAsmJS:true}, _gripDepth:0, _parentClosed:false, _observingNetwork:false, _frameActors:[], _xhrBreakpoints:[], _dbg:{addDebuggees:(function() {
    for (const global of findDebuggees(this)) {
      safeAddDebuggee(this, global);
    }
  }), disable:(function() {
    dbg.removeAllDebuggees();
    dbg.onNewGlobalObject = undefined;
  }), enable:(function() {
    dbg.addDebuggees();
    dbg.onNewGlobalObject = onNewGlobalObject;
  }), onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}}, _threadLifetimePool:{__poolMap:{}, parentPool:null, conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, label:"thread", _isDestroyed:false, objectActors:{}}, _activeEventPause:null, _pauseOverlay:null, _priorPause:null, _activeEventBreakpoints:{}, _frameActorMap:{}, _debuggerSourcesSeen:{}, _onLoadBreakpointURLs:{}, _handledFrameExceptions:{}, _watchpointsMap:{threadActor:{}, _watchpoints:{}}, breakpointActorMap:{_threadActor:{}, _actors:{}}, _nestedEventLoop:{_thread:{}, _entered:false, _resolved:false}, onNewSourceEvent:function bound onNewSourceEvent() {
    [native code]
}, createCompletionGrip:function bound createCompletionGrip() {
    [native code]
}, onDebuggerStatement:function bound onDebuggerStatement() {
    [native code]
}, onNewScript:function bound onNewScript() {
    [native code]
}, objectGrip:function bound objectGrip() {
    [native code]
}, pauseObjectGrip:function bound pauseObjectGrip() {
    [native code]
}, _onOpeningRequest:function bound _onOpeningRequest() {
    [native code]
}, _onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}, _onExceptionUnwind:function bound _onExceptionUnwind() {
    [native code]
}, _eventBreakpointListener:function bound _eventBreakpointListener() {
    [native code]
}, _onWindowReady:function bound _onWindowReady() {
    [native code]
}, _onWillNavigate:function bound _onWillNavigate() {
    [native code]
}, _onNavigate:function bound _onNavigate() {
    [native code]
}, _firstStatementBreakpoint:null, _debuggerNotificationObserver:{}, parentPool:{}, alreadyAttached:true, wrappedJSObject:{}, _pendingResponse:{}, [Symbol("EventEmitter/listeners")]:{}}, blackBoxedSources:{}, _sourceActors:{}, _urlContents:{}, _urlWaiters:{}, _sourcesByInternalSourceId:null, [Symbol("EventEmitter/listeners")]:{}}, _styleSheetActors:{}, _shouldAddNewGlobalAsDebuggee:function bound _shouldAddNewGlobalAsDebuggee() {
    [native code]
}, makeDebugger:function bound makeDebugger() {
    [native code]
}, watchNewDocShells:false, _workerDescriptorActorList:null, _workerDescriptorActorPool:null, _onWorkerDescriptorActorListChanged:function bound _onWorkerDescriptorActorListChanged() {
    [native code]
}, _onConsoleApiProfilerEvent:function bound _onConsoleApiProfilerEvent() {
    [native code]
}, threadActor:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, actorID:"server0.conn0.windowGlobal4294967760/thread1", _actorSpec:{typeName:"thread", methods:[{name:"attach", request:{type:"attach", template:{type:"attach", options:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, args:[{placeholder:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reconfigure", request:{type:"reconfigure", template:{type:"reconfigure", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"resume", request:{type:"resume", template:{type:"resume", resumeLimit:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, frameActorID:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["resumeLimit"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["frameActorID"]}]}, response:{template:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"frames", request:{type:"frames", template:{type:"frames", start:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, count:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["start"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["count"]}]}, response:{template:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"interrupt", request:{type:"interrupt", template:{type:"interrupt", when:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["when"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"sources", request:{type:"sources", template:{type:"sources"}, args:[]}, response:{template:{sources:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["sources"]}, release:(void 0), oneway:(void 0)}, {name:"skipBreakpoints", request:{type:"skipBreakpoints", template:{type:"skipBreakpoints", skip:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["skip"]}]}, response:{template:{skip:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}}, release:(void 0), oneway:(void 0)}, {name:"dumpThread", request:{type:"dumpThread", template:{type:"dumpThread"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"dumpPools", request:{type:"dumpPools", template:{type:"dumpPools"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"setBreakpoint", request:{type:"setBreakpoint", template:{type:"setBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, options:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"removeBreakpoint", request:{type:"removeBreakpoint", template:{type:"removeBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"setXHRBreakpoint", request:{type:"setXHRBreakpoint", template:{type:"setXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"removeXHRBreakpoint", request:{type:"removeXHRBreakpoint", template:{type:"removeXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getAvailableEventBreakpoints", request:{type:"getAvailableEventBreakpoints", template:{type:"getAvailableEventBreakpoints"}, args:[]}, response:{template:{value:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getActiveEventBreakpoints", request:{type:"getActiveEventBreakpoints", template:{type:"getActiveEventBreakpoints"}, args:[]}, response:{template:{ids:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}, release:(void 0), oneway:(void 0)}, {name:"setActiveEventBreakpoints", request:{type:"setActiveEventBreakpoints", template:{type:"setActiveEventBreakpoints", ids:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"pauseOnExceptions", request:{type:"pauseOnExceptions", template:{type:"pauseOnExceptions", pauseOnExceptions:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, ignoreCaughtExceptions:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["pauseOnExceptions"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ignoreCaughtExceptions"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"toggleEventLogging", request:{type:"toggleEventLogging", template:{type:"toggleEventLogging", logEventBreakpoints:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["logEventBreakpoints"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"isAttached", request:{type:"isAttached", template:{type:"isAttached"}, args:[]}, response:{template:{value:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, retVal:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["value"]}, release:(void 0), oneway:(void 0)}], events:{}}, _state:"running", _parent:{}, global:{get window() {
    [native code]
}, get document() {
    [native code]
}, get location() {
    [native code]
}, set location() {
    [native code]
}, get top() {
    [native code]
}, close:function close() {
    [native code]
}, stop:function stop() {
    [native code]
}, focus:function focus() {
    [native code]
}, blur:function blur() {
    [native code]
}, open:function open() {
    [native code]
}, alert:function alert() {
    [native code]
}, confirm:function confirm() {
    [native code]
}, prompt:function prompt() {
    [native code]
}, print:function print() {
    [native code]
}, printPreview:function printPreview() {
    [native code]
}, postMessage:function postMessage() {
    [native code]
}, captureEvents:function captureEvents() {
    [native code]
}, releaseEvents:function releaseEvents() {
    [native code]
}, getSelection:function getSelection() {
    [native code]
}, getComputedStyle:function getComputedStyle() {
    [native code]
}, matchMedia:function matchMedia() {
    [native code]
}, moveTo:function moveTo() {
    [native code]
}, moveBy:function moveBy() {
    [native code]
}, resizeTo:function resizeTo() {
    [native code]
}, resizeBy:function resizeBy() {
    [native code]
}, scroll:function scroll() {
    [native code]
}, scrollTo:function scrollTo() {
    [native code]
}, scrollBy:function scrollBy() {
    [native code]
}, getDefaultComputedStyle:function getDefaultComputedStyle() {
    [native code]
}, scrollByLines:function scrollByLines() {
    [native code]
}, scrollByPages:function scrollByPages() {
    [native code]
}, sizeToContent:function sizeToContent() {
    [native code]
}, updateCommands:function updateCommands() {
    [native code]
}, find:function find() {
    [native code]
}, dump:function dump() {
    [native code]
}, setResizable:function setResizable() {
    [native code]
}, requestIdleCallback:function requestIdleCallback() {
    [native code]
}, cancelIdleCallback:function cancelIdleCallback() {
    [native code]
}, getRegionalPrefsLocales:function getRegionalPrefsLocales() {
    [native code]
}, getWebExposedLocales:function getWebExposedLocales() {
    [native code]
}, requestAnimationFrame:function requestAnimationFrame() {
    [native code]
}, cancelAnimationFrame:function cancelAnimationFrame() {
    [native code]
}, reportError:function reportError() {
    [native code]
}, btoa:function btoa() {
    [native code]
}, atob:function atob() {
    [native code]
}, setTimeout:function setTimeout() {
    [native code]
}, clearTimeout:function clearTimeout() {
    [native code]
}, setInterval:function setInterval() {
    [native code]
}, clearInterval:function clearInterval() {
    [native code]
}, queueMicrotask:function queueMicrotask() {
    [native code]
}, createImageBitmap:function createImageBitmap() {
    [native code]
}, structuredClone:function structuredClone() {
    [native code]
}, fetch:function fetch() {
    [native code]
}, get self() {
    [native code]
}, set self() {
    [native code]
}, get name() {
    [native code]
}, set name() {
    [native code]
}, get history() {
    [native code]
}, get customElements() {
    [native code]
}, get locationbar() {
    [native code]
}, set locationbar() {
    [native code]
}, get menubar() {
    [native code]
}, set menubar() {
    [native code]
}, get personalbar() {
    [native code]
}, set personalbar() {
    [native code]
}, get scrollbars() {
    [native code]
}, set scrollbars() {
    [native code]
}, get statusbar() {
    [native code]
}, set statusbar() {
    [native code]
}, get toolbar() {
    [native code]
}, set toolbar() {
    [native code]
}, get status() {
    [native code]
}, set status() {
    [native code]
}, get closed() {
    [native code]
}, get event() {
    [native code]
}, set event() {
    [native code]
}, get frames() {
    [native code]
}, set frames() {
    [native code]
}, get length() {
    [native code]
}, set length() {
    [native code]
}, get opener() {
    [native code]
}, set opener() {
    [native code]
}, get parent() {
    [native code]
}, set parent() {
    [native code]
}, get frameElement() {
    [native code]
}, get navigator() {
    [native code]
}, get clientInformation() {
    [native code]
}, get external() {
    [native code]
}, set external() {
    [native code]
}, get applicationCache() {
    [native code]
}, get screen() {
    [native code]
}, set screen() {
    [native code]
}, get innerWidth() {
    [native code]
}, set innerWidth() {
    [native code]
}, get innerHeight() {
    [native code]
}, set innerHeight() {
    [native code]
}, get scrollX() {
    [native code]
}, set scrollX() {
    [native code]
}, get pageXOffset() {
    [native code]
}, set pageXOffset() {
    [native code]
}, get scrollY() {
    [native code]
}, set scrollY() {
    [native code]
}, get pageYOffset() {
    [native code]
}, set pageYOffset() {
    [native code]
}, get screenLeft() {
    [native code]
}, set screenLeft() {
    [native code]
}, get screenTop() {
    [native code]
}, set screenTop() {
    [native code]
}, get screenX() {
    [native code]
}, set screenX() {
    [native code]
}, get screenY() {
    [native code]
}, set screenY() {
    [native code]
}, get outerWidth() {
    [native code]
}, set outerWidth() {
    [native code]
}, get outerHeight() {
    [native code]
}, set outerHeight() {
    [native code]
}, get performance() {
    [native code]
}, set performance() {
    [native code]
}, get mozInnerScreenX() {
    [native code]
}, get mozInnerScreenY() {
    [native code]
}, get devicePixelRatio() {
    [native code]
}, set devicePixelRatio() {
    [native code]
}, get scrollMaxX() {
    [native code]
}, set scrollMaxX() {
    [native code]
}, get scrollMaxY() {
    [native code]
}, set scrollMaxY() {
    [native code]
}, get fullScreen() {
    [native code]
}, set fullScreen() {
    [native code]
}, get ondevicemotion() {
    [native code]
}, set ondevicemotion() {
    [native code]
}, get ondeviceorientation() {
    [native code]
}, set ondeviceorientation() {
    [native code]
}, get onabsolutedeviceorientation() {
    [native code]
}, set onabsolutedeviceorientation() {
    [native code]
}, get InstallTrigger() {
    [native code]
}, set InstallTrigger() {
    [native code]
}, get intlUtils() {
    [native code]
}, get visualViewport() {
    [native code]
}, set visualViewport() {
    [native code]
}, get crypto() {
    [native code]
}, get onabort() {
    [native code]
}, set onabort() {
    [native code]
}, get onblur() {
    [native code]
}, set onblur() {
    [native code]
}, get onfocus() {
    [native code]
}, set onfocus() {
    [native code]
}, get onauxclick() {
    [native code]
}, set onauxclick() {
    [native code]
}, get onbeforeinput() {
    [native code]
}, set onbeforeinput() {
    [native code]
}, get oncanplay() {
    [native code]
}, set oncanplay() {
    [native code]
}, get oncanplaythrough() {
    [native code]
}, set oncanplaythrough() {
    [native code]
}, get onchange() {
    [native code]
}, set onchange() {
    [native code]
}, get onclick() {
    [native code]
}, set onclick() {
    [native code]
}, get onclose() {
    [native code]
}, set onclose() {
    [native code]
}, get oncontextmenu() {
    [native code]
}, set oncontextmenu() {
    [native code]
}, get oncuechange() {
    [native code]
}, set oncuechange() {
    [native code]
}, get ondblclick() {
    [native code]
}, set ondblclick() {
    [native code]
}, get ondrag() {
    [native code]
}, set ondrag() {
    [native code]
}, get ondragend() {
    [native code]
}, set ondragend() {
    [native code]
}, get ondragenter() {
    [native code]
}, set ondragenter() {
    [native code]
}, get ondragexit() {
    [native code]
}, set ondragexit() {
    [native code]
}, get ondragleave() {
    [native code]
}, set ondragleave() {
    [native code]
}, get ondragover() {
    [native code]
}, set ondragover() {
    [native code]
}, get ondragstart() {
    [native code]
}, set ondragstart() {
    [native code]
}, get ondrop() {
    [native code]
}, set ondrop() {
    [native code]
}, get ondurationchange() {
    [native code]
}, set ondurationchange() {
    [native code]
}, get onemptied() {
    [native code]
}, set onemptied() {
    [native code]
}, get onended() {
    [native code]
}, set onended() {
    [native code]
}, get onformdata() {
    [native code]
}, set onformdata() {
    [native code]
}, get oninput() {
    [native code]
}, set oninput() {
    [native code]
}, get oninvalid() {
    [native code]
}, set oninvalid() {
    [native code]
}, get onkeydown() {
    [native code]
}, set onkeydown() {
    [native code]
}, get onkeypress() {
    [native code]
}, set onkeypress() {
    [native code]
}, get onkeyup() {
    [native code]
}, set onkeyup() {
    [native code]
}, get onload() {
    [native code]
}, set onload() {
    [native code]
}, get onloadeddata() {
    [native code]
}, set onloadeddata() {
    [native code]
}, get onloadedmetadata() {
    [native code]
}, set onloadedmetadata() {
    [native code]
}, get onloadend() {
    [native code]
}, set onloadend() {
    [native code]
}, get onloadstart() {
    [native code]
}, set onloadstart() {
    [native code]
}, get onmousedown() {
    [native code]
}, set onmousedown() {
    [native code]
}, get onmouseenter() {
    [native code]
}, set onmouseenter() {
    [native code]
}, get onmouseleave() {
    [native code]
}, set onmouseleave() {
    [native code]
}, get onmousemove() {
    [native code]
}, set onmousemove() {
    [native code]
}, get onmouseout() {
    [native code]
}, set onmouseout() {
    [native code]
}, get onmouseover() {
    [native code]
}, set onmouseover() {
    [native code]
}, get onmouseup() {
    [native code]
}, set onmouseup() {
    [native code]
}, get onwheel() {
    [native code]
}, set onwheel() {
    [native code]
}, get onpause() {
    [native code]
}, set onpause() {
    [native code]
}, get onplay() {
    [native code]
}, set onplay() {
    [native code]
}, get onplaying() {
    [native code]
}, set onplaying() {
    [native code]
}, get onprogress() {
    [native code]
}, set onprogress() {
    [native code]
}, get onratechange() {
    [native code]
}, set onratechange() {
    [native code]
}, get onreset() {
    [native code]
}, set onreset() {
    [native code]
}, get onresize() {
    [native code]
}, set onresize() {
    [native code]
}, get onscroll() {
    [native code]
}, set onscroll() {
    [native code]
}, get onsecuritypolicyviolation() {
    [native code]
}, set onsecuritypolicyviolation() {
    [native code]
}, get onseeked() {
    [native code]
}, set onseeked() {
    [native code]
}, get onseeking() {
    [native code]
}, set onseeking() {
    [native code]
}, get onselect() {
    [native code]
}, set onselect() {
    [native code]
}, get onslotchange() {
    [native code]
}, set onslotchange() {
    [native code]
}, get onstalled() {
    [native code]
}, set onstalled() {
    [native code]
}, get onsubmit() {
    [native code]
}, set onsubmit() {
    [native code]
}, get onsuspend() {
    [native code]
}, set onsuspend() {
    [native code]
}, get ontimeupdate() {
    [native code]
}, set ontimeupdate() {
    [native code]
}, get onvolumechange() {
    [native code]
}, set onvolumechange() {
    [native code]
}, get onwaiting() {
    [native code]
}, set onwaiting() {
    [native code]
}, get onselectstart() {
    [native code]
}, set onselectstart() {
    [native code]
}, get onselectionchange() {
    [native code]
}, set onselectionchange() {
    [native code]
}, get ontoggle() {
    [native code]
}, set ontoggle() {
    [native code]
}, get onpointercancel() {
    [native code]
}, set onpointercancel() {
    [native code]
}, get onpointerdown() {
    [native code]
}, set onpointerdown() {
    [native code]
}, get onpointerup() {
    [native code]
}, set onpointerup() {
    [native code]
}, get onpointermove() {
    [native code]
}, set onpointermove() {
    [native code]
}, get onpointerout() {
    [native code]
}, set onpointerout() {
    [native code]
}, get onpointerover() {
    [native code]
}, set onpointerover() {
    [native code]
}, get onpointerenter() {
    [native code]
}, set onpointerenter() {
    [native code]
}, get onpointerleave() {
    [native code]
}, set onpointerleave() {
    [native code]
}, get ongotpointercapture() {
    [native code]
}, set ongotpointercapture() {
    [native code]
}, get onlostpointercapture() {
    [native code]
}, set onlostpointercapture() {
    [native code]
}, get onmozfullscreenchange() {
    [native code]
}, set onmozfullscreenchange() {
    [native code]
}, get onmozfullscreenerror() {
    [native code]
}, set onmozfullscreenerror() {
    [native code]
}, get onanimationcancel() {
    [native code]
}, set onanimationcancel() {
    [native code]
}, get onanimationend() {
    [native code]
}, set onanimationend() {
    [native code]
}, get onanimationiteration() {
    [native code]
}, set onanimationiteration() {
    [native code]
}, get onanimationstart() {
    [native code]
}, set onanimationstart() {
    [native code]
}, get ontransitioncancel() {
    [native code]
}, set ontransitioncancel() {
    [native code]
}, get ontransitionend() {
    [native code]
}, set ontransitionend() {
    [native code]
}, get ontransitionrun() {
    [native code]
}, set ontransitionrun() {
    [native code]
}, get ontransitionstart() {
    [native code]
}, set ontransitionstart() {
    [native code]
}, get onwebkitanimationend() {
    [native code]
}, set onwebkitanimationend() {
    [native code]
}, get onwebkitanimationiteration() {
    [native code]
}, set onwebkitanimationiteration() {
    [native code]
}, get onwebkitanimationstart() {
    [native code]
}, set onwebkitanimationstart() {
    [native code]
}, get onwebkittransitionend() {
    [native code]
}, set onwebkittransitionend() {
    [native code]
}, get u2f() {
    [native code]
}, set u2f() {
    [native code]
}, get onerror() {
    [native code]
}, set onerror() {
    [native code]
}, get speechSynthesis() {
    [native code]
}, get onafterprint() {
    [native code]
}, set onafterprint() {
    [native code]
}, get onbeforeprint() {
    [native code]
}, set onbeforeprint() {
    [native code]
}, get onbeforeunload() {
    [native code]
}, set onbeforeunload() {
    [native code]
}, get onhashchange() {
    [native code]
}, set onhashchange() {
    [native code]
}, get onlanguagechange() {
    [native code]
}, set onlanguagechange() {
    [native code]
}, get onmessage() {
    [native code]
}, set onmessage() {
    [native code]
}, get onmessageerror() {
    [native code]
}, set onmessageerror() {
    [native code]
}, get onoffline() {
    [native code]
}, set onoffline() {
    [native code]
}, get ononline() {
    [native code]
}, set ononline() {
    [native code]
}, get onpagehide() {
    [native code]
}, set onpagehide() {
    [native code]
}, get onpageshow() {
    [native code]
}, set onpageshow() {
    [native code]
}, get onpopstate() {
    [native code]
}, set onpopstate() {
    [native code]
}, get onrejectionhandled() {
    [native code]
}, set onrejectionhandled() {
    [native code]
}, get onstorage() {
    [native code]
}, set onstorage() {
    [native code]
}, get onunhandledrejection() {
    [native code]
}, set onunhandledrejection() {
    [native code]
}, get onunload() {
    [native code]
}, set onunload() {
    [native code]
}, get ongamepadconnected() {
    [native code]
}, set ongamepadconnected() {
    [native code]
}, get ongamepaddisconnected() {
    [native code]
}, set ongamepaddisconnected() {
    [native code]
}, get localStorage() {
    [native code]
}, get origin() {
    [native code]
}, set origin() {
    [native code]
}, get crossOriginIsolated() {
    [native code]
}, get isSecureContext() {
    [native code]
}, get indexedDB() {
    [native code]
}, get caches() {
    [native code]
}, get sessionStorage() {
    [native code]
}, mozScrollSnap:function mozScrollSnap() {
    [native code]
}, openDialog:function openDialog() {
    [native code]
}, getInterface:function getInterface() {
    [native code]
}, shouldReportForServiceWorkerScope:function shouldReportForServiceWorkerScope() {
    [native code]
}, setScrollMarks:function setScrollMarks() {
    [native code]
}, get controllers() {
    [native code]
}, set controllers() {
    [native code]
}, get realFrameElement() {
    [native code]
}, get docShell() {
    [native code]
}, get browsingContext() {
    [native code]
}, get desktopToDeviceScale() {
    [native code]
}, get scrollMinX() {
    [native code]
}, get scrollMinY() {
    [native code]
}, get windowRoot() {
    [native code]
}, get windowUtils() {
    [native code]
}, get windowGlobalChild() {
    [native code]
}, get clientPrincipal() {
    [native code]
}, get isChromeWindow() {
    [native code]
}, get Glean() {
    [native code]
}, get GleanPings() {
    [native code]
}}, _options:{skipBreakpoints:false, pauseOnExceptions:false, ignoreCaughtExceptions:true, shouldShowOverlay:true, shouldIncludeSavedFrames:true, shouldIncludeAsyncLiveFrames:false, logEventBreakpoints:false, observeAsmJS:true}, _gripDepth:0, _parentClosed:false, _observingNetwork:false, _frameActors:[], _xhrBreakpoints:[], _dbg:{addDebuggees:(function() {
    for (const global of findDebuggees(this)) {
      safeAddDebuggee(this, global);
    }
  }), disable:(function() {
    dbg.removeAllDebuggees();
    dbg.onNewGlobalObject = undefined;
  }), enable:(function() {
    dbg.addDebuggees();
    dbg.onNewGlobalObject = onNewGlobalObject;
  }), onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}}, _threadLifetimePool:{__poolMap:{}, parentPool:null, conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, label:"thread", _isDestroyed:false, objectActors:{}}, _activeEventPause:null, _pauseOverlay:null, _priorPause:null, _activeEventBreakpoints:{}, _frameActorMap:{}, _debuggerSourcesSeen:{}, _onLoadBreakpointURLs:{}, _handledFrameExceptions:{}, _watchpointsMap:{threadActor:{}, _watchpoints:{}}, breakpointActorMap:{_threadActor:{}, _actors:{}}, _nestedEventLoop:{_thread:{}, _entered:false, _resolved:false}, onNewSourceEvent:function bound onNewSourceEvent() {
    [native code]
}, createCompletionGrip:function bound createCompletionGrip() {
    [native code]
}, onDebuggerStatement:function bound onDebuggerStatement() {
    [native code]
}, onNewScript:function bound onNewScript() {
    [native code]
}, objectGrip:function bound objectGrip() {
    [native code]
}, pauseObjectGrip:function bound pauseObjectGrip() {
    [native code]
}, _onOpeningRequest:function bound _onOpeningRequest() {
    [native code]
}, _onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}, _onExceptionUnwind:function bound _onExceptionUnwind() {
    [native code]
}, _eventBreakpointListener:function bound _eventBreakpointListener() {
    [native code]
}, _onWindowReady:function bound _onWindowReady() {
    [native code]
}, _onWillNavigate:function bound _onWillNavigate() {
    [native code]
}, _onNavigate:function bound _onNavigate() {
    [native code]
}, _firstStatementBreakpoint:null, _debuggerNotificationObserver:{}, parentPool:{}, alreadyAttached:true, wrappedJSObject:{}, _pendingResponse:{}, [Symbol("EventEmitter/listeners")]:{}}, __poolMap:{}, _progressListener:{_targetActor:{}, _onWindowCreated:function bound () {
    [native code]
}, _onWindowHidden:function bound () {
    [native code]
}, _knownWindowIDs:{}, _watchedDocShells:{}}, _docShellsObserved:true, parentPool:{}, createdFromJsWindowActor:true, _targetScopedActorPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967760/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967760", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, _dbg:{addDebuggees:(function() {
    for (const global of findDebuggees(this)) {
      safeAddDebuggee(this, global);
    }
  }), disable:(function() {
    dbg.removeAllDebuggees();
    dbg.onNewGlobalObject = undefined;
  }), enable:(function() {
    dbg.addDebuggees();
    dbg.onNewGlobalObject = onNewGlobalObject;
  }), onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}}, _styleSheetManager:{_styleSheetCount:0, _styleSheetMap:{}, _mqlList:[], _targetActor:{}, _onApplicableStateChanged:function bound _onApplicableStateChanged() {
    [native code]
}, _onTargetActorWindowReady:function bound _onTargetActorWindowReady() {
    [native code]
}, [Symbol("EventEmitter/listeners")]:{}}, [Symbol("EventEmitter/listeners")]:{}}) ": " (new TypeError("this._targetActor.chromeEventHandler is null", "resource://devtools/server/actors/utils/stylesheets-manager.js", 867))
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 1706: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/connectors/js-window-actor/DevToolsFrameChild.jsm, line 375: InvalidStateError: JSWindowActorChild.sendAsyncMessage: JSWindowActorChild cannot send at the moment
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: https://s0.2mdn.net/sadbundle/4163918015545716211/index.html, line 259: TypeError: studio.Enabler is undefined
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
ATTENTION: default value of option mesa_glthread overridden by environment.
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 6348 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
console.warn: "Async method failed in safeAsyncMethod" (new Error("Connection closed, pending request to server0.conn0.windowGlobal4294967777/layout23, type getGrids failed\n\nRequest stack:\nrequest@resource://devtools/shared/protocol/Front.js:293:14\ngenerateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19\ngetAllGrids@resource://devtools/client/fronts/layout.js:171:17\nexports.safeAsyncMethod/<@resource://devtools/shared/async-utils.js:61:25\ngetGrids@resource://devtools/client/inspector/grids/grid-inspector.js:449:35\n", "resource://devtools/shared/protocol/Front.js", 107))
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/client/framework/toolbox.js, line 3382: TypeError: data.frameData.id is null
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
console.error: "Error when attaching target:" (new Error("Connection closed, pending request to server0.conn0.windowGlobal4294967782/thread1, type isAttached failed\n\nRequest stack:\nrequest@resource://devtools/shared/protocol/Front.js:293:14\ngenerateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19\nattachThread@resource://devtools/client/fronts/targets/target-mixin.js:561:49\n", "resource://devtools/shared/protocol/Front.js", 107))
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: watch :: line 1658"  data: no]
Stack: watch@resource://devtools/server/actors/targets/window-global.js:1658:28
_watchDocshells@resource://devtools/server/actors/targets/window-global.js:777:28
initialize/<@resource://devtools/server/actors/targets/window-global.js:348:42
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 1658, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
console.error: "Error while calling actor 'thread's method 'isAttached'" "JSWindowActorChild.sendAsyncMessage: JSWindowActorChild cannot send at the moment"
console.error: (new InvalidStateError("JSWindowActorChild.sendAsyncMessage: JSWindowActorChild cannot send at the moment", (void 0), 375))
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
Handler function threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_onRequestHeader@resource://devtools/server/actors/network-monitor/network-observer.js:756:10
NetworkObserver.prototype.observeActivity<@resource://devtools/server/actors/network-monitor/network-observer.js:637:12
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
console.error: "Error when destroying StyleSheet manager for" ({notifyResourceAvailable:function bound notifyResourceAvailable() {
    [native code]
}, notifyResourceDestroyed:function bound notifyResourceDestroyed() {
    [native code]
}, notifyResourceUpdated:function bound notifyResourceUpdated() {
    [native code]
}, conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, actorID:"server0.conn0.windowGlobal4294967782/windowGlobalTarget2", _actorSpec:{typeName:"windowGlobalTarget", methods:[{name:"detach", request:{type:"detach", template:{type:"detach"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"ensureCSSErrorReportingEnabled", request:{type:"ensureCSSErrorReportingEnabled", template:{type:"ensureCSSErrorReportingEnabled"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"focus", request:{type:"focus", template:{type:"focus"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"goForward", request:{type:"goForward", template:{type:"goForward"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"goBack", request:{type:"goBack", template:{type:"goBack"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reload", request:{type:"reload", template:{type:"reload", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"navigateTo", request:{type:"navigateTo", template:{type:"navigateTo", url:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["url"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reconfigure", request:{type:"reconfigure", template:{type:"reconfigure", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"switchToFrame", request:{type:"switchToFrame", template:{type:"switchToFrame", windowId:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["windowId"]}]}, response:{template:{_type:"windowGlobalTarget.switchtoframe", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"windowGlobalTarget.switchtoframe", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"listFrames", request:{type:"listFrames", template:{type:"listFrames"}, args:[]}, response:{template:{_type:"windowGlobalTarget.listframes", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"windowGlobalTarget.listframes", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"listWorkers", request:{type:"listWorkers", template:{type:"listWorkers"}, args:[]}, response:{template:{_type:"windowGlobalTarget.workers", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"windowGlobalTarget.workers", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"logInPage", request:{type:"logInPage", template:{type:"logInPage", text:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, category:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, flags:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["text"]}, {placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["category"]}, {placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["flags"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}], events:{}}, docShell:({}), _originalWindow:{get window() {
    [native code]
}, get document() {
    [native code]
}, get location() {
    [native code]
}, set location() {
    [native code]
}, get top() {
    [native code]
}, close:function close() {
    [native code]
}, stop:function stop() {
    [native code]
}, focus:function focus() {
    [native code]
}, blur:function blur() {
    [native code]
}, open:function open() {
    [native code]
}, alert:function alert() {
    [native code]
}, confirm:function confirm() {
    [native code]
}, prompt:function prompt() {
    [native code]
}, print:function print() {
    [native code]
}, printPreview:function printPreview() {
    [native code]
}, postMessage:function postMessage() {
    [native code]
}, captureEvents:function captureEvents() {
    [native code]
}, releaseEvents:function releaseEvents() {
    [native code]
}, getSelection:function getSelection() {
    [native code]
}, getComputedStyle:function getComputedStyle() {
    [native code]
}, matchMedia:function matchMedia() {
    [native code]
}, moveTo:function moveTo() {
    [native code]
}, moveBy:function moveBy() {
    [native code]
}, resizeTo:function resizeTo() {
    [native code]
}, resizeBy:function resizeBy() {
    [native code]
}, scroll:function scroll() {
    [native code]
}, scrollTo:function scrollTo() {
    [native code]
}, scrollBy:function scrollBy() {
    [native code]
}, getDefaultComputedStyle:function getDefaultComputedStyle() {
    [native code]
}, scrollByLines:function scrollByLines() {
    [native code]
}, scrollByPages:function scrollByPages() {
    [native code]
}, sizeToContent:function sizeToContent() {
    [native code]
}, updateCommands:function updateCommands() {
    [native code]
}, find:function find() {
    [native code]
}, dump:function dump() {
    [native code]
}, setResizable:function setResizable() {
    [native code]
}, requestIdleCallback:function requestIdleCallback() {
    [native code]
}, cancelIdleCallback:function cancelIdleCallback() {
    [native code]
}, getRegionalPrefsLocales:function getRegionalPrefsLocales() {
    [native code]
}, getWebExposedLocales:function getWebExposedLocales() {
    [native code]
}, requestAnimationFrame:function requestAnimationFrame() {
    [native code]
}, cancelAnimationFrame:function cancelAnimationFrame() {
    [native code]
}, reportError:function reportError() {
    [native code]
}, btoa:function btoa() {
    [native code]
}, atob:function atob() {
    [native code]
}, setTimeout:function setTimeout() {
    [native code]
}, clearTimeout:function clearTimeout() {
    [native code]
}, setInterval:function setInterval() {
    [native code]
}, clearInterval:function clearInterval() {
    [native code]
}, queueMicrotask:function queueMicrotask() {
    [native code]
}, createImageBitmap:function createImageBitmap() {
    [native code]
}, structuredClone:function structuredClone() {
    [native code]
}, fetch:function fetch() {
    [native code]
}, get self() {
    [native code]
}, set self() {
    [native code]
}, get name() {
    [native code]
}, set name() {
    [native code]
}, get history() {
    [native code]
}, get customElements() {
    [native code]
}, get locationbar() {
    [native code]
}, set locationbar() {
    [native code]
}, get menubar() {
    [native code]
}, set menubar() {
    [native code]
}, get personalbar() {
    [native code]
}, set personalbar() {
    [native code]
}, get scrollbars() {
    [native code]
}, set scrollbars() {
    [native code]
}, get statusbar() {
    [native code]
}, set statusbar() {
    [native code]
}, get toolbar() {
    [native code]
}, set toolbar() {
    [native code]
}, get status() {
    [native code]
}, set status() {
    [native code]
}, get closed() {
    [native code]
}, get event() {
    [native code]
}, set event() {
    [native code]
}, get frames() {
    [native code]
}, set frames() {
    [native code]
}, get length() {
    [native code]
}, set length() {
    [native code]
}, get opener() {
    [native code]
}, set opener() {
    [native code]
}, get parent() {
    [native code]
}, set parent() {
    [native code]
}, get frameElement() {
    [native code]
}, get navigator() {
    [native code]
}, get clientInformation() {
    [native code]
}, get external() {
    [native code]
}, set external() {
    [native code]
}, get applicationCache() {
    [native code]
}, get screen() {
    [native code]
}, set screen() {
    [native code]
}, get innerWidth() {
    [native code]
}, set innerWidth() {
    [native code]
}, get innerHeight() {
    [native code]
}, set innerHeight() {
    [native code]
}, get scrollX() {
    [native code]
}, set scrollX() {
    [native code]
}, get pageXOffset() {
    [native code]
}, set pageXOffset() {
    [native code]
}, get scrollY() {
    [native code]
}, set scrollY() {
    [native code]
}, get pageYOffset() {
    [native code]
}, set pageYOffset() {
    [native code]
}, get screenLeft() {
    [native code]
}, set screenLeft() {
    [native code]
}, get screenTop() {
    [native code]
}, set screenTop() {
    [native code]
}, get screenX() {
    [native code]
}, set screenX() {
    [native code]
}, get screenY() {
    [native code]
}, set screenY() {
    [native code]
}, get outerWidth() {
    [native code]
}, set outerWidth() {
    [native code]
}, get outerHeight() {
    [native code]
}, set outerHeight() {
    [native code]
}, get performance() {
    [native code]
}, set performance() {
    [native code]
}, get mozInnerScreenX() {
    [native code]
}, get mozInnerScreenY() {
    [native code]
}, get devicePixelRatio() {
    [native code]
}, set devicePixelRatio() {
    [native code]
}, get scrollMaxX() {
    [native code]
}, set scrollMaxX() {
    [native code]
}, get scrollMaxY() {
    [native code]
}, set scrollMaxY() {
    [native code]
}, get fullScreen() {
    [native code]
}, set fullScreen() {
    [native code]
}, get ondevicemotion() {
    [native code]
}, set ondevicemotion() {
    [native code]
}, get ondeviceorientation() {
    [native code]
}, set ondeviceorientation() {
    [native code]
}, get onabsolutedeviceorientation() {
    [native code]
}, set onabsolutedeviceorientation() {
    [native code]
}, get InstallTrigger() {
    [native code]
}, set InstallTrigger() {
    [native code]
}, get intlUtils() {
    [native code]
}, get visualViewport() {
    [native code]
}, set visualViewport() {
    [native code]
}, get crypto() {
    [native code]
}, get onabort() {
    [native code]
}, set onabort() {
    [native code]
}, get onblur() {
    [native code]
}, set onblur() {
    [native code]
}, get onfocus() {
    [native code]
}, set onfocus() {
    [native code]
}, get onauxclick() {
    [native code]
}, set onauxclick() {
    [native code]
}, get onbeforeinput() {
    [native code]
}, set onbeforeinput() {
    [native code]
}, get oncanplay() {
    [native code]
}, set oncanplay() {
    [native code]
}, get oncanplaythrough() {
    [native code]
}, set oncanplaythrough() {
    [native code]
}, get onchange() {
    [native code]
}, set onchange() {
    [native code]
}, get onclick() {
    [native code]
}, set onclick() {
    [native code]
}, get onclose() {
    [native code]
}, set onclose() {
    [native code]
}, get oncontextmenu() {
    [native code]
}, set oncontextmenu() {
    [native code]
}, get oncuechange() {
    [native code]
}, set oncuechange() {
    [native code]
}, get ondblclick() {
    [native code]
}, set ondblclick() {
    [native code]
}, get ondrag() {
    [native code]
}, set ondrag() {
    [native code]
}, get ondragend() {
    [native code]
}, set ondragend() {
    [native code]
}, get ondragenter() {
    [native code]
}, set ondragenter() {
    [native code]
}, get ondragexit() {
    [native code]
}, set ondragexit() {
    [native code]
}, get ondragleave() {
    [native code]
}, set ondragleave() {
    [native code]
}, get ondragover() {
    [native code]
}, set ondragover() {
    [native code]
}, get ondragstart() {
    [native code]
}, set ondragstart() {
    [native code]
}, get ondrop() {
    [native code]
}, set ondrop() {
    [native code]
}, get ondurationchange() {
    [native code]
}, set ondurationchange() {
    [native code]
}, get onemptied() {
    [native code]
}, set onemptied() {
    [native code]
}, get onended() {
    [native code]
}, set onended() {
    [native code]
}, get onformdata() {
    [native code]
}, set onformdata() {
    [native code]
}, get oninput() {
    [native code]
}, set oninput() {
    [native code]
}, get oninvalid() {
    [native code]
}, set oninvalid() {
    [native code]
}, get onkeydown() {
    [native code]
}, set onkeydown() {
    [native code]
}, get onkeypress() {
    [native code]
}, set onkeypress() {
    [native code]
}, get onkeyup() {
    [native code]
}, set onkeyup() {
    [native code]
}, get onload() {
    [native code]
}, set onload() {
    [native code]
}, get onloadeddata() {
    [native code]
}, set onloadeddata() {
    [native code]
}, get onloadedmetadata() {
    [native code]
}, set onloadedmetadata() {
    [native code]
}, get onloadend() {
    [native code]
}, set onloadend() {
    [native code]
}, get onloadstart() {
    [native code]
}, set onloadstart() {
    [native code]
}, get onmousedown() {
    [native code]
}, set onmousedown() {
    [native code]
}, get onmouseenter() {
    [native code]
}, set onmouseenter() {
    [native code]
}, get onmouseleave() {
    [native code]
}, set onmouseleave() {
    [native code]
}, get onmousemove() {
    [native code]
}, set onmousemove() {
    [native code]
}, get onmouseout() {
    [native code]
}, set onmouseout() {
    [native code]
}, get onmouseover() {
    [native code]
}, set onmouseover() {
    [native code]
}, get onmouseup() {
    [native code]
}, set onmouseup() {
    [native code]
}, get onwheel() {
    [native code]
}, set onwheel() {
    [native code]
}, get onpause() {
    [native code]
}, set onpause() {
    [native code]
}, get onplay() {
    [native code]
}, set onplay() {
    [native code]
}, get onplaying() {
    [native code]
}, set onplaying() {
    [native code]
}, get onprogress() {
    [native code]
}, set onprogress() {
    [native code]
}, get onratechange() {
    [native code]
}, set onratechange() {
    [native code]
}, get onreset() {
    [native code]
}, set onreset() {
    [native code]
}, get onresize() {
    [native code]
}, set onresize() {
    [native code]
}, get onscroll() {
    [native code]
}, set onscroll() {
    [native code]
}, get onsecuritypolicyviolation() {
    [native code]
}, set onsecuritypolicyviolation() {
    [native code]
}, get onseeked() {
    [native code]
}, set onseeked() {
    [native code]
}, get onseeking() {
    [native code]
}, set onseeking() {
    [native code]
}, get onselect() {
    [native code]
}, set onselect() {
    [native code]
}, get onslotchange() {
    [native code]
}, set onslotchange() {
    [native code]
}, get onstalled() {
    [native code]
}, set onstalled() {
    [native code]
}, get onsubmit() {
    [native code]
}, set onsubmit() {
    [native code]
}, get onsuspend() {
    [native code]
}, set onsuspend() {
    [native code]
}, get ontimeupdate() {
    [native code]
}, set ontimeupdate() {
    [native code]
}, get onvolumechange() {
    [native code]
}, set onvolumechange() {
    [native code]
}, get onwaiting() {
    [native code]
}, set onwaiting() {
    [native code]
}, get onselectstart() {
    [native code]
}, set onselectstart() {
    [native code]
}, get onselectionchange() {
    [native code]
}, set onselectionchange() {
    [native code]
}, get ontoggle() {
    [native code]
}, set ontoggle() {
    [native code]
}, get onpointercancel() {
    [native code]
}, set onpointercancel() {
    [native code]
}, get onpointerdown() {
    [native code]
}, set onpointerdown() {
    [native code]
}, get onpointerup() {
    [native code]
}, set onpointerup() {
    [native code]
}, get onpointermove() {
    [native code]
}, set onpointermove() {
    [native code]
}, get onpointerout() {
    [native code]
}, set onpointerout() {
    [native code]
}, get onpointerover() {
    [native code]
}, set onpointerover() {
    [native code]
}, get onpointerenter() {
    [native code]
}, set onpointerenter() {
    [native code]
}, get onpointerleave() {
    [native code]
}, set onpointerleave() {
    [native code]
}, get ongotpointercapture() {
    [native code]
}, set ongotpointercapture() {
    [native code]
}, get onlostpointercapture() {
    [native code]
}, set onlostpointercapture() {
    [native code]
}, get onmozfullscreenchange() {
    [native code]
}, set onmozfullscreenchange() {
    [native code]
}, get onmozfullscreenerror() {
    [native code]
}, set onmozfullscreenerror() {
    [native code]
}, get onanimationcancel() {
    [native code]
}, set onanimationcancel() {
    [native code]
}, get onanimationend() {
    [native code]
}, set onanimationend() {
    [native code]
}, get onanimationiteration() {
    [native code]
}, set onanimationiteration() {
    [native code]
}, get onanimationstart() {
    [native code]
}, set onanimationstart() {
    [native code]
}, get ontransitioncancel() {
    [native code]
}, set ontransitioncancel() {
    [native code]
}, get ontransitionend() {
    [native code]
}, set ontransitionend() {
    [native code]
}, get ontransitionrun() {
    [native code]
}, set ontransitionrun() {
    [native code]
}, get ontransitionstart() {
    [native code]
}, set ontransitionstart() {
    [native code]
}, get onwebkitanimationend() {
    [native code]
}, set onwebkitanimationend() {
    [native code]
}, get onwebkitanimationiteration() {
    [native code]
}, set onwebkitanimationiteration() {
    [native code]
}, get onwebkitanimationstart() {
    [native code]
}, set onwebkitanimationstart() {
    [native code]
}, get onwebkittransitionend() {
    [native code]
}, set onwebkittransitionend() {
    [native code]
}, get u2f() {
    [native code]
}, set u2f() {
    [native code]
}, get onerror() {
    [native code]
}, set onerror() {
    [native code]
}, get speechSynthesis() {
    [native code]
}, get onafterprint() {
    [native code]
}, set onafterprint() {
    [native code]
}, get onbeforeprint() {
    [native code]
}, set onbeforeprint() {
    [native code]
}, get onbeforeunload() {
    [native code]
}, set onbeforeunload() {
    [native code]
}, get onhashchange() {
    [native code]
}, set onhashchange() {
    [native code]
}, get onlanguagechange() {
    [native code]
}, set onlanguagechange() {
    [native code]
}, get onmessage() {
    [native code]
}, set onmessage() {
    [native code]
}, get onmessageerror() {
    [native code]
}, set onmessageerror() {
    [native code]
}, get onoffline() {
    [native code]
}, set onoffline() {
    [native code]
}, get ononline() {
    [native code]
}, set ononline() {
    [native code]
}, get onpagehide() {
    [native code]
}, set onpagehide() {
    [native code]
}, get onpageshow() {
    [native code]
}, set onpageshow() {
    [native code]
}, get onpopstate() {
    [native code]
}, set onpopstate() {
    [native code]
}, get onrejectionhandled() {
    [native code]
}, set onrejectionhandled() {
    [native code]
}, get onstorage() {
    [native code]
}, set onstorage() {
    [native code]
}, get onunhandledrejection() {
    [native code]
}, set onunhandledrejection() {
    [native code]
}, get onunload() {
    [native code]
}, set onunload() {
    [native code]
}, get ongamepadconnected() {
    [native code]
}, set ongamepadconnected() {
    [native code]
}, get ongamepaddisconnected() {
    [native code]
}, set ongamepaddisconnected() {
    [native code]
}, get localStorage() {
    [native code]
}, get origin() {
    [native code]
}, set origin() {
    [native code]
}, get crossOriginIsolated() {
    [native code]
}, get isSecureContext() {
    [native code]
}, get indexedDB() {
    [native code]
}, get caches() {
    [native code]
}, get sessionStorage() {
    [native code]
}, mozScrollSnap:function mozScrollSnap() {
    [native code]
}, openDialog:function openDialog() {
    [native code]
}, getInterface:function getInterface() {
    [native code]
}, shouldReportForServiceWorkerScope:function shouldReportForServiceWorkerScope() {
    [native code]
}, setScrollMarks:function setScrollMarks() {
    [native code]
}, get controllers() {
    [native code]
}, set controllers() {
    [native code]
}, get realFrameElement() {
    [native code]
}, get docShell() {
    [native code]
}, get browsingContext() {
    [native code]
}, get desktopToDeviceScale() {
    [native code]
}, get scrollMinX() {
    [native code]
}, get scrollMinY() {
    [native code]
}, get windowRoot() {
    [native code]
}, get windowUtils() {
    [native code]
}, get windowGlobalChild() {
    [native code]
}, get clientPrincipal() {
    [native code]
}, get isChromeWindow() {
    [native code]
}, get Glean() {
    [native code]
}, get GleanPings() {
    [native code]
}}, isPrivate:false, followWindowGlobalLifeCycle:true, isTopLevelTarget:false, ignoreSubFrames:true, sessionContext:{type:"browser-element", browserId:7, isServerTargetSwitchingEnabled:true, isPopupDebuggingEnabled:false, supportedTargets:{frame:true, process:true, worker:true}, supportedResources:{'console-message':true, 'css-change':true, 'css-message':true, 'document-event':true, Cache:true, cookies:true, 'error-message':true, 'indexed-db':true, 'local-storage':true, 'session-storage':true, 'platform-message':true, 'network-event':true, 'network-event-stacktrace':true, reflow:true, stylesheet:true, source:true, 'thread-state':true, 'server-sent-event':true, websocket:true}}, _extraActors:{consoleActor:{_options:{id:"devtools/server/actors/webconsole", prefix:"console", constructorName:"WebConsoleActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"consoleActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"consoleActor", actorID:"server0.conn0.windowGlobal4294967782/consoleActor3", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, inspectorActor:{_options:{id:"devtools/server/actors/inspector/inspector", prefix:"inspector", constructorName:"InspectorActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"inspectorActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"inspectorActor", actorID:"server0.conn0.windowGlobal4294967782/inspectorActor4", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, styleSheetsActor:{_options:{id:"devtools/server/actors/style-sheets", prefix:"styleSheets", constructorName:"StyleSheetsActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"styleSheetsActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"styleSheetsActor", actorID:"server0.conn0.windowGlobal4294967782/styleSheetsActor5", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, storageActor:{_options:{id:"devtools/server/actors/storage", prefix:"storage", constructorName:"StorageActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"storageActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"storageActor", actorID:"server0.conn0.windowGlobal4294967782/storageActor6", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, memoryActor:{_options:{id:"devtools/server/actors/memory", prefix:"memory", constructorName:"MemoryActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"memoryActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"memoryActor", actorID:"server0.conn0.windowGlobal4294967782/memoryActor7", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, reflowActor:{_options:{id:"devtools/server/actors/reflow", prefix:"reflow", constructorName:"ReflowActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"reflowActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"reflowActor", actorID:"server0.conn0.windowGlobal4294967782/reflowActor8", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, cssPropertiesActor:{_options:{id:"devtools/server/actors/css-properties", prefix:"cssProperties", constructorName:"CssPropertiesActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"cssPropertiesActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"cssPropertiesActor", actorID:"server0.conn0.windowGlobal4294967782/cssPropertiesActor9", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, animationsActor:{_options:{id:"devtools/server/actors/animation", prefix:"animations", constructorName:"AnimationsActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"animationsActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"animationsActor", actorID:"server0.conn0.windowGlobal4294967782/animationsActor10", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, responsiveActor:{_options:{id:"devtools/server/actors/emulation/responsive", prefix:"responsive", constructorName:"ResponsiveActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"responsiveActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"responsiveActor", actorID:"server0.conn0.windowGlobal4294967782/responsiveActor11", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, webExtensionInspectedWindowActor:{_options:{id:"devtools/server/actors/addon/webextension-inspected-window", prefix:"webExtensionInspectedWindow", constructorName:"WebExtensionInspectedWindowActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"webExtensionInspectedWindowActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"webExtensionInspectedWindowActor", actorID:"server0.conn0.windowGlobal4294967782/webExtensionInspectedWindowActor12", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, accessibilityActor:{_options:{id:"devtools/server/actors/accessibility/accessibility", prefix:"accessibility", constructorName:"AccessibilityActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"accessibilityActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"accessibilityActor", actorID:"server0.conn0.windowGlobal4294967782/accessibilityActor13", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, changesActor:{_options:{id:"devtools/server/actors/changes", prefix:"changes", constructorName:"ChangesActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"changesActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"changesActor", actorID:"server0.conn0.windowGlobal4294967782/changesActor14", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, webSocketActor:{_options:{id:"devtools/server/actors/network-monitor/websocket-actor", prefix:"webSocket", constructorName:"WebSocketActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"webSocketActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"webSocketActor", actorID:"server0.conn0.windowGlobal4294967782/webSocketActor15", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, eventSourceActor:{_options:{id:"devtools/server/actors/network-monitor/eventsource-actor", prefix:"eventSource", constructorName:"EventSourceActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"eventSourceActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"eventSourceActor", actorID:"server0.conn0.windowGlobal4294967782/eventSourceActor16", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, manifestActor:{_options:{id:"devtools/server/actors/manifest", prefix:"manifest", constructorName:"ManifestActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"manifestActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"manifestActor", actorID:"server0.conn0.windowGlobal4294967782/manifestActor17", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, networkContentActor:{_options:{id:"devtools/server/actors/network-monitor/network-content", prefix:"networkContent", constructorName:"NetworkContentActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"networkContentActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"networkContentActor", actorID:"server0.conn0.windowGlobal4294967782/networkContentActor18", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, screenshotContentActor:{_options:{id:"devtools/server/actors/screenshot-content", prefix:"screenshotContent", constructorName:"ScreenshotContentActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"screenshotContentActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"screenshotContentActor", actorID:"server0.conn0.windowGlobal4294967782/screenshotContentActor19", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}}, _sourcesManager:{_thread:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, actorID:"server0.conn0.windowGlobal4294967782/thread1", _actorSpec:{typeName:"thread", methods:[{name:"attach", request:{type:"attach", template:{type:"attach", options:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, args:[{placeholder:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reconfigure", request:{type:"reconfigure", template:{type:"reconfigure", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"resume", request:{type:"resume", template:{type:"resume", resumeLimit:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, frameActorID:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["resumeLimit"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["frameActorID"]}]}, response:{template:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"frames", request:{type:"frames", template:{type:"frames", start:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, count:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["start"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["count"]}]}, response:{template:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"interrupt", request:{type:"interrupt", template:{type:"interrupt", when:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["when"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"sources", request:{type:"sources", template:{type:"sources"}, args:[]}, response:{template:{sources:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["sources"]}, release:(void 0), oneway:(void 0)}, {name:"skipBreakpoints", request:{type:"skipBreakpoints", template:{type:"skipBreakpoints", skip:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["skip"]}]}, response:{template:{skip:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}}, release:(void 0), oneway:(void 0)}, {name:"dumpThread", request:{type:"dumpThread", template:{type:"dumpThread"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"dumpPools", request:{type:"dumpPools", template:{type:"dumpPools"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"setBreakpoint", request:{type:"setBreakpoint", template:{type:"setBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, options:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"removeBreakpoint", request:{type:"removeBreakpoint", template:{type:"removeBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"setXHRBreakpoint", request:{type:"setXHRBreakpoint", template:{type:"setXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"removeXHRBreakpoint", request:{type:"removeXHRBreakpoint", template:{type:"removeXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getAvailableEventBreakpoints", request:{type:"getAvailableEventBreakpoints", template:{type:"getAvailableEventBreakpoints"}, args:[]}, response:{template:{value:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getActiveEventBreakpoints", request:{type:"getActiveEventBreakpoints", template:{type:"getActiveEventBreakpoints"}, args:[]}, response:{template:{ids:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}, release:(void 0), oneway:(void 0)}, {name:"setActiveEventBreakpoints", request:{type:"setActiveEventBreakpoints", template:{type:"setActiveEventBreakpoints", ids:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"pauseOnExceptions", request:{type:"pauseOnExceptions", template:{type:"pauseOnExceptions", pauseOnExceptions:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, ignoreCaughtExceptions:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["pauseOnExceptions"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ignoreCaughtExceptions"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"toggleEventLogging", request:{type:"toggleEventLogging", template:{type:"toggleEventLogging", logEventBreakpoints:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["logEventBreakpoints"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"isAttached", request:{type:"isAttached", template:{type:"isAttached"}, args:[]}, response:{template:{value:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, retVal:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["value"]}, release:(void 0), oneway:(void 0)}], events:{}}, _state:"running", _parent:{}, global:{get window() {
    [native code]
}, get document() {
    [native code]
}, get location() {
    [native code]
}, set location() {
    [native code]
}, get top() {
    [native code]
}, close:function close() {
    [native code]
}, stop:function stop() {
    [native code]
}, focus:function focus() {
    [native code]
}, blur:function blur() {
    [native code]
}, open:function open() {
    [native code]
}, alert:function alert() {
    [native code]
}, confirm:function confirm() {
    [native code]
}, prompt:function prompt() {
    [native code]
}, print:function print() {
    [native code]
}, printPreview:function printPreview() {
    [native code]
}, postMessage:function postMessage() {
    [native code]
}, captureEvents:function captureEvents() {
    [native code]
}, releaseEvents:function releaseEvents() {
    [native code]
}, getSelection:function getSelection() {
    [native code]
}, getComputedStyle:function getComputedStyle() {
    [native code]
}, matchMedia:function matchMedia() {
    [native code]
}, moveTo:function moveTo() {
    [native code]
}, moveBy:function moveBy() {
    [native code]
}, resizeTo:function resizeTo() {
    [native code]
}, resizeBy:function resizeBy() {
    [native code]
}, scroll:function scroll() {
    [native code]
}, scrollTo:function scrollTo() {
    [native code]
}, scrollBy:function scrollBy() {
    [native code]
}, getDefaultComputedStyle:function getDefaultComputedStyle() {
    [native code]
}, scrollByLines:function scrollByLines() {
    [native code]
}, scrollByPages:function scrollByPages() {
    [native code]
}, sizeToContent:function sizeToContent() {
    [native code]
}, updateCommands:function updateCommands() {
    [native code]
}, find:function find() {
    [native code]
}, dump:function dump() {
    [native code]
}, setResizable:function setResizable() {
    [native code]
}, requestIdleCallback:function requestIdleCallback() {
    [native code]
}, cancelIdleCallback:function cancelIdleCallback() {
    [native code]
}, getRegionalPrefsLocales:function getRegionalPrefsLocales() {
    [native code]
}, getWebExposedLocales:function getWebExposedLocales() {
    [native code]
}, requestAnimationFrame:function requestAnimationFrame() {
    [native code]
}, cancelAnimationFrame:function cancelAnimationFrame() {
    [native code]
}, reportError:function reportError() {
    [native code]
}, btoa:function btoa() {
    [native code]
}, atob:function atob() {
    [native code]
}, setTimeout:function setTimeout() {
    [native code]
}, clearTimeout:function clearTimeout() {
    [native code]
}, setInterval:function setInterval() {
    [native code]
}, clearInterval:function clearInterval() {
    [native code]
}, queueMicrotask:function queueMicrotask() {
    [native code]
}, createImageBitmap:function createImageBitmap() {
    [native code]
}, structuredClone:function structuredClone() {
    [native code]
}, fetch:function fetch() {
    [native code]
}, get self() {
    [native code]
}, set self() {
    [native code]
}, get name() {
    [native code]
}, set name() {
    [native code]
}, get history() {
    [native code]
}, get customElements() {
    [native code]
}, get locationbar() {
    [native code]
}, set locationbar() {
    [native code]
}, get menubar() {
    [native code]
}, set menubar() {
    [native code]
}, get personalbar() {
    [native code]
}, set personalbar() {
    [native code]
}, get scrollbars() {
    [native code]
}, set scrollbars() {
    [native code]
}, get statusbar() {
    [native code]
}, set statusbar() {
    [native code]
}, get toolbar() {
    [native code]
}, set toolbar() {
    [native code]
}, get status() {
    [native code]
}, set status() {
    [native code]
}, get closed() {
    [native code]
}, get event() {
    [native code]
}, set event() {
    [native code]
}, get frames() {
    [native code]
}, set frames() {
    [native code]
}, get length() {
    [native code]
}, set length() {
    [native code]
}, get opener() {
    [native code]
}, set opener() {
    [native code]
}, get parent() {
    [native code]
}, set parent() {
    [native code]
}, get frameElement() {
    [native code]
}, get navigator() {
    [native code]
}, get clientInformation() {
    [native code]
}, get external() {
    [native code]
}, set external() {
    [native code]
}, get applicationCache() {
    [native code]
}, get screen() {
    [native code]
}, set screen() {
    [native code]
}, get innerWidth() {
    [native code]
}, set innerWidth() {
    [native code]
}, get innerHeight() {
    [native code]
}, set innerHeight() {
    [native code]
}, get scrollX() {
    [native code]
}, set scrollX() {
    [native code]
}, get pageXOffset() {
    [native code]
}, set pageXOffset() {
    [native code]
}, get scrollY() {
    [native code]
}, set scrollY() {
    [native code]
}, get pageYOffset() {
    [native code]
}, set pageYOffset() {
    [native code]
}, get screenLeft() {
    [native code]
}, set screenLeft() {
    [native code]
}, get screenTop() {
    [native code]
}, set screenTop() {
    [native code]
}, get screenX() {
    [native code]
}, set screenX() {
    [native code]
}, get screenY() {
    [native code]
}, set screenY() {
    [native code]
}, get outerWidth() {
    [native code]
}, set outerWidth() {
    [native code]
}, get outerHeight() {
    [native code]
}, set outerHeight() {
    [native code]
}, get performance() {
    [native code]
}, set performance() {
    [native code]
}, get mozInnerScreenX() {
    [native code]
}, get mozInnerScreenY() {
    [native code]
}, get devicePixelRatio() {
    [native code]
}, set devicePixelRatio() {
    [native code]
}, get scrollMaxX() {
    [native code]
}, set scrollMaxX() {
    [native code]
}, get scrollMaxY() {
    [native code]
}, set scrollMaxY() {
    [native code]
}, get fullScreen() {
    [native code]
}, set fullScreen() {
    [native code]
}, get ondevicemotion() {
    [native code]
}, set ondevicemotion() {
    [native code]
}, get ondeviceorientation() {
    [native code]
}, set ondeviceorientation() {
    [native code]
}, get onabsolutedeviceorientation() {
    [native code]
}, set onabsolutedeviceorientation() {
    [native code]
}, get InstallTrigger() {
    [native code]
}, set InstallTrigger() {
    [native code]
}, get intlUtils() {
    [native code]
}, get visualViewport() {
    [native code]
}, set visualViewport() {
    [native code]
}, get crypto() {
    [native code]
}, get onabort() {
    [native code]
}, set onabort() {
    [native code]
}, get onblur() {
    [native code]
}, set onblur() {
    [native code]
}, get onfocus() {
    [native code]
}, set onfocus() {
    [native code]
}, get onauxclick() {
    [native code]
}, set onauxclick() {
    [native code]
}, get onbeforeinput() {
    [native code]
}, set onbeforeinput() {
    [native code]
}, get oncanplay() {
    [native code]
}, set oncanplay() {
    [native code]
}, get oncanplaythrough() {
    [native code]
}, set oncanplaythrough() {
    [native code]
}, get onchange() {
    [native code]
}, set onchange() {
    [native code]
}, get onclick() {
    [native code]
}, set onclick() {
    [native code]
}, get onclose() {
    [native code]
}, set onclose() {
    [native code]
}, get oncontextmenu() {
    [native code]
}, set oncontextmenu() {
    [native code]
}, get oncuechange() {
    [native code]
}, set oncuechange() {
    [native code]
}, get ondblclick() {
    [native code]
}, set ondblclick() {
    [native code]
}, get ondrag() {
    [native code]
}, set ondrag() {
    [native code]
}, get ondragend() {
    [native code]
}, set ondragend() {
    [native code]
}, get ondragenter() {
    [native code]
}, set ondragenter() {
    [native code]
}, get ondragexit() {
    [native code]
}, set ondragexit() {
    [native code]
}, get ondragleave() {
    [native code]
}, set ondragleave() {
    [native code]
}, get ondragover() {
    [native code]
}, set ondragover() {
    [native code]
}, get ondragstart() {
    [native code]
}, set ondragstart() {
    [native code]
}, get ondrop() {
    [native code]
}, set ondrop() {
    [native code]
}, get ondurationchange() {
    [native code]
}, set ondurationchange() {
    [native code]
}, get onemptied() {
    [native code]
}, set onemptied() {
    [native code]
}, get onended() {
    [native code]
}, set onended() {
    [native code]
}, get onformdata() {
    [native code]
}, set onformdata() {
    [native code]
}, get oninput() {
    [native code]
}, set oninput() {
    [native code]
}, get oninvalid() {
    [native code]
}, set oninvalid() {
    [native code]
}, get onkeydown() {
    [native code]
}, set onkeydown() {
    [native code]
}, get onkeypress() {
    [native code]
}, set onkeypress() {
    [native code]
}, get onkeyup() {
    [native code]
}, set onkeyup() {
    [native code]
}, get onload() {
    [native code]
}, set onload() {
    [native code]
}, get onloadeddata() {
    [native code]
}, set onloadeddata() {
    [native code]
}, get onloadedmetadata() {
    [native code]
}, set onloadedmetadata() {
    [native code]
}, get onloadend() {
    [native code]
}, set onloadend() {
    [native code]
}, get onloadstart() {
    [native code]
}, set onloadstart() {
    [native code]
}, get onmousedown() {
    [native code]
}, set onmousedown() {
    [native code]
}, get onmouseenter() {
    [native code]
}, set onmouseenter() {
    [native code]
}, get onmouseleave() {
    [native code]
}, set onmouseleave() {
    [native code]
}, get onmousemove() {
    [native code]
}, set onmousemove() {
    [native code]
}, get onmouseout() {
    [native code]
}, set onmouseout() {
    [native code]
}, get onmouseover() {
    [native code]
}, set onmouseover() {
    [native code]
}, get onmouseup() {
    [native code]
}, set onmouseup() {
    [native code]
}, get onwheel() {
    [native code]
}, set onwheel() {
    [native code]
}, get onpause() {
    [native code]
}, set onpause() {
    [native code]
}, get onplay() {
    [native code]
}, set onplay() {
    [native code]
}, get onplaying() {
    [native code]
}, set onplaying() {
    [native code]
}, get onprogress() {
    [native code]
}, set onprogress() {
    [native code]
}, get onratechange() {
    [native code]
}, set onratechange() {
    [native code]
}, get onreset() {
    [native code]
}, set onreset() {
    [native code]
}, get onresize() {
    [native code]
}, set onresize() {
    [native code]
}, get onscroll() {
    [native code]
}, set onscroll() {
    [native code]
}, get onsecuritypolicyviolation() {
    [native code]
}, set onsecuritypolicyviolation() {
    [native code]
}, get onseeked() {
    [native code]
}, set onseeked() {
    [native code]
}, get onseeking() {
    [native code]
}, set onseeking() {
    [native code]
}, get onselect() {
    [native code]
}, set onselect() {
    [native code]
}, get onslotchange() {
    [native code]
}, set onslotchange() {
    [native code]
}, get onstalled() {
    [native code]
}, set onstalled() {
    [native code]
}, get onsubmit() {
    [native code]
}, set onsubmit() {
    [native code]
}, get onsuspend() {
    [native code]
}, set onsuspend() {
    [native code]
}, get ontimeupdate() {
    [native code]
}, set ontimeupdate() {
    [native code]
}, get onvolumechange() {
    [native code]
}, set onvolumechange() {
    [native code]
}, get onwaiting() {
    [native code]
}, set onwaiting() {
    [native code]
}, get onselectstart() {
    [native code]
}, set onselectstart() {
    [native code]
}, get onselectionchange() {
    [native code]
}, set onselectionchange() {
    [native code]
}, get ontoggle() {
    [native code]
}, set ontoggle() {
    [native code]
}, get onpointercancel() {
    [native code]
}, set onpointercancel() {
    [native code]
}, get onpointerdown() {
    [native code]
}, set onpointerdown() {
    [native code]
}, get onpointerup() {
    [native code]
}, set onpointerup() {
    [native code]
}, get onpointermove() {
    [native code]
}, set onpointermove() {
    [native code]
}, get onpointerout() {
    [native code]
}, set onpointerout() {
    [native code]
}, get onpointerover() {
    [native code]
}, set onpointerover() {
    [native code]
}, get onpointerenter() {
    [native code]
}, set onpointerenter() {
    [native code]
}, get onpointerleave() {
    [native code]
}, set onpointerleave() {
    [native code]
}, get ongotpointercapture() {
    [native code]
}, set ongotpointercapture() {
    [native code]
}, get onlostpointercapture() {
    [native code]
}, set onlostpointercapture() {
    [native code]
}, get onmozfullscreenchange() {
    [native code]
}, set onmozfullscreenchange() {
    [native code]
}, get onmozfullscreenerror() {
    [native code]
}, set onmozfullscreenerror() {
    [native code]
}, get onanimationcancel() {
    [native code]
}, set onanimationcancel() {
    [native code]
}, get onanimationend() {
    [native code]
}, set onanimationend() {
    [native code]
}, get onanimationiteration() {
    [native code]
}, set onanimationiteration() {
    [native code]
}, get onanimationstart() {
    [native code]
}, set onanimationstart() {
    [native code]
}, get ontransitioncancel() {
    [native code]
}, set ontransitioncancel() {
    [native code]
}, get ontransitionend() {
    [native code]
}, set ontransitionend() {
    [native code]
}, get ontransitionrun() {
    [native code]
}, set ontransitionrun() {
    [native code]
}, get ontransitionstart() {
    [native code]
}, set ontransitionstart() {
    [native code]
}, get onwebkitanimationend() {
    [native code]
}, set onwebkitanimationend() {
    [native code]
}, get onwebkitanimationiteration() {
    [native code]
}, set onwebkitanimationiteration() {
    [native code]
}, get onwebkitanimationstart() {
    [native code]
}, set onwebkitanimationstart() {
    [native code]
}, get onwebkittransitionend() {
    [native code]
}, set onwebkittransitionend() {
    [native code]
}, get u2f() {
    [native code]
}, set u2f() {
    [native code]
}, get onerror() {
    [native code]
}, set onerror() {
    [native code]
}, get speechSynthesis() {
    [native code]
}, get onafterprint() {
    [native code]
}, set onafterprint() {
    [native code]
}, get onbeforeprint() {
    [native code]
}, set onbeforeprint() {
    [native code]
}, get onbeforeunload() {
    [native code]
}, set onbeforeunload() {
    [native code]
}, get onhashchange() {
    [native code]
}, set onhashchange() {
    [native code]
}, get onlanguagechange() {
    [native code]
}, set onlanguagechange() {
    [native code]
}, get onmessage() {
    [native code]
}, set onmessage() {
    [native code]
}, get onmessageerror() {
    [native code]
}, set onmessageerror() {
    [native code]
}, get onoffline() {
    [native code]
}, set onoffline() {
    [native code]
}, get ononline() {
    [native code]
}, set ononline() {
    [native code]
}, get onpagehide() {
    [native code]
}, set onpagehide() {
    [native code]
}, get onpageshow() {
    [native code]
}, set onpageshow() {
    [native code]
}, get onpopstate() {
    [native code]
}, set onpopstate() {
    [native code]
}, get onrejectionhandled() {
    [native code]
}, set onrejectionhandled() {
    [native code]
}, get onstorage() {
    [native code]
}, set onstorage() {
    [native code]
}, get onunhandledrejection() {
    [native code]
}, set onunhandledrejection() {
    [native code]
}, get onunload() {
    [native code]
}, set onunload() {
    [native code]
}, get ongamepadconnected() {
    [native code]
}, set ongamepadconnected() {
    [native code]
}, get ongamepaddisconnected() {
    [native code]
}, set ongamepaddisconnected() {
    [native code]
}, get localStorage() {
    [native code]
}, get origin() {
    [native code]
}, set origin() {
    [native code]
}, get crossOriginIsolated() {
    [native code]
}, get isSecureContext() {
    [native code]
}, get indexedDB() {
    [native code]
}, get caches() {
    [native code]
}, get sessionStorage() {
    [native code]
}, mozScrollSnap:function mozScrollSnap() {
    [native code]
}, openDialog:function openDialog() {
    [native code]
}, getInterface:function getInterface() {
    [native code]
}, shouldReportForServiceWorkerScope:function shouldReportForServiceWorkerScope() {
    [native code]
}, setScrollMarks:function setScrollMarks() {
    [native code]
}, get controllers() {
    [native code]
}, set controllers() {
    [native code]
}, get realFrameElement() {
    [native code]
}, get docShell() {
    [native code]
}, get browsingContext() {
    [native code]
}, get desktopToDeviceScale() {
    [native code]
}, get scrollMinX() {
    [native code]
}, get scrollMinY() {
    [native code]
}, get windowRoot() {
    [native code]
}, get windowUtils() {
    [native code]
}, get windowGlobalChild() {
    [native code]
}, get clientPrincipal() {
    [native code]
}, get isChromeWindow() {
    [native code]
}, get Glean() {
    [native code]
}, get GleanPings() {
    [native code]
}}, _options:{skipBreakpoints:false, pauseOnExceptions:false, ignoreCaughtExceptions:true, shouldShowOverlay:true, shouldIncludeSavedFrames:true, shouldIncludeAsyncLiveFrames:false, logEventBreakpoints:false, observeAsmJS:true}, _gripDepth:0, _parentClosed:false, _observingNetwork:false, _frameActors:[], _xhrBreakpoints:[], _dbg:{addDebuggees:(function() {
    for (const global of findDebuggees(this)) {
      safeAddDebuggee(this, global);
    }
  }), disable:(function() {
    dbg.removeAllDebuggees();
    dbg.onNewGlobalObject = undefined;
  }), enable:(function() {
    dbg.addDebuggees();
    dbg.onNewGlobalObject = onNewGlobalObject;
  }), onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}}, _threadLifetimePool:{__poolMap:{}, parentPool:null, conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, label:"thread", _isDestroyed:false, objectActors:{}}, _activeEventPause:null, _pauseOverlay:null, _priorPause:null, _activeEventBreakpoints:{}, _frameActorMap:{}, _debuggerSourcesSeen:{}, _onLoadBreakpointURLs:{}, _handledFrameExceptions:{}, _watchpointsMap:{threadActor:{}, _watchpoints:{}}, breakpointActorMap:{_threadActor:{}, _actors:{}}, _nestedEventLoop:{_thread:{}, _entered:false, _resolved:false}, onNewSourceEvent:function bound onNewSourceEvent() {
    [native code]
}, createCompletionGrip:function bound createCompletionGrip() {
    [native code]
}, onDebuggerStatement:function bound onDebuggerStatement() {
    [native code]
}, onNewScript:function bound onNewScript() {
    [native code]
}, objectGrip:function bound objectGrip() {
    [native code]
}, pauseObjectGrip:function bound pauseObjectGrip() {
    [native code]
}, _onOpeningRequest:function bound _onOpeningRequest() {
    [native code]
}, _onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}, _onExceptionUnwind:function bound _onExceptionUnwind() {
    [native code]
}, _eventBreakpointListener:function bound _eventBreakpointListener() {
    [native code]
}, _onWindowReady:function bound _onWindowReady() {
    [native code]
}, _onWillNavigate:function bound _onWillNavigate() {
    [native code]
}, _onNavigate:function bound _onNavigate() {
    [native code]
}, _firstStatementBreakpoint:null, _debuggerNotificationObserver:{}, parentPool:{}, alreadyAttached:true, wrappedJSObject:{}, _pendingResponse:{}, [Symbol("EventEmitter/listeners")]:{}}, blackBoxedSources:{}, _sourceActors:{}, _urlContents:{}, _urlWaiters:{}, _sourcesByInternalSourceId:null, [Symbol("EventEmitter/listeners")]:{}}, _styleSheetActors:{}, _shouldAddNewGlobalAsDebuggee:function bound _shouldAddNewGlobalAsDebuggee() {
    [native code]
}, makeDebugger:function bound makeDebugger() {
    [native code]
}, watchNewDocShells:false, _workerDescriptorActorList:null, _workerDescriptorActorPool:null, _onWorkerDescriptorActorListChanged:function bound _onWorkerDescriptorActorListChanged() {
    [native code]
}, _onConsoleApiProfilerEvent:function bound _onConsoleApiProfilerEvent() {
    [native code]
}, threadActor:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, actorID:"server0.conn0.windowGlobal4294967782/thread1", _actorSpec:{typeName:"thread", methods:[{name:"attach", request:{type:"attach", template:{type:"attach", options:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, args:[{placeholder:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reconfigure", request:{type:"reconfigure", template:{type:"reconfigure", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"resume", request:{type:"resume", template:{type:"resume", resumeLimit:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, frameActorID:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["resumeLimit"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["frameActorID"]}]}, response:{template:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"frames", request:{type:"frames", template:{type:"frames", start:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, count:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["start"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["count"]}]}, response:{template:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"interrupt", request:{type:"interrupt", template:{type:"interrupt", when:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["when"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"sources", request:{type:"sources", template:{type:"sources"}, args:[]}, response:{template:{sources:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["sources"]}, release:(void 0), oneway:(void 0)}, {name:"skipBreakpoints", request:{type:"skipBreakpoints", template:{type:"skipBreakpoints", skip:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["skip"]}]}, response:{template:{skip:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}}, release:(void 0), oneway:(void 0)}, {name:"dumpThread", request:{type:"dumpThread", template:{type:"dumpThread"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"dumpPools", request:{type:"dumpPools", template:{type:"dumpPools"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"setBreakpoint", request:{type:"setBreakpoint", template:{type:"setBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, options:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"removeBreakpoint", request:{type:"removeBreakpoint", template:{type:"removeBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"setXHRBreakpoint", request:{type:"setXHRBreakpoint", template:{type:"setXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"removeXHRBreakpoint", request:{type:"removeXHRBreakpoint", template:{type:"removeXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getAvailableEventBreakpoints", request:{type:"getAvailableEventBreakpoints", template:{type:"getAvailableEventBreakpoints"}, args:[]}, response:{template:{value:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getActiveEventBreakpoints", request:{type:"getActiveEventBreakpoints", template:{type:"getActiveEventBreakpoints"}, args:[]}, response:{template:{ids:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}, release:(void 0), oneway:(void 0)}, {name:"setActiveEventBreakpoints", request:{type:"setActiveEventBreakpoints", template:{type:"setActiveEventBreakpoints", ids:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"pauseOnExceptions", request:{type:"pauseOnExceptions", template:{type:"pauseOnExceptions", pauseOnExceptions:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, ignoreCaughtExceptions:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["pauseOnExceptions"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ignoreCaughtExceptions"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"toggleEventLogging", request:{type:"toggleEventLogging", template:{type:"toggleEventLogging", logEventBreakpoints:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["logEventBreakpoints"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"isAttached", request:{type:"isAttached", template:{type:"isAttached"}, args:[]}, response:{template:{value:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, retVal:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["value"]}, release:(void 0), oneway:(void 0)}], events:{}}, _state:"running", _parent:{}, global:{get window() {
    [native code]
}, get document() {
    [native code]
}, get location() {
    [native code]
}, set location() {
    [native code]
}, get top() {
    [native code]
}, close:function close() {
    [native code]
}, stop:function stop() {
    [native code]
}, focus:function focus() {
    [native code]
}, blur:function blur() {
    [native code]
}, open:function open() {
    [native code]
}, alert:function alert() {
    [native code]
}, confirm:function confirm() {
    [native code]
}, prompt:function prompt() {
    [native code]
}, print:function print() {
    [native code]
}, printPreview:function printPreview() {
    [native code]
}, postMessage:function postMessage() {
    [native code]
}, captureEvents:function captureEvents() {
    [native code]
}, releaseEvents:function releaseEvents() {
    [native code]
}, getSelection:function getSelection() {
    [native code]
}, getComputedStyle:function getComputedStyle() {
    [native code]
}, matchMedia:function matchMedia() {
    [native code]
}, moveTo:function moveTo() {
    [native code]
}, moveBy:function moveBy() {
    [native code]
}, resizeTo:function resizeTo() {
    [native code]
}, resizeBy:function resizeBy() {
    [native code]
}, scroll:function scroll() {
    [native code]
}, scrollTo:function scrollTo() {
    [native code]
}, scrollBy:function scrollBy() {
    [native code]
}, getDefaultComputedStyle:function getDefaultComputedStyle() {
    [native code]
}, scrollByLines:function scrollByLines() {
    [native code]
}, scrollByPages:function scrollByPages() {
    [native code]
}, sizeToContent:function sizeToContent() {
    [native code]
}, updateCommands:function updateCommands() {
    [native code]
}, find:function find() {
    [native code]
}, dump:function dump() {
    [native code]
}, setResizable:function setResizable() {
    [native code]
}, requestIdleCallback:function requestIdleCallback() {
    [native code]
}, cancelIdleCallback:function cancelIdleCallback() {
    [native code]
}, getRegionalPrefsLocales:function getRegionalPrefsLocales() {
    [native code]
}, getWebExposedLocales:function getWebExposedLocales() {
    [native code]
}, requestAnimationFrame:function requestAnimationFrame() {
    [native code]
}, cancelAnimationFrame:function cancelAnimationFrame() {
    [native code]
}, reportError:function reportError() {
    [native code]
}, btoa:function btoa() {
    [native code]
}, atob:function atob() {
    [native code]
}, setTimeout:function setTimeout() {
    [native code]
}, clearTimeout:function clearTimeout() {
    [native code]
}, setInterval:function setInterval() {
    [native code]
}, clearInterval:function clearInterval() {
    [native code]
}, queueMicrotask:function queueMicrotask() {
    [native code]
}, createImageBitmap:function createImageBitmap() {
    [native code]
}, structuredClone:function structuredClone() {
    [native code]
}, fetch:function fetch() {
    [native code]
}, get self() {
    [native code]
}, set self() {
    [native code]
}, get name() {
    [native code]
}, set name() {
    [native code]
}, get history() {
    [native code]
}, get customElements() {
    [native code]
}, get locationbar() {
    [native code]
}, set locationbar() {
    [native code]
}, get menubar() {
    [native code]
}, set menubar() {
    [native code]
}, get personalbar() {
    [native code]
}, set personalbar() {
    [native code]
}, get scrollbars() {
    [native code]
}, set scrollbars() {
    [native code]
}, get statusbar() {
    [native code]
}, set statusbar() {
    [native code]
}, get toolbar() {
    [native code]
}, set toolbar() {
    [native code]
}, get status() {
    [native code]
}, set status() {
    [native code]
}, get closed() {
    [native code]
}, get event() {
    [native code]
}, set event() {
    [native code]
}, get frames() {
    [native code]
}, set frames() {
    [native code]
}, get length() {
    [native code]
}, set length() {
    [native code]
}, get opener() {
    [native code]
}, set opener() {
    [native code]
}, get parent() {
    [native code]
}, set parent() {
    [native code]
}, get frameElement() {
    [native code]
}, get navigator() {
    [native code]
}, get clientInformation() {
    [native code]
}, get external() {
    [native code]
}, set external() {
    [native code]
}, get applicationCache() {
    [native code]
}, get screen() {
    [native code]
}, set screen() {
    [native code]
}, get innerWidth() {
    [native code]
}, set innerWidth() {
    [native code]
}, get innerHeight() {
    [native code]
}, set innerHeight() {
    [native code]
}, get scrollX() {
    [native code]
}, set scrollX() {
    [native code]
}, get pageXOffset() {
    [native code]
}, set pageXOffset() {
    [native code]
}, get scrollY() {
    [native code]
}, set scrollY() {
    [native code]
}, get pageYOffset() {
    [native code]
}, set pageYOffset() {
    [native code]
}, get screenLeft() {
    [native code]
}, set screenLeft() {
    [native code]
}, get screenTop() {
    [native code]
}, set screenTop() {
    [native code]
}, get screenX() {
    [native code]
}, set screenX() {
    [native code]
}, get screenY() {
    [native code]
}, set screenY() {
    [native code]
}, get outerWidth() {
    [native code]
}, set outerWidth() {
    [native code]
}, get outerHeight() {
    [native code]
}, set outerHeight() {
    [native code]
}, get performance() {
    [native code]
}, set performance() {
    [native code]
}, get mozInnerScreenX() {
    [native code]
}, get mozInnerScreenY() {
    [native code]
}, get devicePixelRatio() {
    [native code]
}, set devicePixelRatio() {
    [native code]
}, get scrollMaxX() {
    [native code]
}, set scrollMaxX() {
    [native code]
}, get scrollMaxY() {
    [native code]
}, set scrollMaxY() {
    [native code]
}, get fullScreen() {
    [native code]
}, set fullScreen() {
    [native code]
}, get ondevicemotion() {
    [native code]
}, set ondevicemotion() {
    [native code]
}, get ondeviceorientation() {
    [native code]
}, set ondeviceorientation() {
    [native code]
}, get onabsolutedeviceorientation() {
    [native code]
}, set onabsolutedeviceorientation() {
    [native code]
}, get InstallTrigger() {
    [native code]
}, set InstallTrigger() {
    [native code]
}, get intlUtils() {
    [native code]
}, get visualViewport() {
    [native code]
}, set visualViewport() {
    [native code]
}, get crypto() {
    [native code]
}, get onabort() {
    [native code]
}, set onabort() {
    [native code]
}, get onblur() {
    [native code]
}, set onblur() {
    [native code]
}, get onfocus() {
    [native code]
}, set onfocus() {
    [native code]
}, get onauxclick() {
    [native code]
}, set onauxclick() {
    [native code]
}, get onbeforeinput() {
    [native code]
}, set onbeforeinput() {
    [native code]
}, get oncanplay() {
    [native code]
}, set oncanplay() {
    [native code]
}, get oncanplaythrough() {
    [native code]
}, set oncanplaythrough() {
    [native code]
}, get onchange() {
    [native code]
}, set onchange() {
    [native code]
}, get onclick() {
    [native code]
}, set onclick() {
    [native code]
}, get onclose() {
    [native code]
}, set onclose() {
    [native code]
}, get oncontextmenu() {
    [native code]
}, set oncontextmenu() {
    [native code]
}, get oncuechange() {
    [native code]
}, set oncuechange() {
    [native code]
}, get ondblclick() {
    [native code]
}, set ondblclick() {
    [native code]
}, get ondrag() {
    [native code]
}, set ondrag() {
    [native code]
}, get ondragend() {
    [native code]
}, set ondragend() {
    [native code]
}, get ondragenter() {
    [native code]
}, set ondragenter() {
    [native code]
}, get ondragexit() {
    [native code]
}, set ondragexit() {
    [native code]
}, get ondragleave() {
    [native code]
}, set ondragleave() {
    [native code]
}, get ondragover() {
    [native code]
}, set ondragover() {
    [native code]
}, get ondragstart() {
    [native code]
}, set ondragstart() {
    [native code]
}, get ondrop() {
    [native code]
}, set ondrop() {
    [native code]
}, get ondurationchange() {
    [native code]
}, set ondurationchange() {
    [native code]
}, get onemptied() {
    [native code]
}, set onemptied() {
    [native code]
}, get onended() {
    [native code]
}, set onended() {
    [native code]
}, get onformdata() {
    [native code]
}, set onformdata() {
    [native code]
}, get oninput() {
    [native code]
}, set oninput() {
    [native code]
}, get oninvalid() {
    [native code]
}, set oninvalid() {
    [native code]
}, get onkeydown() {
    [native code]
}, set onkeydown() {
    [native code]
}, get onkeypress() {
    [native code]
}, set onkeypress() {
    [native code]
}, get onkeyup() {
    [native code]
}, set onkeyup() {
    [native code]
}, get onload() {
    [native code]
}, set onload() {
    [native code]
}, get onloadeddata() {
    [native code]
}, set onloadeddata() {
    [native code]
}, get onloadedmetadata() {
    [native code]
}, set onloadedmetadata() {
    [native code]
}, get onloadend() {
    [native code]
}, set onloadend() {
    [native code]
}, get onloadstart() {
    [native code]
}, set onloadstart() {
    [native code]
}, get onmousedown() {
    [native code]
}, set onmousedown() {
    [native code]
}, get onmouseenter() {
    [native code]
}, set onmouseenter() {
    [native code]
}, get onmouseleave() {
    [native code]
}, set onmouseleave() {
    [native code]
}, get onmousemove() {
    [native code]
}, set onmousemove() {
    [native code]
}, get onmouseout() {
    [native code]
}, set onmouseout() {
    [native code]
}, get onmouseover() {
    [native code]
}, set onmouseover() {
    [native code]
}, get onmouseup() {
    [native code]
}, set onmouseup() {
    [native code]
}, get onwheel() {
    [native code]
}, set onwheel() {
    [native code]
}, get onpause() {
    [native code]
}, set onpause() {
    [native code]
}, get onplay() {
    [native code]
}, set onplay() {
    [native code]
}, get onplaying() {
    [native code]
}, set onplaying() {
    [native code]
}, get onprogress() {
    [native code]
}, set onprogress() {
    [native code]
}, get onratechange() {
    [native code]
}, set onratechange() {
    [native code]
}, get onreset() {
    [native code]
}, set onreset() {
    [native code]
}, get onresize() {
    [native code]
}, set onresize() {
    [native code]
}, get onscroll() {
    [native code]
}, set onscroll() {
    [native code]
}, get onsecuritypolicyviolation() {
    [native code]
}, set onsecuritypolicyviolation() {
    [native code]
}, get onseeked() {
    [native code]
}, set onseeked() {
    [native code]
}, get onseeking() {
    [native code]
}, set onseeking() {
    [native code]
}, get onselect() {
    [native code]
}, set onselect() {
    [native code]
}, get onslotchange() {
    [native code]
}, set onslotchange() {
    [native code]
}, get onstalled() {
    [native code]
}, set onstalled() {
    [native code]
}, get onsubmit() {
    [native code]
}, set onsubmit() {
    [native code]
}, get onsuspend() {
    [native code]
}, set onsuspend() {
    [native code]
}, get ontimeupdate() {
    [native code]
}, set ontimeupdate() {
    [native code]
}, get onvolumechange() {
    [native code]
}, set onvolumechange() {
    [native code]
}, get onwaiting() {
    [native code]
}, set onwaiting() {
    [native code]
}, get onselectstart() {
    [native code]
}, set onselectstart() {
    [native code]
}, get onselectionchange() {
    [native code]
}, set onselectionchange() {
    [native code]
}, get ontoggle() {
    [native code]
}, set ontoggle() {
    [native code]
}, get onpointercancel() {
    [native code]
}, set onpointercancel() {
    [native code]
}, get onpointerdown() {
    [native code]
}, set onpointerdown() {
    [native code]
}, get onpointerup() {
    [native code]
}, set onpointerup() {
    [native code]
}, get onpointermove() {
    [native code]
}, set onpointermove() {
    [native code]
}, get onpointerout() {
    [native code]
}, set onpointerout() {
    [native code]
}, get onpointerover() {
    [native code]
}, set onpointerover() {
    [native code]
}, get onpointerenter() {
    [native code]
}, set onpointerenter() {
    [native code]
}, get onpointerleave() {
    [native code]
}, set onpointerleave() {
    [native code]
}, get ongotpointercapture() {
    [native code]
}, set ongotpointercapture() {
    [native code]
}, get onlostpointercapture() {
    [native code]
}, set onlostpointercapture() {
    [native code]
}, get onmozfullscreenchange() {
    [native code]
}, set onmozfullscreenchange() {
    [native code]
}, get onmozfullscreenerror() {
    [native code]
}, set onmozfullscreenerror() {
    [native code]
}, get onanimationcancel() {
    [native code]
}, set onanimationcancel() {
    [native code]
}, get onanimationend() {
    [native code]
}, set onanimationend() {
    [native code]
}, get onanimationiteration() {
    [native code]
}, set onanimationiteration() {
    [native code]
}, get onanimationstart() {
    [native code]
}, set onanimationstart() {
    [native code]
}, get ontransitioncancel() {
    [native code]
}, set ontransitioncancel() {
    [native code]
}, get ontransitionend() {
    [native code]
}, set ontransitionend() {
    [native code]
}, get ontransitionrun() {
    [native code]
}, set ontransitionrun() {
    [native code]
}, get ontransitionstart() {
    [native code]
}, set ontransitionstart() {
    [native code]
}, get onwebkitanimationend() {
    [native code]
}, set onwebkitanimationend() {
    [native code]
}, get onwebkitanimationiteration() {
    [native code]
}, set onwebkitanimationiteration() {
    [native code]
}, get onwebkitanimationstart() {
    [native code]
}, set onwebkitanimationstart() {
    [native code]
}, get onwebkittransitionend() {
    [native code]
}, set onwebkittransitionend() {
    [native code]
}, get u2f() {
    [native code]
}, set u2f() {
    [native code]
}, get onerror() {
    [native code]
}, set onerror() {
    [native code]
}, get speechSynthesis() {
    [native code]
}, get onafterprint() {
    [native code]
}, set onafterprint() {
    [native code]
}, get onbeforeprint() {
    [native code]
}, set onbeforeprint() {
    [native code]
}, get onbeforeunload() {
    [native code]
}, set onbeforeunload() {
    [native code]
}, get onhashchange() {
    [native code]
}, set onhashchange() {
    [native code]
}, get onlanguagechange() {
    [native code]
}, set onlanguagechange() {
    [native code]
}, get onmessage() {
    [native code]
}, set onmessage() {
    [native code]
}, get onmessageerror() {
    [native code]
}, set onmessageerror() {
    [native code]
}, get onoffline() {
    [native code]
}, set onoffline() {
    [native code]
}, get ononline() {
    [native code]
}, set ononline() {
    [native code]
}, get onpagehide() {
    [native code]
}, set onpagehide() {
    [native code]
}, get onpageshow() {
    [native code]
}, set onpageshow() {
    [native code]
}, get onpopstate() {
    [native code]
}, set onpopstate() {
    [native code]
}, get onrejectionhandled() {
    [native code]
}, set onrejectionhandled() {
    [native code]
}, get onstorage() {
    [native code]
}, set onstorage() {
    [native code]
}, get onunhandledrejection() {
    [native code]
}, set onunhandledrejection() {
    [native code]
}, get onunload() {
    [native code]
}, set onunload() {
    [native code]
}, get ongamepadconnected() {
    [native code]
}, set ongamepadconnected() {
    [native code]
}, get ongamepaddisconnected() {
    [native code]
}, set ongamepaddisconnected() {
    [native code]
}, get localStorage() {
    [native code]
}, get origin() {
    [native code]
}, set origin() {
    [native code]
}, get crossOriginIsolated() {
    [native code]
}, get isSecureContext() {
    [native code]
}, get indexedDB() {
    [native code]
}, get caches() {
    [native code]
}, get sessionStorage() {
    [native code]
}, mozScrollSnap:function mozScrollSnap() {
    [native code]
}, openDialog:function openDialog() {
    [native code]
}, getInterface:function getInterface() {
    [native code]
}, shouldReportForServiceWorkerScope:function shouldReportForServiceWorkerScope() {
    [native code]
}, setScrollMarks:function setScrollMarks() {
    [native code]
}, get controllers() {
    [native code]
}, set controllers() {
    [native code]
}, get realFrameElement() {
    [native code]
}, get docShell() {
    [native code]
}, get browsingContext() {
    [native code]
}, get desktopToDeviceScale() {
    [native code]
}, get scrollMinX() {
    [native code]
}, get scrollMinY() {
    [native code]
}, get windowRoot() {
    [native code]
}, get windowUtils() {
    [native code]
}, get windowGlobalChild() {
    [native code]
}, get clientPrincipal() {
    [native code]
}, get isChromeWindow() {
    [native code]
}, get Glean() {
    [native code]
}, get GleanPings() {
    [native code]
}}, _options:{skipBreakpoints:false, pauseOnExceptions:false, ignoreCaughtExceptions:true, shouldShowOverlay:true, shouldIncludeSavedFrames:true, shouldIncludeAsyncLiveFrames:false, logEventBreakpoints:false, observeAsmJS:true}, _gripDepth:0, _parentClosed:false, _observingNetwork:false, _frameActors:[], _xhrBreakpoints:[], _dbg:{addDebuggees:(function() {
    for (const global of findDebuggees(this)) {
      safeAddDebuggee(this, global);
    }
  }), disable:(function() {
    dbg.removeAllDebuggees();
    dbg.onNewGlobalObject = undefined;
  }), enable:(function() {
    dbg.addDebuggees();
    dbg.onNewGlobalObject = onNewGlobalObject;
  }), onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}}, _threadLifetimePool:{__poolMap:{}, parentPool:null, conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, label:"thread", _isDestroyed:false, objectActors:{}}, _activeEventPause:null, _pauseOverlay:null, _priorPause:null, _activeEventBreakpoints:{}, _frameActorMap:{}, _debuggerSourcesSeen:{}, _onLoadBreakpointURLs:{}, _handledFrameExceptions:{}, _watchpointsMap:{threadActor:{}, _watchpoints:{}}, breakpointActorMap:{_threadActor:{}, _actors:{}}, _nestedEventLoop:{_thread:{}, _entered:false, _resolved:false}, onNewSourceEvent:function bound onNewSourceEvent() {
    [native code]
}, createCompletionGrip:function bound createCompletionGrip() {
    [native code]
}, onDebuggerStatement:function bound onDebuggerStatement() {
    [native code]
}, onNewScript:function bound onNewScript() {
    [native code]
}, objectGrip:function bound objectGrip() {
    [native code]
}, pauseObjectGrip:function bound pauseObjectGrip() {
    [native code]
}, _onOpeningRequest:function bound _onOpeningRequest() {
    [native code]
}, _onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}, _onExceptionUnwind:function bound _onExceptionUnwind() {
    [native code]
}, _eventBreakpointListener:function bound _eventBreakpointListener() {
    [native code]
}, _onWindowReady:function bound _onWindowReady() {
    [native code]
}, _onWillNavigate:function bound _onWillNavigate() {
    [native code]
}, _onNavigate:function bound _onNavigate() {
    [native code]
}, _firstStatementBreakpoint:null, _debuggerNotificationObserver:{}, parentPool:{}, alreadyAttached:true, wrappedJSObject:{}, _pendingResponse:{}, [Symbol("EventEmitter/listeners")]:{}}, __poolMap:{}, _progressListener:{_targetActor:{}, _onWindowCreated:function bound () {
    [native code]
}, _onWindowHidden:function bound () {
    [native code]
}, _knownWindowIDs:{}, _watchedDocShells:{}}, _docShellsObserved:true, parentPool:{}, createdFromJsWindowActor:true, _targetScopedActorPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967782/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967782", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, _dbg:{addDebuggees:(function() {
    for (const global of findDebuggees(this)) {
      safeAddDebuggee(this, global);
    }
  }), disable:(function() {
    dbg.removeAllDebuggees();
    dbg.onNewGlobalObject = undefined;
  }), enable:(function() {
    dbg.addDebuggees();
    dbg.onNewGlobalObject = onNewGlobalObject;
  }), onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}}, _styleSheetManager:{_styleSheetCount:0, _styleSheetMap:{}, _mqlList:[], _targetActor:{}, _onApplicableStateChanged:function bound _onApplicableStateChanged() {
    [native code]
}, _onTargetActorWindowReady:function bound _onTargetActorWindowReady() {
    [native code]
}, [Symbol("EventEmitter/listeners")]:{}}, [Symbol("EventEmitter/listeners")]:{}}) ": " (new TypeError("this._targetActor.chromeEventHandler is null", "resource://devtools/server/actors/utils/stylesheets-manager.js", 867))
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 1706: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/connectors/js-window-actor/DevToolsFrameChild.jsm, line 375: InvalidStateError: JSWindowActorChild.sendAsyncMessage: JSWindowActorChild cannot send at the moment
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: https://s0.2mdn.net/sadbundle/4163918015545716211/index.html, line 259: TypeError: studio.Enabler is undefined
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
ATTENTION: default value of option mesa_glthread overridden by environment.
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 7 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
console.warn: "Async method failed in safeAsyncMethod" (new Error("Connection closed, pending request to server0.conn0.windowGlobal4294967799/layout23, type getGrids failed\n\nRequest stack:\nrequest@resource://devtools/shared/protocol/Front.js:293:14\ngenerateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19\ngetAllGrids@resource://devtools/client/fronts/layout.js:171:17\nexports.safeAsyncMethod/<@resource://devtools/shared/async-utils.js:61:25\ngetGrids@resource://devtools/client/inspector/grids/grid-inspector.js:449:35\n", "resource://devtools/shared/protocol/Front.js", 107))
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/client/framework/toolbox.js, line 3382: TypeError: data.frameData.id is null
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
console.error: "Error when attaching target:" (new Error("Connection closed, pending request to server0.conn0.windowGlobal4294967801/thread1, type isAttached failed\n\nRequest stack:\nrequest@resource://devtools/shared/protocol/Front.js:293:14\ngenerateRequestMethods/</frontProto[name]@resource://devtools/shared/protocol/Front/FrontClassWithSpec.js:49:19\nattachThread@resource://devtools/client/fronts/targets/target-mixin.js:561:49\n", "resource://devtools/shared/protocol/Front.js", 107))
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: watch :: line 1658"  data: no]
Stack: watch@resource://devtools/server/actors/targets/window-global.js:1658:28
_watchDocshells@resource://devtools/server/actors/targets/window-global.js:777:28
initialize/<@resource://devtools/server/actors/targets/window-global.js:348:42
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 1658, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
Handler function threw an exception: [Exception... "Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]"  nsresult: "0x80040111 (NS_ERROR_NOT_AVAILABLE)"  location: "JS frame :: resource://devtools/server/actors/targets/window-global.js :: get window :: line 422"  data: no]
Stack: get window@resource://devtools/server/actors/targets/window-global.js:422:5
form@resource://devtools/server/actors/source.js:190:1
onNewSourceEvent/<@resource://devtools/server/actors/thread.js:2047:24
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 422, column: 0
console.error: ({})
console.error: "Error while calling actor 'thread's method 'isAttached'" "JSWindowActorChild.sendAsyncMessage: JSWindowActorChild cannot send at the moment"
console.error: (new InvalidStateError("JSWindowActorChild.sendAsyncMessage: JSWindowActorChild cannot send at the moment", (void 0), 375))
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
console.error: "Error when destroying StyleSheet manager for" ({notifyResourceAvailable:function bound notifyResourceAvailable() {
    [native code]
}, notifyResourceDestroyed:function bound notifyResourceDestroyed() {
    [native code]
}, notifyResourceUpdated:function bound notifyResourceUpdated() {
    [native code]
}, conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, actorID:"server0.conn0.windowGlobal4294967801/windowGlobalTarget2", _actorSpec:{typeName:"windowGlobalTarget", methods:[{name:"detach", request:{type:"detach", template:{type:"detach"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"ensureCSSErrorReportingEnabled", request:{type:"ensureCSSErrorReportingEnabled", template:{type:"ensureCSSErrorReportingEnabled"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"focus", request:{type:"focus", template:{type:"focus"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"goForward", request:{type:"goForward", template:{type:"goForward"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"goBack", request:{type:"goBack", template:{type:"goBack"}, args:[]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reload", request:{type:"reload", template:{type:"reload", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"navigateTo", request:{type:"navigateTo", template:{type:"navigateTo", url:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["url"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reconfigure", request:{type:"reconfigure", template:{type:"reconfigure", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"switchToFrame", request:{type:"switchToFrame", template:{type:"switchToFrame", windowId:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["windowId"]}]}, response:{template:{_type:"windowGlobalTarget.switchtoframe", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"windowGlobalTarget.switchtoframe", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"listFrames", request:{type:"listFrames", template:{type:"listFrames"}, args:[]}, response:{template:{_type:"windowGlobalTarget.listframes", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"windowGlobalTarget.listframes", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"listWorkers", request:{type:"listWorkers", template:{type:"listWorkers"}, args:[]}, response:{template:{_type:"windowGlobalTarget.workers", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"windowGlobalTarget.workers", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"logInPage", request:{type:"logInPage", template:{type:"logInPage", text:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, category:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, flags:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["text"]}, {placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["category"]}, {placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["flags"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}], events:{}}, docShell:({}), _originalWindow:{get window() {
    [native code]
}, get document() {
    [native code]
}, get location() {
    [native code]
}, set location() {
    [native code]
}, get top() {
    [native code]
}, close:function close() {
    [native code]
}, stop:function stop() {
    [native code]
}, focus:function focus() {
    [native code]
}, blur:function blur() {
    [native code]
}, open:function open() {
    [native code]
}, alert:function alert() {
    [native code]
}, confirm:function confirm() {
    [native code]
}, prompt:function prompt() {
    [native code]
}, print:function print() {
    [native code]
}, printPreview:function printPreview() {
    [native code]
}, postMessage:function postMessage() {
    [native code]
}, captureEvents:function captureEvents() {
    [native code]
}, releaseEvents:function releaseEvents() {
    [native code]
}, getSelection:function getSelection() {
    [native code]
}, getComputedStyle:function getComputedStyle() {
    [native code]
}, matchMedia:function matchMedia() {
    [native code]
}, moveTo:function moveTo() {
    [native code]
}, moveBy:function moveBy() {
    [native code]
}, resizeTo:function resizeTo() {
    [native code]
}, resizeBy:function resizeBy() {
    [native code]
}, scroll:function scroll() {
    [native code]
}, scrollTo:function scrollTo() {
    [native code]
}, scrollBy:function scrollBy() {
    [native code]
}, getDefaultComputedStyle:function getDefaultComputedStyle() {
    [native code]
}, scrollByLines:function scrollByLines() {
    [native code]
}, scrollByPages:function scrollByPages() {
    [native code]
}, sizeToContent:function sizeToContent() {
    [native code]
}, updateCommands:function updateCommands() {
    [native code]
}, find:function find() {
    [native code]
}, dump:function dump() {
    [native code]
}, setResizable:function setResizable() {
    [native code]
}, requestIdleCallback:function requestIdleCallback() {
    [native code]
}, cancelIdleCallback:function cancelIdleCallback() {
    [native code]
}, getRegionalPrefsLocales:function getRegionalPrefsLocales() {
    [native code]
}, getWebExposedLocales:function getWebExposedLocales() {
    [native code]
}, requestAnimationFrame:function requestAnimationFrame() {
    [native code]
}, cancelAnimationFrame:function cancelAnimationFrame() {
    [native code]
}, reportError:function reportError() {
    [native code]
}, btoa:function btoa() {
    [native code]
}, atob:function atob() {
    [native code]
}, setTimeout:function setTimeout() {
    [native code]
}, clearTimeout:function clearTimeout() {
    [native code]
}, setInterval:function setInterval() {
    [native code]
}, clearInterval:function clearInterval() {
    [native code]
}, queueMicrotask:function queueMicrotask() {
    [native code]
}, createImageBitmap:function createImageBitmap() {
    [native code]
}, structuredClone:function structuredClone() {
    [native code]
}, fetch:function fetch() {
    [native code]
}, get self() {
    [native code]
}, set self() {
    [native code]
}, get name() {
    [native code]
}, set name() {
    [native code]
}, get history() {
    [native code]
}, get customElements() {
    [native code]
}, get locationbar() {
    [native code]
}, set locationbar() {
    [native code]
}, get menubar() {
    [native code]
}, set menubar() {
    [native code]
}, get personalbar() {
    [native code]
}, set personalbar() {
    [native code]
}, get scrollbars() {
    [native code]
}, set scrollbars() {
    [native code]
}, get statusbar() {
    [native code]
}, set statusbar() {
    [native code]
}, get toolbar() {
    [native code]
}, set toolbar() {
    [native code]
}, get status() {
    [native code]
}, set status() {
    [native code]
}, get closed() {
    [native code]
}, get event() {
    [native code]
}, set event() {
    [native code]
}, get frames() {
    [native code]
}, set frames() {
    [native code]
}, get length() {
    [native code]
}, set length() {
    [native code]
}, get opener() {
    [native code]
}, set opener() {
    [native code]
}, get parent() {
    [native code]
}, set parent() {
    [native code]
}, get frameElement() {
    [native code]
}, get navigator() {
    [native code]
}, get clientInformation() {
    [native code]
}, get external() {
    [native code]
}, set external() {
    [native code]
}, get applicationCache() {
    [native code]
}, get screen() {
    [native code]
}, set screen() {
    [native code]
}, get innerWidth() {
    [native code]
}, set innerWidth() {
    [native code]
}, get innerHeight() {
    [native code]
}, set innerHeight() {
    [native code]
}, get scrollX() {
    [native code]
}, set scrollX() {
    [native code]
}, get pageXOffset() {
    [native code]
}, set pageXOffset() {
    [native code]
}, get scrollY() {
    [native code]
}, set scrollY() {
    [native code]
}, get pageYOffset() {
    [native code]
}, set pageYOffset() {
    [native code]
}, get screenLeft() {
    [native code]
}, set screenLeft() {
    [native code]
}, get screenTop() {
    [native code]
}, set screenTop() {
    [native code]
}, get screenX() {
    [native code]
}, set screenX() {
    [native code]
}, get screenY() {
    [native code]
}, set screenY() {
    [native code]
}, get outerWidth() {
    [native code]
}, set outerWidth() {
    [native code]
}, get outerHeight() {
    [native code]
}, set outerHeight() {
    [native code]
}, get performance() {
    [native code]
}, set performance() {
    [native code]
}, get mozInnerScreenX() {
    [native code]
}, get mozInnerScreenY() {
    [native code]
}, get devicePixelRatio() {
    [native code]
}, set devicePixelRatio() {
    [native code]
}, get scrollMaxX() {
    [native code]
}, set scrollMaxX() {
    [native code]
}, get scrollMaxY() {
    [native code]
}, set scrollMaxY() {
    [native code]
}, get fullScreen() {
    [native code]
}, set fullScreen() {
    [native code]
}, get ondevicemotion() {
    [native code]
}, set ondevicemotion() {
    [native code]
}, get ondeviceorientation() {
    [native code]
}, set ondeviceorientation() {
    [native code]
}, get onabsolutedeviceorientation() {
    [native code]
}, set onabsolutedeviceorientation() {
    [native code]
}, get InstallTrigger() {
    [native code]
}, set InstallTrigger() {
    [native code]
}, get intlUtils() {
    [native code]
}, get visualViewport() {
    [native code]
}, set visualViewport() {
    [native code]
}, get crypto() {
    [native code]
}, get onabort() {
    [native code]
}, set onabort() {
    [native code]
}, get onblur() {
    [native code]
}, set onblur() {
    [native code]
}, get onfocus() {
    [native code]
}, set onfocus() {
    [native code]
}, get onauxclick() {
    [native code]
}, set onauxclick() {
    [native code]
}, get onbeforeinput() {
    [native code]
}, set onbeforeinput() {
    [native code]
}, get oncanplay() {
    [native code]
}, set oncanplay() {
    [native code]
}, get oncanplaythrough() {
    [native code]
}, set oncanplaythrough() {
    [native code]
}, get onchange() {
    [native code]
}, set onchange() {
    [native code]
}, get onclick() {
    [native code]
}, set onclick() {
    [native code]
}, get onclose() {
    [native code]
}, set onclose() {
    [native code]
}, get oncontextmenu() {
    [native code]
}, set oncontextmenu() {
    [native code]
}, get oncuechange() {
    [native code]
}, set oncuechange() {
    [native code]
}, get ondblclick() {
    [native code]
}, set ondblclick() {
    [native code]
}, get ondrag() {
    [native code]
}, set ondrag() {
    [native code]
}, get ondragend() {
    [native code]
}, set ondragend() {
    [native code]
}, get ondragenter() {
    [native code]
}, set ondragenter() {
    [native code]
}, get ondragexit() {
    [native code]
}, set ondragexit() {
    [native code]
}, get ondragleave() {
    [native code]
}, set ondragleave() {
    [native code]
}, get ondragover() {
    [native code]
}, set ondragover() {
    [native code]
}, get ondragstart() {
    [native code]
}, set ondragstart() {
    [native code]
}, get ondrop() {
    [native code]
}, set ondrop() {
    [native code]
}, get ondurationchange() {
    [native code]
}, set ondurationchange() {
    [native code]
}, get onemptied() {
    [native code]
}, set onemptied() {
    [native code]
}, get onended() {
    [native code]
}, set onended() {
    [native code]
}, get onformdata() {
    [native code]
}, set onformdata() {
    [native code]
}, get oninput() {
    [native code]
}, set oninput() {
    [native code]
}, get oninvalid() {
    [native code]
}, set oninvalid() {
    [native code]
}, get onkeydown() {
    [native code]
}, set onkeydown() {
    [native code]
}, get onkeypress() {
    [native code]
}, set onkeypress() {
    [native code]
}, get onkeyup() {
    [native code]
}, set onkeyup() {
    [native code]
}, get onload() {
    [native code]
}, set onload() {
    [native code]
}, get onloadeddata() {
    [native code]
}, set onloadeddata() {
    [native code]
}, get onloadedmetadata() {
    [native code]
}, set onloadedmetadata() {
    [native code]
}, get onloadend() {
    [native code]
}, set onloadend() {
    [native code]
}, get onloadstart() {
    [native code]
}, set onloadstart() {
    [native code]
}, get onmousedown() {
    [native code]
}, set onmousedown() {
    [native code]
}, get onmouseenter() {
    [native code]
}, set onmouseenter() {
    [native code]
}, get onmouseleave() {
    [native code]
}, set onmouseleave() {
    [native code]
}, get onmousemove() {
    [native code]
}, set onmousemove() {
    [native code]
}, get onmouseout() {
    [native code]
}, set onmouseout() {
    [native code]
}, get onmouseover() {
    [native code]
}, set onmouseover() {
    [native code]
}, get onmouseup() {
    [native code]
}, set onmouseup() {
    [native code]
}, get onwheel() {
    [native code]
}, set onwheel() {
    [native code]
}, get onpause() {
    [native code]
}, set onpause() {
    [native code]
}, get onplay() {
    [native code]
}, set onplay() {
    [native code]
}, get onplaying() {
    [native code]
}, set onplaying() {
    [native code]
}, get onprogress() {
    [native code]
}, set onprogress() {
    [native code]
}, get onratechange() {
    [native code]
}, set onratechange() {
    [native code]
}, get onreset() {
    [native code]
}, set onreset() {
    [native code]
}, get onresize() {
    [native code]
}, set onresize() {
    [native code]
}, get onscroll() {
    [native code]
}, set onscroll() {
    [native code]
}, get onsecuritypolicyviolation() {
    [native code]
}, set onsecuritypolicyviolation() {
    [native code]
}, get onseeked() {
    [native code]
}, set onseeked() {
    [native code]
}, get onseeking() {
    [native code]
}, set onseeking() {
    [native code]
}, get onselect() {
    [native code]
}, set onselect() {
    [native code]
}, get onslotchange() {
    [native code]
}, set onslotchange() {
    [native code]
}, get onstalled() {
    [native code]
}, set onstalled() {
    [native code]
}, get onsubmit() {
    [native code]
}, set onsubmit() {
    [native code]
}, get onsuspend() {
    [native code]
}, set onsuspend() {
    [native code]
}, get ontimeupdate() {
    [native code]
}, set ontimeupdate() {
    [native code]
}, get onvolumechange() {
    [native code]
}, set onvolumechange() {
    [native code]
}, get onwaiting() {
    [native code]
}, set onwaiting() {
    [native code]
}, get onselectstart() {
    [native code]
}, set onselectstart() {
    [native code]
}, get onselectionchange() {
    [native code]
}, set onselectionchange() {
    [native code]
}, get ontoggle() {
    [native code]
}, set ontoggle() {
    [native code]
}, get onpointercancel() {
    [native code]
}, set onpointercancel() {
    [native code]
}, get onpointerdown() {
    [native code]
}, set onpointerdown() {
    [native code]
}, get onpointerup() {
    [native code]
}, set onpointerup() {
    [native code]
}, get onpointermove() {
    [native code]
}, set onpointermove() {
    [native code]
}, get onpointerout() {
    [native code]
}, set onpointerout() {
    [native code]
}, get onpointerover() {
    [native code]
}, set onpointerover() {
    [native code]
}, get onpointerenter() {
    [native code]
}, set onpointerenter() {
    [native code]
}, get onpointerleave() {
    [native code]
}, set onpointerleave() {
    [native code]
}, get ongotpointercapture() {
    [native code]
}, set ongotpointercapture() {
    [native code]
}, get onlostpointercapture() {
    [native code]
}, set onlostpointercapture() {
    [native code]
}, get onmozfullscreenchange() {
    [native code]
}, set onmozfullscreenchange() {
    [native code]
}, get onmozfullscreenerror() {
    [native code]
}, set onmozfullscreenerror() {
    [native code]
}, get onanimationcancel() {
    [native code]
}, set onanimationcancel() {
    [native code]
}, get onanimationend() {
    [native code]
}, set onanimationend() {
    [native code]
}, get onanimationiteration() {
    [native code]
}, set onanimationiteration() {
    [native code]
}, get onanimationstart() {
    [native code]
}, set onanimationstart() {
    [native code]
}, get ontransitioncancel() {
    [native code]
}, set ontransitioncancel() {
    [native code]
}, get ontransitionend() {
    [native code]
}, set ontransitionend() {
    [native code]
}, get ontransitionrun() {
    [native code]
}, set ontransitionrun() {
    [native code]
}, get ontransitionstart() {
    [native code]
}, set ontransitionstart() {
    [native code]
}, get onwebkitanimationend() {
    [native code]
}, set onwebkitanimationend() {
    [native code]
}, get onwebkitanimationiteration() {
    [native code]
}, set onwebkitanimationiteration() {
    [native code]
}, get onwebkitanimationstart() {
    [native code]
}, set onwebkitanimationstart() {
    [native code]
}, get onwebkittransitionend() {
    [native code]
}, set onwebkittransitionend() {
    [native code]
}, get u2f() {
    [native code]
}, set u2f() {
    [native code]
}, get onerror() {
    [native code]
}, set onerror() {
    [native code]
}, get speechSynthesis() {
    [native code]
}, get onafterprint() {
    [native code]
}, set onafterprint() {
    [native code]
}, get onbeforeprint() {
    [native code]
}, set onbeforeprint() {
    [native code]
}, get onbeforeunload() {
    [native code]
}, set onbeforeunload() {
    [native code]
}, get onhashchange() {
    [native code]
}, set onhashchange() {
    [native code]
}, get onlanguagechange() {
    [native code]
}, set onlanguagechange() {
    [native code]
}, get onmessage() {
    [native code]
}, set onmessage() {
    [native code]
}, get onmessageerror() {
    [native code]
}, set onmessageerror() {
    [native code]
}, get onoffline() {
    [native code]
}, set onoffline() {
    [native code]
}, get ononline() {
    [native code]
}, set ononline() {
    [native code]
}, get onpagehide() {
    [native code]
}, set onpagehide() {
    [native code]
}, get onpageshow() {
    [native code]
}, set onpageshow() {
    [native code]
}, get onpopstate() {
    [native code]
}, set onpopstate() {
    [native code]
}, get onrejectionhandled() {
    [native code]
}, set onrejectionhandled() {
    [native code]
}, get onstorage() {
    [native code]
}, set onstorage() {
    [native code]
}, get onunhandledrejection() {
    [native code]
}, set onunhandledrejection() {
    [native code]
}, get onunload() {
    [native code]
}, set onunload() {
    [native code]
}, get ongamepadconnected() {
    [native code]
}, set ongamepadconnected() {
    [native code]
}, get ongamepaddisconnected() {
    [native code]
}, set ongamepaddisconnected() {
    [native code]
}, get localStorage() {
    [native code]
}, get origin() {
    [native code]
}, set origin() {
    [native code]
}, get crossOriginIsolated() {
    [native code]
}, get isSecureContext() {
    [native code]
}, get indexedDB() {
    [native code]
}, get caches() {
    [native code]
}, get sessionStorage() {
    [native code]
}, mozScrollSnap:function mozScrollSnap() {
    [native code]
}, openDialog:function openDialog() {
    [native code]
}, getInterface:function getInterface() {
    [native code]
}, shouldReportForServiceWorkerScope:function shouldReportForServiceWorkerScope() {
    [native code]
}, setScrollMarks:function setScrollMarks() {
    [native code]
}, get controllers() {
    [native code]
}, set controllers() {
    [native code]
}, get realFrameElement() {
    [native code]
}, get docShell() {
    [native code]
}, get browsingContext() {
    [native code]
}, get desktopToDeviceScale() {
    [native code]
}, get scrollMinX() {
    [native code]
}, get scrollMinY() {
    [native code]
}, get windowRoot() {
    [native code]
}, get windowUtils() {
    [native code]
}, get windowGlobalChild() {
    [native code]
}, get clientPrincipal() {
    [native code]
}, get isChromeWindow() {
    [native code]
}, get Glean() {
    [native code]
}, get GleanPings() {
    [native code]
}}, isPrivate:false, followWindowGlobalLifeCycle:true, isTopLevelTarget:false, ignoreSubFrames:true, sessionContext:{type:"browser-element", browserId:7, isServerTargetSwitchingEnabled:true, isPopupDebuggingEnabled:false, supportedTargets:{frame:true, process:true, worker:true}, supportedResources:{'console-message':true, 'css-change':true, 'css-message':true, 'document-event':true, Cache:true, cookies:true, 'error-message':true, 'indexed-db':true, 'local-storage':true, 'session-storage':true, 'platform-message':true, 'network-event':true, 'network-event-stacktrace':true, reflow:true, stylesheet:true, source:true, 'thread-state':true, 'server-sent-event':true, websocket:true}}, _extraActors:{consoleActor:{_options:{id:"devtools/server/actors/webconsole", prefix:"console", constructorName:"WebConsoleActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"consoleActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"consoleActor", actorID:"server0.conn0.windowGlobal4294967801/consoleActor3", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, inspectorActor:{_options:{id:"devtools/server/actors/inspector/inspector", prefix:"inspector", constructorName:"InspectorActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"inspectorActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"inspectorActor", actorID:"server0.conn0.windowGlobal4294967801/inspectorActor4", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, styleSheetsActor:{_options:{id:"devtools/server/actors/style-sheets", prefix:"styleSheets", constructorName:"StyleSheetsActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"styleSheetsActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"styleSheetsActor", actorID:"server0.conn0.windowGlobal4294967801/styleSheetsActor5", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, storageActor:{_options:{id:"devtools/server/actors/storage", prefix:"storage", constructorName:"StorageActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"storageActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"storageActor", actorID:"server0.conn0.windowGlobal4294967801/storageActor6", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, memoryActor:{_options:{id:"devtools/server/actors/memory", prefix:"memory", constructorName:"MemoryActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"memoryActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"memoryActor", actorID:"server0.conn0.windowGlobal4294967801/memoryActor7", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, reflowActor:{_options:{id:"devtools/server/actors/reflow", prefix:"reflow", constructorName:"ReflowActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"reflowActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"reflowActor", actorID:"server0.conn0.windowGlobal4294967801/reflowActor8", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, cssPropertiesActor:{_options:{id:"devtools/server/actors/css-properties", prefix:"cssProperties", constructorName:"CssPropertiesActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"cssPropertiesActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"cssPropertiesActor", actorID:"server0.conn0.windowGlobal4294967801/cssPropertiesActor9", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, animationsActor:{_options:{id:"devtools/server/actors/animation", prefix:"animations", constructorName:"AnimationsActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"animationsActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"animationsActor", actorID:"server0.conn0.windowGlobal4294967801/animationsActor10", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, responsiveActor:{_options:{id:"devtools/server/actors/emulation/responsive", prefix:"responsive", constructorName:"ResponsiveActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"responsiveActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"responsiveActor", actorID:"server0.conn0.windowGlobal4294967801/responsiveActor11", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, webExtensionInspectedWindowActor:{_options:{id:"devtools/server/actors/addon/webextension-inspected-window", prefix:"webExtensionInspectedWindow", constructorName:"WebExtensionInspectedWindowActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"webExtensionInspectedWindowActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"webExtensionInspectedWindowActor", actorID:"server0.conn0.windowGlobal4294967801/webExtensionInspectedWindowActor12", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, accessibilityActor:{_options:{id:"devtools/server/actors/accessibility/accessibility", prefix:"accessibility", constructorName:"AccessibilityActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"accessibilityActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"accessibilityActor", actorID:"server0.conn0.windowGlobal4294967801/accessibilityActor13", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, changesActor:{_options:{id:"devtools/server/actors/changes", prefix:"changes", constructorName:"ChangesActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"changesActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"changesActor", actorID:"server0.conn0.windowGlobal4294967801/changesActor14", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, webSocketActor:{_options:{id:"devtools/server/actors/network-monitor/websocket-actor", prefix:"webSocket", constructorName:"WebSocketActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"webSocketActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"webSocketActor", actorID:"server0.conn0.windowGlobal4294967801/webSocketActor15", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, eventSourceActor:{_options:{id:"devtools/server/actors/network-monitor/eventsource-actor", prefix:"eventSource", constructorName:"EventSourceActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"eventSourceActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"eventSourceActor", actorID:"server0.conn0.windowGlobal4294967801/eventSourceActor16", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, manifestActor:{_options:{id:"devtools/server/actors/manifest", prefix:"manifest", constructorName:"ManifestActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"manifestActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"manifestActor", actorID:"server0.conn0.windowGlobal4294967801/manifestActor17", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, networkContentActor:{_options:{id:"devtools/server/actors/network-monitor/network-content", prefix:"networkContent", constructorName:"NetworkContentActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"networkContentActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"networkContentActor", actorID:"server0.conn0.windowGlobal4294967801/networkContentActor18", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}, screenshotContentActor:{_options:{id:"devtools/server/actors/screenshot-content", prefix:"screenshotContent", constructorName:"ScreenshotContentActor", type:{target:true}, globalActor:(void 0), targetScopedActor:true}, _parentActor:{}, _name:"screenshotContentActor", _pool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, typeName:"screenshotContentActor", actorID:"server0.conn0.windowGlobal4294967801/screenshotContentActor19", parentPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}}}, _sourcesManager:{_thread:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, actorID:"server0.conn0.windowGlobal4294967801/thread1", _actorSpec:{typeName:"thread", methods:[{name:"attach", request:{type:"attach", template:{type:"attach", options:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, args:[{placeholder:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reconfigure", request:{type:"reconfigure", template:{type:"reconfigure", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"resume", request:{type:"resume", template:{type:"resume", resumeLimit:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, frameActorID:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["resumeLimit"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["frameActorID"]}]}, response:{template:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"frames", request:{type:"frames", template:{type:"frames", start:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, count:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["start"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["count"]}]}, response:{template:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"interrupt", request:{type:"interrupt", template:{type:"interrupt", when:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["when"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"sources", request:{type:"sources", template:{type:"sources"}, args:[]}, response:{template:{sources:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["sources"]}, release:(void 0), oneway:(void 0)}, {name:"skipBreakpoints", request:{type:"skipBreakpoints", template:{type:"skipBreakpoints", skip:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["skip"]}]}, response:{template:{skip:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}}, release:(void 0), oneway:(void 0)}, {name:"dumpThread", request:{type:"dumpThread", template:{type:"dumpThread"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"dumpPools", request:{type:"dumpPools", template:{type:"dumpPools"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"setBreakpoint", request:{type:"setBreakpoint", template:{type:"setBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, options:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"removeBreakpoint", request:{type:"removeBreakpoint", template:{type:"removeBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"setXHRBreakpoint", request:{type:"setXHRBreakpoint", template:{type:"setXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"removeXHRBreakpoint", request:{type:"removeXHRBreakpoint", template:{type:"removeXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getAvailableEventBreakpoints", request:{type:"getAvailableEventBreakpoints", template:{type:"getAvailableEventBreakpoints"}, args:[]}, response:{template:{value:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getActiveEventBreakpoints", request:{type:"getActiveEventBreakpoints", template:{type:"getActiveEventBreakpoints"}, args:[]}, response:{template:{ids:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}, release:(void 0), oneway:(void 0)}, {name:"setActiveEventBreakpoints", request:{type:"setActiveEventBreakpoints", template:{type:"setActiveEventBreakpoints", ids:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"pauseOnExceptions", request:{type:"pauseOnExceptions", template:{type:"pauseOnExceptions", pauseOnExceptions:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, ignoreCaughtExceptions:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["pauseOnExceptions"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ignoreCaughtExceptions"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"toggleEventLogging", request:{type:"toggleEventLogging", template:{type:"toggleEventLogging", logEventBreakpoints:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["logEventBreakpoints"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"isAttached", request:{type:"isAttached", template:{type:"isAttached"}, args:[]}, response:{template:{value:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, retVal:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["value"]}, release:(void 0), oneway:(void 0)}], events:{}}, _state:"running", _parent:{}, global:{get window() {
    [native code]
}, get document() {
    [native code]
}, get location() {
    [native code]
}, set location() {
    [native code]
}, get top() {
    [native code]
}, close:function close() {
    [native code]
}, stop:function stop() {
    [native code]
}, focus:function focus() {
    [native code]
}, blur:function blur() {
    [native code]
}, open:function open() {
    [native code]
}, alert:function alert() {
    [native code]
}, confirm:function confirm() {
    [native code]
}, prompt:function prompt() {
    [native code]
}, print:function print() {
    [native code]
}, printPreview:function printPreview() {
    [native code]
}, postMessage:function postMessage() {
    [native code]
}, captureEvents:function captureEvents() {
    [native code]
}, releaseEvents:function releaseEvents() {
    [native code]
}, getSelection:function getSelection() {
    [native code]
}, getComputedStyle:function getComputedStyle() {
    [native code]
}, matchMedia:function matchMedia() {
    [native code]
}, moveTo:function moveTo() {
    [native code]
}, moveBy:function moveBy() {
    [native code]
}, resizeTo:function resizeTo() {
    [native code]
}, resizeBy:function resizeBy() {
    [native code]
}, scroll:function scroll() {
    [native code]
}, scrollTo:function scrollTo() {
    [native code]
}, scrollBy:function scrollBy() {
    [native code]
}, getDefaultComputedStyle:function getDefaultComputedStyle() {
    [native code]
}, scrollByLines:function scrollByLines() {
    [native code]
}, scrollByPages:function scrollByPages() {
    [native code]
}, sizeToContent:function sizeToContent() {
    [native code]
}, updateCommands:function updateCommands() {
    [native code]
}, find:function find() {
    [native code]
}, dump:function dump() {
    [native code]
}, setResizable:function setResizable() {
    [native code]
}, requestIdleCallback:function requestIdleCallback() {
    [native code]
}, cancelIdleCallback:function cancelIdleCallback() {
    [native code]
}, getRegionalPrefsLocales:function getRegionalPrefsLocales() {
    [native code]
}, getWebExposedLocales:function getWebExposedLocales() {
    [native code]
}, requestAnimationFrame:function requestAnimationFrame() {
    [native code]
}, cancelAnimationFrame:function cancelAnimationFrame() {
    [native code]
}, reportError:function reportError() {
    [native code]
}, btoa:function btoa() {
    [native code]
}, atob:function atob() {
    [native code]
}, setTimeout:function setTimeout() {
    [native code]
}, clearTimeout:function clearTimeout() {
    [native code]
}, setInterval:function setInterval() {
    [native code]
}, clearInterval:function clearInterval() {
    [native code]
}, queueMicrotask:function queueMicrotask() {
    [native code]
}, createImageBitmap:function createImageBitmap() {
    [native code]
}, structuredClone:function structuredClone() {
    [native code]
}, fetch:function fetch() {
    [native code]
}, get self() {
    [native code]
}, set self() {
    [native code]
}, get name() {
    [native code]
}, set name() {
    [native code]
}, get history() {
    [native code]
}, get customElements() {
    [native code]
}, get locationbar() {
    [native code]
}, set locationbar() {
    [native code]
}, get menubar() {
    [native code]
}, set menubar() {
    [native code]
}, get personalbar() {
    [native code]
}, set personalbar() {
    [native code]
}, get scrollbars() {
    [native code]
}, set scrollbars() {
    [native code]
}, get statusbar() {
    [native code]
}, set statusbar() {
    [native code]
}, get toolbar() {
    [native code]
}, set toolbar() {
    [native code]
}, get status() {
    [native code]
}, set status() {
    [native code]
}, get closed() {
    [native code]
}, get event() {
    [native code]
}, set event() {
    [native code]
}, get frames() {
    [native code]
}, set frames() {
    [native code]
}, get length() {
    [native code]
}, set length() {
    [native code]
}, get opener() {
    [native code]
}, set opener() {
    [native code]
}, get parent() {
    [native code]
}, set parent() {
    [native code]
}, get frameElement() {
    [native code]
}, get navigator() {
    [native code]
}, get clientInformation() {
    [native code]
}, get external() {
    [native code]
}, set external() {
    [native code]
}, get applicationCache() {
    [native code]
}, get screen() {
    [native code]
}, set screen() {
    [native code]
}, get innerWidth() {
    [native code]
}, set innerWidth() {
    [native code]
}, get innerHeight() {
    [native code]
}, set innerHeight() {
    [native code]
}, get scrollX() {
    [native code]
}, set scrollX() {
    [native code]
}, get pageXOffset() {
    [native code]
}, set pageXOffset() {
    [native code]
}, get scrollY() {
    [native code]
}, set scrollY() {
    [native code]
}, get pageYOffset() {
    [native code]
}, set pageYOffset() {
    [native code]
}, get screenLeft() {
    [native code]
}, set screenLeft() {
    [native code]
}, get screenTop() {
    [native code]
}, set screenTop() {
    [native code]
}, get screenX() {
    [native code]
}, set screenX() {
    [native code]
}, get screenY() {
    [native code]
}, set screenY() {
    [native code]
}, get outerWidth() {
    [native code]
}, set outerWidth() {
    [native code]
}, get outerHeight() {
    [native code]
}, set outerHeight() {
    [native code]
}, get performance() {
    [native code]
}, set performance() {
    [native code]
}, get mozInnerScreenX() {
    [native code]
}, get mozInnerScreenY() {
    [native code]
}, get devicePixelRatio() {
    [native code]
}, set devicePixelRatio() {
    [native code]
}, get scrollMaxX() {
    [native code]
}, set scrollMaxX() {
    [native code]
}, get scrollMaxY() {
    [native code]
}, set scrollMaxY() {
    [native code]
}, get fullScreen() {
    [native code]
}, set fullScreen() {
    [native code]
}, get ondevicemotion() {
    [native code]
}, set ondevicemotion() {
    [native code]
}, get ondeviceorientation() {
    [native code]
}, set ondeviceorientation() {
    [native code]
}, get onabsolutedeviceorientation() {
    [native code]
}, set onabsolutedeviceorientation() {
    [native code]
}, get InstallTrigger() {
    [native code]
}, set InstallTrigger() {
    [native code]
}, get intlUtils() {
    [native code]
}, get visualViewport() {
    [native code]
}, set visualViewport() {
    [native code]
}, get crypto() {
    [native code]
}, get onabort() {
    [native code]
}, set onabort() {
    [native code]
}, get onblur() {
    [native code]
}, set onblur() {
    [native code]
}, get onfocus() {
    [native code]
}, set onfocus() {
    [native code]
}, get onauxclick() {
    [native code]
}, set onauxclick() {
    [native code]
}, get onbeforeinput() {
    [native code]
}, set onbeforeinput() {
    [native code]
}, get oncanplay() {
    [native code]
}, set oncanplay() {
    [native code]
}, get oncanplaythrough() {
    [native code]
}, set oncanplaythrough() {
    [native code]
}, get onchange() {
    [native code]
}, set onchange() {
    [native code]
}, get onclick() {
    [native code]
}, set onclick() {
    [native code]
}, get onclose() {
    [native code]
}, set onclose() {
    [native code]
}, get oncontextmenu() {
    [native code]
}, set oncontextmenu() {
    [native code]
}, get oncuechange() {
    [native code]
}, set oncuechange() {
    [native code]
}, get ondblclick() {
    [native code]
}, set ondblclick() {
    [native code]
}, get ondrag() {
    [native code]
}, set ondrag() {
    [native code]
}, get ondragend() {
    [native code]
}, set ondragend() {
    [native code]
}, get ondragenter() {
    [native code]
}, set ondragenter() {
    [native code]
}, get ondragexit() {
    [native code]
}, set ondragexit() {
    [native code]
}, get ondragleave() {
    [native code]
}, set ondragleave() {
    [native code]
}, get ondragover() {
    [native code]
}, set ondragover() {
    [native code]
}, get ondragstart() {
    [native code]
}, set ondragstart() {
    [native code]
}, get ondrop() {
    [native code]
}, set ondrop() {
    [native code]
}, get ondurationchange() {
    [native code]
}, set ondurationchange() {
    [native code]
}, get onemptied() {
    [native code]
}, set onemptied() {
    [native code]
}, get onended() {
    [native code]
}, set onended() {
    [native code]
}, get onformdata() {
    [native code]
}, set onformdata() {
    [native code]
}, get oninput() {
    [native code]
}, set oninput() {
    [native code]
}, get oninvalid() {
    [native code]
}, set oninvalid() {
    [native code]
}, get onkeydown() {
    [native code]
}, set onkeydown() {
    [native code]
}, get onkeypress() {
    [native code]
}, set onkeypress() {
    [native code]
}, get onkeyup() {
    [native code]
}, set onkeyup() {
    [native code]
}, get onload() {
    [native code]
}, set onload() {
    [native code]
}, get onloadeddata() {
    [native code]
}, set onloadeddata() {
    [native code]
}, get onloadedmetadata() {
    [native code]
}, set onloadedmetadata() {
    [native code]
}, get onloadend() {
    [native code]
}, set onloadend() {
    [native code]
}, get onloadstart() {
    [native code]
}, set onloadstart() {
    [native code]
}, get onmousedown() {
    [native code]
}, set onmousedown() {
    [native code]
}, get onmouseenter() {
    [native code]
}, set onmouseenter() {
    [native code]
}, get onmouseleave() {
    [native code]
}, set onmouseleave() {
    [native code]
}, get onmousemove() {
    [native code]
}, set onmousemove() {
    [native code]
}, get onmouseout() {
    [native code]
}, set onmouseout() {
    [native code]
}, get onmouseover() {
    [native code]
}, set onmouseover() {
    [native code]
}, get onmouseup() {
    [native code]
}, set onmouseup() {
    [native code]
}, get onwheel() {
    [native code]
}, set onwheel() {
    [native code]
}, get onpause() {
    [native code]
}, set onpause() {
    [native code]
}, get onplay() {
    [native code]
}, set onplay() {
    [native code]
}, get onplaying() {
    [native code]
}, set onplaying() {
    [native code]
}, get onprogress() {
    [native code]
}, set onprogress() {
    [native code]
}, get onratechange() {
    [native code]
}, set onratechange() {
    [native code]
}, get onreset() {
    [native code]
}, set onreset() {
    [native code]
}, get onresize() {
    [native code]
}, set onresize() {
    [native code]
}, get onscroll() {
    [native code]
}, set onscroll() {
    [native code]
}, get onsecuritypolicyviolation() {
    [native code]
}, set onsecuritypolicyviolation() {
    [native code]
}, get onseeked() {
    [native code]
}, set onseeked() {
    [native code]
}, get onseeking() {
    [native code]
}, set onseeking() {
    [native code]
}, get onselect() {
    [native code]
}, set onselect() {
    [native code]
}, get onslotchange() {
    [native code]
}, set onslotchange() {
    [native code]
}, get onstalled() {
    [native code]
}, set onstalled() {
    [native code]
}, get onsubmit() {
    [native code]
}, set onsubmit() {
    [native code]
}, get onsuspend() {
    [native code]
}, set onsuspend() {
    [native code]
}, get ontimeupdate() {
    [native code]
}, set ontimeupdate() {
    [native code]
}, get onvolumechange() {
    [native code]
}, set onvolumechange() {
    [native code]
}, get onwaiting() {
    [native code]
}, set onwaiting() {
    [native code]
}, get onselectstart() {
    [native code]
}, set onselectstart() {
    [native code]
}, get onselectionchange() {
    [native code]
}, set onselectionchange() {
    [native code]
}, get ontoggle() {
    [native code]
}, set ontoggle() {
    [native code]
}, get onpointercancel() {
    [native code]
}, set onpointercancel() {
    [native code]
}, get onpointerdown() {
    [native code]
}, set onpointerdown() {
    [native code]
}, get onpointerup() {
    [native code]
}, set onpointerup() {
    [native code]
}, get onpointermove() {
    [native code]
}, set onpointermove() {
    [native code]
}, get onpointerout() {
    [native code]
}, set onpointerout() {
    [native code]
}, get onpointerover() {
    [native code]
}, set onpointerover() {
    [native code]
}, get onpointerenter() {
    [native code]
}, set onpointerenter() {
    [native code]
}, get onpointerleave() {
    [native code]
}, set onpointerleave() {
    [native code]
}, get ongotpointercapture() {
    [native code]
}, set ongotpointercapture() {
    [native code]
}, get onlostpointercapture() {
    [native code]
}, set onlostpointercapture() {
    [native code]
}, get onmozfullscreenchange() {
    [native code]
}, set onmozfullscreenchange() {
    [native code]
}, get onmozfullscreenerror() {
    [native code]
}, set onmozfullscreenerror() {
    [native code]
}, get onanimationcancel() {
    [native code]
}, set onanimationcancel() {
    [native code]
}, get onanimationend() {
    [native code]
}, set onanimationend() {
    [native code]
}, get onanimationiteration() {
    [native code]
}, set onanimationiteration() {
    [native code]
}, get onanimationstart() {
    [native code]
}, set onanimationstart() {
    [native code]
}, get ontransitioncancel() {
    [native code]
}, set ontransitioncancel() {
    [native code]
}, get ontransitionend() {
    [native code]
}, set ontransitionend() {
    [native code]
}, get ontransitionrun() {
    [native code]
}, set ontransitionrun() {
    [native code]
}, get ontransitionstart() {
    [native code]
}, set ontransitionstart() {
    [native code]
}, get onwebkitanimationend() {
    [native code]
}, set onwebkitanimationend() {
    [native code]
}, get onwebkitanimationiteration() {
    [native code]
}, set onwebkitanimationiteration() {
    [native code]
}, get onwebkitanimationstart() {
    [native code]
}, set onwebkitanimationstart() {
    [native code]
}, get onwebkittransitionend() {
    [native code]
}, set onwebkittransitionend() {
    [native code]
}, get u2f() {
    [native code]
}, set u2f() {
    [native code]
}, get onerror() {
    [native code]
}, set onerror() {
    [native code]
}, get speechSynthesis() {
    [native code]
}, get onafterprint() {
    [native code]
}, set onafterprint() {
    [native code]
}, get onbeforeprint() {
    [native code]
}, set onbeforeprint() {
    [native code]
}, get onbeforeunload() {
    [native code]
}, set onbeforeunload() {
    [native code]
}, get onhashchange() {
    [native code]
}, set onhashchange() {
    [native code]
}, get onlanguagechange() {
    [native code]
}, set onlanguagechange() {
    [native code]
}, get onmessage() {
    [native code]
}, set onmessage() {
    [native code]
}, get onmessageerror() {
    [native code]
}, set onmessageerror() {
    [native code]
}, get onoffline() {
    [native code]
}, set onoffline() {
    [native code]
}, get ononline() {
    [native code]
}, set ononline() {
    [native code]
}, get onpagehide() {
    [native code]
}, set onpagehide() {
    [native code]
}, get onpageshow() {
    [native code]
}, set onpageshow() {
    [native code]
}, get onpopstate() {
    [native code]
}, set onpopstate() {
    [native code]
}, get onrejectionhandled() {
    [native code]
}, set onrejectionhandled() {
    [native code]
}, get onstorage() {
    [native code]
}, set onstorage() {
    [native code]
}, get onunhandledrejection() {
    [native code]
}, set onunhandledrejection() {
    [native code]
}, get onunload() {
    [native code]
}, set onunload() {
    [native code]
}, get ongamepadconnected() {
    [native code]
}, set ongamepadconnected() {
    [native code]
}, get ongamepaddisconnected() {
    [native code]
}, set ongamepaddisconnected() {
    [native code]
}, get localStorage() {
    [native code]
}, get origin() {
    [native code]
}, set origin() {
    [native code]
}, get crossOriginIsolated() {
    [native code]
}, get isSecureContext() {
    [native code]
}, get indexedDB() {
    [native code]
}, get caches() {
    [native code]
}, get sessionStorage() {
    [native code]
}, mozScrollSnap:function mozScrollSnap() {
    [native code]
}, openDialog:function openDialog() {
    [native code]
}, getInterface:function getInterface() {
    [native code]
}, shouldReportForServiceWorkerScope:function shouldReportForServiceWorkerScope() {
    [native code]
}, setScrollMarks:function setScrollMarks() {
    [native code]
}, get controllers() {
    [native code]
}, set controllers() {
    [native code]
}, get realFrameElement() {
    [native code]
}, get docShell() {
    [native code]
}, get browsingContext() {
    [native code]
}, get desktopToDeviceScale() {
    [native code]
}, get scrollMinX() {
    [native code]
}, get scrollMinY() {
    [native code]
}, get windowRoot() {
    [native code]
}, get windowUtils() {
    [native code]
}, get windowGlobalChild() {
    [native code]
}, get clientPrincipal() {
    [native code]
}, get isChromeWindow() {
    [native code]
}, get Glean() {
    [native code]
}, get GleanPings() {
    [native code]
}}, _options:{skipBreakpoints:false, pauseOnExceptions:false, ignoreCaughtExceptions:true, shouldShowOverlay:true, shouldIncludeSavedFrames:true, shouldIncludeAsyncLiveFrames:false, logEventBreakpoints:false, observeAsmJS:true}, _gripDepth:0, _parentClosed:false, _observingNetwork:false, _frameActors:[], _xhrBreakpoints:[], _dbg:{addDebuggees:(function() {
    for (const global of findDebuggees(this)) {
      safeAddDebuggee(this, global);
    }
  }), disable:(function() {
    dbg.removeAllDebuggees();
    dbg.onNewGlobalObject = undefined;
  }), enable:(function() {
    dbg.addDebuggees();
    dbg.onNewGlobalObject = onNewGlobalObject;
  }), onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}}, _threadLifetimePool:{__poolMap:{}, parentPool:null, conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, label:"thread", _isDestroyed:false, objectActors:{}}, _activeEventPause:null, _pauseOverlay:null, _priorPause:null, _activeEventBreakpoints:{}, _frameActorMap:{}, _debuggerSourcesSeen:{}, _onLoadBreakpointURLs:{}, _handledFrameExceptions:{}, _watchpointsMap:{threadActor:{}, _watchpoints:{}}, breakpointActorMap:{_threadActor:{}, _actors:{}}, _nestedEventLoop:{_thread:{}, _entered:false, _resolved:false}, onNewSourceEvent:function bound onNewSourceEvent() {
    [native code]
}, createCompletionGrip:function bound createCompletionGrip() {
    [native code]
}, onDebuggerStatement:function bound onDebuggerStatement() {
    [native code]
}, onNewScript:function bound onNewScript() {
    [native code]
}, objectGrip:function bound objectGrip() {
    [native code]
}, pauseObjectGrip:function bound pauseObjectGrip() {
    [native code]
}, _onOpeningRequest:function bound _onOpeningRequest() {
    [native code]
}, _onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}, _onExceptionUnwind:function bound _onExceptionUnwind() {
    [native code]
}, _eventBreakpointListener:function bound _eventBreakpointListener() {
    [native code]
}, _onWindowReady:function bound _onWindowReady() {
    [native code]
}, _onWillNavigate:function bound _onWillNavigate() {
    [native code]
}, _onNavigate:function bound _onNavigate() {
    [native code]
}, _firstStatementBreakpoint:null, _debuggerNotificationObserver:{}, parentPool:{}, alreadyAttached:true, wrappedJSObject:{}, _pendingResponse:{}, [Symbol("EventEmitter/listeners")]:{}}, blackBoxedSources:{}, _sourceActors:{}, _urlContents:{}, _urlWaiters:{}, _sourcesByInternalSourceId:null, [Symbol("EventEmitter/listeners")]:{}}, _styleSheetActors:{}, _shouldAddNewGlobalAsDebuggee:function bound _shouldAddNewGlobalAsDebuggee() {
    [native code]
}, makeDebugger:function bound makeDebugger() {
    [native code]
}, watchNewDocShells:false, _workerDescriptorActorList:null, _workerDescriptorActorPool:null, _onWorkerDescriptorActorListChanged:function bound _onWorkerDescriptorActorListChanged() {
    [native code]
}, _onConsoleApiProfilerEvent:function bound _onConsoleApiProfilerEvent() {
    [native code]
}, threadActor:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, actorID:"server0.conn0.windowGlobal4294967801/thread1", _actorSpec:{typeName:"thread", methods:[{name:"attach", request:{type:"attach", template:{type:"attach", options:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, args:[{placeholder:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"reconfigure", request:{type:"reconfigure", template:{type:"reconfigure", options:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"resume", request:{type:"resume", template:{type:"resume", resumeLimit:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, frameActorID:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["resumeLimit"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["frameActorID"]}]}, response:{template:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"nullable:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"frames", request:{type:"frames", template:{type:"frames", start:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, count:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["start"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["count"]}]}, response:{template:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"thread.frames", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"interrupt", request:{type:"interrupt", template:{type:"interrupt", when:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["when"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"sources", request:{type:"sources", template:{type:"sources"}, args:[]}, response:{template:{sources:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["sources"]}, release:(void 0), oneway:(void 0)}, {name:"skipBreakpoints", request:{type:"skipBreakpoints", template:{type:"skipBreakpoints", skip:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["skip"]}]}, response:{template:{skip:{index:0, type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"json", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}}, release:(void 0), oneway:(void 0)}, {name:"dumpThread", request:{type:"dumpThread", template:{type:"dumpThread"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"dumpPools", request:{type:"dumpPools", template:{type:"dumpPools"}, args:[]}, response:{template:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, retVal:{_type:"json", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:[]}, release:(void 0), oneway:(void 0)}, {name:"setBreakpoint", request:{type:"setBreakpoint", template:{type:"setBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, options:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["options"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"removeBreakpoint", request:{type:"removeBreakpoint", template:{type:"removeBreakpoint", location:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["location"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"setXHRBreakpoint", request:{type:"setXHRBreakpoint", template:{type:"setXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"removeXHRBreakpoint", request:{type:"removeXHRBreakpoint", template:{type:"removeXHRBreakpoint", path:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, method:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["path"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["method"]}]}, response:{template:{value:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"boolean", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getAvailableEventBreakpoints", request:{type:"getAvailableEventBreakpoints", template:{type:"getAvailableEventBreakpoints"}, args:[]}, response:{template:{value:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:available-breakpoint-group", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["value"]}, release:(void 0), oneway:(void 0)}, {name:"getActiveEventBreakpoints", request:{type:"getActiveEventBreakpoints", template:{type:"getActiveEventBreakpoints"}, args:[]}, response:{template:{ids:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, retVal:{_type:"array:string", get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}, release:(void 0), oneway:(void 0)}, {name:"setActiveEventBreakpoints", request:{type:"setActiveEventBreakpoints", template:{type:"setActiveEventBreakpoints", ids:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ids"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"pauseOnExceptions", request:{type:"pauseOnExceptions", template:{type:"pauseOnExceptions", pauseOnExceptions:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, ignoreCaughtExceptions:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["pauseOnExceptions"]}, {placeholder:{index:1, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["ignoreCaughtExceptions"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"toggleEventLogging", request:{type:"toggleEventLogging", template:{type:"toggleEventLogging", logEventBreakpoints:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}}, args:[{placeholder:{index:0, get type() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    }}, path:["logEventBreakpoints"]}]}, response:{template:{}}, release:(void 0), oneway:(void 0)}, {name:"isAttached", request:{type:"isAttached", template:{type:"isAttached"}, args:[]}, response:{template:{value:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}}, retVal:{_type:"boolean", type:{toString() {
        return "[protocol type:" + name + "]";
      }, name:"boolean", primitive:true, read:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}, write:function identityWrite(v) {
  if (v === undefined) {
    throw Error("undefined passed where a value is required");
  }
  // This has to handle iterator->array conversion because arrays of
  // primitive types pass through here.
  if (v && typeof v.next === "function") {
    return [...v];
  }
  return v;
}}}, path:["value"]}, release:(void 0), oneway:(void 0)}], events:{}}, _state:"running", _parent:{}, global:{get window() {
    [native code]
}, get document() {
    [native code]
}, get location() {
    [native code]
}, set location() {
    [native code]
}, get top() {
    [native code]
}, close:function close() {
    [native code]
}, stop:function stop() {
    [native code]
}, focus:function focus() {
    [native code]
}, blur:function blur() {
    [native code]
}, open:function open() {
    [native code]
}, alert:function alert() {
    [native code]
}, confirm:function confirm() {
    [native code]
}, prompt:function prompt() {
    [native code]
}, print:function print() {
    [native code]
}, printPreview:function printPreview() {
    [native code]
}, postMessage:function postMessage() {
    [native code]
}, captureEvents:function captureEvents() {
    [native code]
}, releaseEvents:function releaseEvents() {
    [native code]
}, getSelection:function getSelection() {
    [native code]
}, getComputedStyle:function getComputedStyle() {
    [native code]
}, matchMedia:function matchMedia() {
    [native code]
}, moveTo:function moveTo() {
    [native code]
}, moveBy:function moveBy() {
    [native code]
}, resizeTo:function resizeTo() {
    [native code]
}, resizeBy:function resizeBy() {
    [native code]
}, scroll:function scroll() {
    [native code]
}, scrollTo:function scrollTo() {
    [native code]
}, scrollBy:function scrollBy() {
    [native code]
}, getDefaultComputedStyle:function getDefaultComputedStyle() {
    [native code]
}, scrollByLines:function scrollByLines() {
    [native code]
}, scrollByPages:function scrollByPages() {
    [native code]
}, sizeToContent:function sizeToContent() {
    [native code]
}, updateCommands:function updateCommands() {
    [native code]
}, find:function find() {
    [native code]
}, dump:function dump() {
    [native code]
}, setResizable:function setResizable() {
    [native code]
}, requestIdleCallback:function requestIdleCallback() {
    [native code]
}, cancelIdleCallback:function cancelIdleCallback() {
    [native code]
}, getRegionalPrefsLocales:function getRegionalPrefsLocales() {
    [native code]
}, getWebExposedLocales:function getWebExposedLocales() {
    [native code]
}, requestAnimationFrame:function requestAnimationFrame() {
    [native code]
}, cancelAnimationFrame:function cancelAnimationFrame() {
    [native code]
}, reportError:function reportError() {
    [native code]
}, btoa:function btoa() {
    [native code]
}, atob:function atob() {
    [native code]
}, setTimeout:function setTimeout() {
    [native code]
}, clearTimeout:function clearTimeout() {
    [native code]
}, setInterval:function setInterval() {
    [native code]
}, clearInterval:function clearInterval() {
    [native code]
}, queueMicrotask:function queueMicrotask() {
    [native code]
}, createImageBitmap:function createImageBitmap() {
    [native code]
}, structuredClone:function structuredClone() {
    [native code]
}, fetch:function fetch() {
    [native code]
}, get self() {
    [native code]
}, set self() {
    [native code]
}, get name() {
    [native code]
}, set name() {
    [native code]
}, get history() {
    [native code]
}, get customElements() {
    [native code]
}, get locationbar() {
    [native code]
}, set locationbar() {
    [native code]
}, get menubar() {
    [native code]
}, set menubar() {
    [native code]
}, get personalbar() {
    [native code]
}, set personalbar() {
    [native code]
}, get scrollbars() {
    [native code]
}, set scrollbars() {
    [native code]
}, get statusbar() {
    [native code]
}, set statusbar() {
    [native code]
}, get toolbar() {
    [native code]
}, set toolbar() {
    [native code]
}, get status() {
    [native code]
}, set status() {
    [native code]
}, get closed() {
    [native code]
}, get event() {
    [native code]
}, set event() {
    [native code]
}, get frames() {
    [native code]
}, set frames() {
    [native code]
}, get length() {
    [native code]
}, set length() {
    [native code]
}, get opener() {
    [native code]
}, set opener() {
    [native code]
}, get parent() {
    [native code]
}, set parent() {
    [native code]
}, get frameElement() {
    [native code]
}, get navigator() {
    [native code]
}, get clientInformation() {
    [native code]
}, get external() {
    [native code]
}, set external() {
    [native code]
}, get applicationCache() {
    [native code]
}, get screen() {
    [native code]
}, set screen() {
    [native code]
}, get innerWidth() {
    [native code]
}, set innerWidth() {
    [native code]
}, get innerHeight() {
    [native code]
}, set innerHeight() {
    [native code]
}, get scrollX() {
    [native code]
}, set scrollX() {
    [native code]
}, get pageXOffset() {
    [native code]
}, set pageXOffset() {
    [native code]
}, get scrollY() {
    [native code]
}, set scrollY() {
    [native code]
}, get pageYOffset() {
    [native code]
}, set pageYOffset() {
    [native code]
}, get screenLeft() {
    [native code]
}, set screenLeft() {
    [native code]
}, get screenTop() {
    [native code]
}, set screenTop() {
    [native code]
}, get screenX() {
    [native code]
}, set screenX() {
    [native code]
}, get screenY() {
    [native code]
}, set screenY() {
    [native code]
}, get outerWidth() {
    [native code]
}, set outerWidth() {
    [native code]
}, get outerHeight() {
    [native code]
}, set outerHeight() {
    [native code]
}, get performance() {
    [native code]
}, set performance() {
    [native code]
}, get mozInnerScreenX() {
    [native code]
}, get mozInnerScreenY() {
    [native code]
}, get devicePixelRatio() {
    [native code]
}, set devicePixelRatio() {
    [native code]
}, get scrollMaxX() {
    [native code]
}, set scrollMaxX() {
    [native code]
}, get scrollMaxY() {
    [native code]
}, set scrollMaxY() {
    [native code]
}, get fullScreen() {
    [native code]
}, set fullScreen() {
    [native code]
}, get ondevicemotion() {
    [native code]
}, set ondevicemotion() {
    [native code]
}, get ondeviceorientation() {
    [native code]
}, set ondeviceorientation() {
    [native code]
}, get onabsolutedeviceorientation() {
    [native code]
}, set onabsolutedeviceorientation() {
    [native code]
}, get InstallTrigger() {
    [native code]
}, set InstallTrigger() {
    [native code]
}, get intlUtils() {
    [native code]
}, get visualViewport() {
    [native code]
}, set visualViewport() {
    [native code]
}, get crypto() {
    [native code]
}, get onabort() {
    [native code]
}, set onabort() {
    [native code]
}, get onblur() {
    [native code]
}, set onblur() {
    [native code]
}, get onfocus() {
    [native code]
}, set onfocus() {
    [native code]
}, get onauxclick() {
    [native code]
}, set onauxclick() {
    [native code]
}, get onbeforeinput() {
    [native code]
}, set onbeforeinput() {
    [native code]
}, get oncanplay() {
    [native code]
}, set oncanplay() {
    [native code]
}, get oncanplaythrough() {
    [native code]
}, set oncanplaythrough() {
    [native code]
}, get onchange() {
    [native code]
}, set onchange() {
    [native code]
}, get onclick() {
    [native code]
}, set onclick() {
    [native code]
}, get onclose() {
    [native code]
}, set onclose() {
    [native code]
}, get oncontextmenu() {
    [native code]
}, set oncontextmenu() {
    [native code]
}, get oncuechange() {
    [native code]
}, set oncuechange() {
    [native code]
}, get ondblclick() {
    [native code]
}, set ondblclick() {
    [native code]
}, get ondrag() {
    [native code]
}, set ondrag() {
    [native code]
}, get ondragend() {
    [native code]
}, set ondragend() {
    [native code]
}, get ondragenter() {
    [native code]
}, set ondragenter() {
    [native code]
}, get ondragexit() {
    [native code]
}, set ondragexit() {
    [native code]
}, get ondragleave() {
    [native code]
}, set ondragleave() {
    [native code]
}, get ondragover() {
    [native code]
}, set ondragover() {
    [native code]
}, get ondragstart() {
    [native code]
}, set ondragstart() {
    [native code]
}, get ondrop() {
    [native code]
}, set ondrop() {
    [native code]
}, get ondurationchange() {
    [native code]
}, set ondurationchange() {
    [native code]
}, get onemptied() {
    [native code]
}, set onemptied() {
    [native code]
}, get onended() {
    [native code]
}, set onended() {
    [native code]
}, get onformdata() {
    [native code]
}, set onformdata() {
    [native code]
}, get oninput() {
    [native code]
}, set oninput() {
    [native code]
}, get oninvalid() {
    [native code]
}, set oninvalid() {
    [native code]
}, get onkeydown() {
    [native code]
}, set onkeydown() {
    [native code]
}, get onkeypress() {
    [native code]
}, set onkeypress() {
    [native code]
}, get onkeyup() {
    [native code]
}, set onkeyup() {
    [native code]
}, get onload() {
    [native code]
}, set onload() {
    [native code]
}, get onloadeddata() {
    [native code]
}, set onloadeddata() {
    [native code]
}, get onloadedmetadata() {
    [native code]
}, set onloadedmetadata() {
    [native code]
}, get onloadend() {
    [native code]
}, set onloadend() {
    [native code]
}, get onloadstart() {
    [native code]
}, set onloadstart() {
    [native code]
}, get onmousedown() {
    [native code]
}, set onmousedown() {
    [native code]
}, get onmouseenter() {
    [native code]
}, set onmouseenter() {
    [native code]
}, get onmouseleave() {
    [native code]
}, set onmouseleave() {
    [native code]
}, get onmousemove() {
    [native code]
}, set onmousemove() {
    [native code]
}, get onmouseout() {
    [native code]
}, set onmouseout() {
    [native code]
}, get onmouseover() {
    [native code]
}, set onmouseover() {
    [native code]
}, get onmouseup() {
    [native code]
}, set onmouseup() {
    [native code]
}, get onwheel() {
    [native code]
}, set onwheel() {
    [native code]
}, get onpause() {
    [native code]
}, set onpause() {
    [native code]
}, get onplay() {
    [native code]
}, set onplay() {
    [native code]
}, get onplaying() {
    [native code]
}, set onplaying() {
    [native code]
}, get onprogress() {
    [native code]
}, set onprogress() {
    [native code]
}, get onratechange() {
    [native code]
}, set onratechange() {
    [native code]
}, get onreset() {
    [native code]
}, set onreset() {
    [native code]
}, get onresize() {
    [native code]
}, set onresize() {
    [native code]
}, get onscroll() {
    [native code]
}, set onscroll() {
    [native code]
}, get onsecuritypolicyviolation() {
    [native code]
}, set onsecuritypolicyviolation() {
    [native code]
}, get onseeked() {
    [native code]
}, set onseeked() {
    [native code]
}, get onseeking() {
    [native code]
}, set onseeking() {
    [native code]
}, get onselect() {
    [native code]
}, set onselect() {
    [native code]
}, get onslotchange() {
    [native code]
}, set onslotchange() {
    [native code]
}, get onstalled() {
    [native code]
}, set onstalled() {
    [native code]
}, get onsubmit() {
    [native code]
}, set onsubmit() {
    [native code]
}, get onsuspend() {
    [native code]
}, set onsuspend() {
    [native code]
}, get ontimeupdate() {
    [native code]
}, set ontimeupdate() {
    [native code]
}, get onvolumechange() {
    [native code]
}, set onvolumechange() {
    [native code]
}, get onwaiting() {
    [native code]
}, set onwaiting() {
    [native code]
}, get onselectstart() {
    [native code]
}, set onselectstart() {
    [native code]
}, get onselectionchange() {
    [native code]
}, set onselectionchange() {
    [native code]
}, get ontoggle() {
    [native code]
}, set ontoggle() {
    [native code]
}, get onpointercancel() {
    [native code]
}, set onpointercancel() {
    [native code]
}, get onpointerdown() {
    [native code]
}, set onpointerdown() {
    [native code]
}, get onpointerup() {
    [native code]
}, set onpointerup() {
    [native code]
}, get onpointermove() {
    [native code]
}, set onpointermove() {
    [native code]
}, get onpointerout() {
    [native code]
}, set onpointerout() {
    [native code]
}, get onpointerover() {
    [native code]
}, set onpointerover() {
    [native code]
}, get onpointerenter() {
    [native code]
}, set onpointerenter() {
    [native code]
}, get onpointerleave() {
    [native code]
}, set onpointerleave() {
    [native code]
}, get ongotpointercapture() {
    [native code]
}, set ongotpointercapture() {
    [native code]
}, get onlostpointercapture() {
    [native code]
}, set onlostpointercapture() {
    [native code]
}, get onmozfullscreenchange() {
    [native code]
}, set onmozfullscreenchange() {
    [native code]
}, get onmozfullscreenerror() {
    [native code]
}, set onmozfullscreenerror() {
    [native code]
}, get onanimationcancel() {
    [native code]
}, set onanimationcancel() {
    [native code]
}, get onanimationend() {
    [native code]
}, set onanimationend() {
    [native code]
}, get onanimationiteration() {
    [native code]
}, set onanimationiteration() {
    [native code]
}, get onanimationstart() {
    [native code]
}, set onanimationstart() {
    [native code]
}, get ontransitioncancel() {
    [native code]
}, set ontransitioncancel() {
    [native code]
}, get ontransitionend() {
    [native code]
}, set ontransitionend() {
    [native code]
}, get ontransitionrun() {
    [native code]
}, set ontransitionrun() {
    [native code]
}, get ontransitionstart() {
    [native code]
}, set ontransitionstart() {
    [native code]
}, get onwebkitanimationend() {
    [native code]
}, set onwebkitanimationend() {
    [native code]
}, get onwebkitanimationiteration() {
    [native code]
}, set onwebkitanimationiteration() {
    [native code]
}, get onwebkitanimationstart() {
    [native code]
}, set onwebkitanimationstart() {
    [native code]
}, get onwebkittransitionend() {
    [native code]
}, set onwebkittransitionend() {
    [native code]
}, get u2f() {
    [native code]
}, set u2f() {
    [native code]
}, get onerror() {
    [native code]
}, set onerror() {
    [native code]
}, get speechSynthesis() {
    [native code]
}, get onafterprint() {
    [native code]
}, set onafterprint() {
    [native code]
}, get onbeforeprint() {
    [native code]
}, set onbeforeprint() {
    [native code]
}, get onbeforeunload() {
    [native code]
}, set onbeforeunload() {
    [native code]
}, get onhashchange() {
    [native code]
}, set onhashchange() {
    [native code]
}, get onlanguagechange() {
    [native code]
}, set onlanguagechange() {
    [native code]
}, get onmessage() {
    [native code]
}, set onmessage() {
    [native code]
}, get onmessageerror() {
    [native code]
}, set onmessageerror() {
    [native code]
}, get onoffline() {
    [native code]
}, set onoffline() {
    [native code]
}, get ononline() {
    [native code]
}, set ononline() {
    [native code]
}, get onpagehide() {
    [native code]
}, set onpagehide() {
    [native code]
}, get onpageshow() {
    [native code]
}, set onpageshow() {
    [native code]
}, get onpopstate() {
    [native code]
}, set onpopstate() {
    [native code]
}, get onrejectionhandled() {
    [native code]
}, set onrejectionhandled() {
    [native code]
}, get onstorage() {
    [native code]
}, set onstorage() {
    [native code]
}, get onunhandledrejection() {
    [native code]
}, set onunhandledrejection() {
    [native code]
}, get onunload() {
    [native code]
}, set onunload() {
    [native code]
}, get ongamepadconnected() {
    [native code]
}, set ongamepadconnected() {
    [native code]
}, get ongamepaddisconnected() {
    [native code]
}, set ongamepaddisconnected() {
    [native code]
}, get localStorage() {
    [native code]
}, get origin() {
    [native code]
}, set origin() {
    [native code]
}, get crossOriginIsolated() {
    [native code]
}, get isSecureContext() {
    [native code]
}, get indexedDB() {
    [native code]
}, get caches() {
    [native code]
}, get sessionStorage() {
    [native code]
}, mozScrollSnap:function mozScrollSnap() {
    [native code]
}, openDialog:function openDialog() {
    [native code]
}, getInterface:function getInterface() {
    [native code]
}, shouldReportForServiceWorkerScope:function shouldReportForServiceWorkerScope() {
    [native code]
}, setScrollMarks:function setScrollMarks() {
    [native code]
}, get controllers() {
    [native code]
}, set controllers() {
    [native code]
}, get realFrameElement() {
    [native code]
}, get docShell() {
    [native code]
}, get browsingContext() {
    [native code]
}, get desktopToDeviceScale() {
    [native code]
}, get scrollMinX() {
    [native code]
}, get scrollMinY() {
    [native code]
}, get windowRoot() {
    [native code]
}, get windowUtils() {
    [native code]
}, get windowGlobalChild() {
    [native code]
}, get clientPrincipal() {
    [native code]
}, get isChromeWindow() {
    [native code]
}, get Glean() {
    [native code]
}, get GleanPings() {
    [native code]
}}, _options:{skipBreakpoints:false, pauseOnExceptions:false, ignoreCaughtExceptions:true, shouldShowOverlay:true, shouldIncludeSavedFrames:true, shouldIncludeAsyncLiveFrames:false, logEventBreakpoints:false, observeAsmJS:true}, _gripDepth:0, _parentClosed:false, _observingNetwork:false, _frameActors:[], _xhrBreakpoints:[], _dbg:{addDebuggees:(function() {
    for (const global of findDebuggees(this)) {
      safeAddDebuggee(this, global);
    }
  }), disable:(function() {
    dbg.removeAllDebuggees();
    dbg.onNewGlobalObject = undefined;
  }), enable:(function() {
    dbg.addDebuggees();
    dbg.onNewGlobalObject = onNewGlobalObject;
  }), onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}}, _threadLifetimePool:{__poolMap:{}, parentPool:null, conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {conn:{}, __poolMap:{}}, {}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, label:"thread", _isDestroyed:false, objectActors:{}}, _activeEventPause:null, _pauseOverlay:null, _priorPause:null, _activeEventBreakpoints:{}, _frameActorMap:{}, _debuggerSourcesSeen:{}, _onLoadBreakpointURLs:{}, _handledFrameExceptions:{}, _watchpointsMap:{threadActor:{}, _watchpoints:{}}, breakpointActorMap:{_threadActor:{}, _actors:{}}, _nestedEventLoop:{_thread:{}, _entered:false, _resolved:false}, onNewSourceEvent:function bound onNewSourceEvent() {
    [native code]
}, createCompletionGrip:function bound createCompletionGrip() {
    [native code]
}, onDebuggerStatement:function bound onDebuggerStatement() {
    [native code]
}, onNewScript:function bound onNewScript() {
    [native code]
}, objectGrip:function bound objectGrip() {
    [native code]
}, pauseObjectGrip:function bound pauseObjectGrip() {
    [native code]
}, _onOpeningRequest:function bound _onOpeningRequest() {
    [native code]
}, _onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}, _onExceptionUnwind:function bound _onExceptionUnwind() {
    [native code]
}, _eventBreakpointListener:function bound _eventBreakpointListener() {
    [native code]
}, _onWindowReady:function bound _onWindowReady() {
    [native code]
}, _onWillNavigate:function bound _onWillNavigate() {
    [native code]
}, _onNavigate:function bound _onNavigate() {
    [native code]
}, _firstStatementBreakpoint:null, _debuggerNotificationObserver:{}, parentPool:{}, alreadyAttached:true, wrappedJSObject:{}, _pendingResponse:{}, [Symbol("EventEmitter/listeners")]:{}}, __poolMap:{}, _progressListener:{_targetActor:{}, _onWindowCreated:function bound () {
    [native code]
}, _onWindowHidden:function bound () {
    [native code]
}, _knownWindowIDs:{}, _watchedDocShells:{}}, _docShellsObserved:true, parentPool:{}, createdFromJsWindowActor:true, _targetScopedActorPool:{conn:{_prefix:"server0.conn0.windowGlobal4294967801/", _transport:{hooks:{}, _jsWindowActor:{_connections:{}, on:function bound on() {
    [native code]
}, off:function bound off() {
    [native code]
}, once:function bound once() {
    [native code]
}, emit:function bound emit() {
    [native code]
}, get isBfcacheInParentEnabled() {
        if (!redefining) {
          // Make sure we don't get into an infinite recursion loop if
          // the getter lambda does something shady.
          redefining = true;
          return redefine(aObject, aName, aLambda.apply(aObject));
        }
      }, useCustomLoader:false, loader:{DevToolsLoader:function DevToolsLoader({
  invisibleToDebugger = false,
  freshCompartment = false,
} = {}) {
  const paths = {
    // This resource:// URI is only registered when running DAMP tests.
    // This is done by: testing/talos/talos/tests/devtools/addon/api.js
    "damp-test": "resource://damp-test/content",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    devtools: "resource://devtools",
    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to xpcshell test items from the loader.
    "xpcshell-test": "resource://test",

    // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
    // Allow access to locale data using paths closer to what is
    // used in the source tree.
    "devtools/client/locales": "chrome://devtools/locale",
    "devtools/shared/locales": "chrome://devtools-shared/locale",
    "devtools/startup/locales": "chrome://devtools-startup/locale",
    "toolkit/locales": "chrome://global/locale",
    ...this.devPaths,
  };

  this.loader = new Loader({
    paths,
    invisibleToDebugger,
    freshCompartment,
    sandboxName: "DevTools (Module loader)",
    // Make sure `define` function exists. JSON Viewer needs modules in AMD
    // format, as it currently uses RequireJS from a content document and
    // can't access our usual loaders. So, any modules shared with the JSON
    // Viewer should include a define wrapper:
    //
    //   // Make this available to both AMD and CJS environments
    //   define(function(require, exports, module) {
    //     ... code ...
    //   });
    //
    // Bug 1248830 will work out a better plan here for our content module
    // loading needs, especially as we head towards devtools.html.
    supportAMDModules: true,
    requireHook: (id, require) => {
      if (id.startsWith("raw!") || id.startsWith("theme-loader!")) {
        return requireRawId(id, require);
      }
      return require(id);
    },
  });

  this.require = Require(this.loader, { id: "devtools" });

  // Fetch custom pseudo modules and globals
  const { modules, globals } = this.require(
    "devtools/shared/loader/builtin-modules"
  );

  // Register custom pseudo modules to the current loader instance
  for (const id in modules) {
    const uri = resolveURI(id, this.loader.mapping);
    this.loader.modules[uri] = {
      get exports() {
        return modules[id];
      },
    };
  }

  // Register custom globals to the current loader instance
  Object.defineProperties(
    this.loader.globals,
    Object.getOwnPropertyDescriptors(globals)
  );

  // Define the loader id for these two usecases:
  // * access via the JSM (this.id)
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.id
  this.id = gNextLoaderID++;
  // * access via module's `loader` global
  // loader.id
  globals.loader.id = this.id;

  // Expose lazy helpers on `loader`
  // ie. when you use it like that from a JSM:
  // let { loader } = ChromeUtils.import("resource://devtools/shared/loader/Loader.jsm");
  // loader.lazyGetter(...);
  this.lazyGetter = globals.loader.lazyGetter;
  this.lazyImporter = globals.loader.lazyImporter;
  this.lazyServiceGetter = globals.loader.lazyServiceGetter;
  this.lazyRequireGetter = globals.loader.lazyRequireGetter;
}, useDistinctSystemPrincipalLoader:function useDistinctSystemPrincipalLoader(requester) {
  if (!systemLoader) {
    systemLoader = new DevToolsLoader({
      invisibleToDebugger: true,
    });
    systemLoaderRequesters.clear();
  }
  systemLoaderRequesters.add(requester);
  return systemLoader;
}, releaseDistinctSystemPrincipalLoader:function releaseDistinctSystemPrincipalLoader(requester) {
  systemLoaderRequesters.delete(requester);
  if (systemLoaderRequesters.size == 0) {
    systemLoader.destroy();
    systemLoader = null;
  }
}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, loader:{loader:{}, require:function require(id) {
    if (!id) {
      // Throw if `id` is not passed.
      throw Error(
        "You must provide a module name when calling require() from " +
          requirer.id,
        requirer.uri
      );
    }

    if (requireHook) {
      return requireHook(id, _require);
    }

    return _require(id);
  }, id:0, lazyGetter:function defineLazyGetter(object, name, lambda) {
  Object.defineProperty(object, name, {
    get: function() {
      // Redefine this accessor property as a data property.
      // Delete it first, to rule out "too much recursion" in case object is
      // a proxy whose defineProperty handler might unwittingly trigger this
      // getter again.
      delete object[name];
      const value = lambda.apply(object);
      Object.defineProperty(object, name, {
        value,
        writable: true,
        configurable: true,
        enumerable: true,
      });
      return value;
    },
    configurable: true,
    enumerable: true,
  });
}, lazyImporter:function defineLazyModuleGetter(object, name, resource) {
  defineLazyGetter(object, name, function() {
    try {
      return ChromeUtils.import(resource)[name];
    } catch (ex) {
      Cu.reportError("Failed to load module " + resource + ".");
      throw ex;
    }
  });
}, lazyServiceGetter:function defineLazyServiceGetter(object, name, contract, interfaceName) {
  defineLazyGetter(object, name, function() {
    return Cc[contract].getService(Ci[interfaceName]);
  });
}, lazyRequireGetter:function lazyRequireGetter(obj, properties, module, destructure) {
  if (Array.isArray(properties) && !destructure) {
    throw new Error(
      "Pass destructure=true to call lazyRequireGetter with an array of properties"
    );
  }

  if (!Array.isArray(properties)) {
    properties = [properties];
  }

  for (const property of properties) {
    defineLazyGetter(obj, property, () => {
      return destructure
        ? require(module)[property]
        : require(module || property);
    });
  }
}}, StructuredCloneHolder:(void 0)}}, _prefix:"server0.conn0.windowGlobal4294967801", _onPacketReceived:function bound _onPacketReceived() {
    [native code]
}}, _nextID:29, _socketListener:null, _actorPool:null, _extraPools:[{__poolMap:null, parentPool:null, conn:{}, label:"server-connection", _isDestroyed:false}, {}, {}, {__poolMap:{}, parentPool:null, conn:{}, label:"thread", _isDestroyed:false, objectActors:{}}], _actorResponses:{}, _forwardingPrefixes:{}, currentPacket:(void 0)}, __poolMap:{}}, _dbg:{addDebuggees:(function() {
    for (const global of findDebuggees(this)) {
      safeAddDebuggee(this, global);
    }
  }), disable:(function() {
    dbg.removeAllDebuggees();
    dbg.onNewGlobalObject = undefined;
  }), enable:(function() {
    dbg.addDebuggees();
    dbg.onNewGlobalObject = onNewGlobalObject;
  }), onNewDebuggee:function bound _onNewDebuggee() {
    [native code]
}}, _styleSheetManager:{_styleSheetCount:0, _styleSheetMap:{}, _mqlList:[], _targetActor:{}, _onApplicableStateChanged:function bound _onApplicableStateChanged() {
    [native code]
}, _onTargetActorWindowReady:function bound _onTargetActorWindowReady() {
    [native code]
}, [Symbol("EventEmitter/listeners")]:{}}, [Symbol("EventEmitter/listeners")]:{}}) ": " (new TypeError("this._targetActor.chromeEventHandler is null", "resource://devtools/server/actors/utils/stylesheets-manager.js", 867))
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 1706: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/connectors/js-window-actor/DevToolsFrameChild.jsm, line 375: InvalidStateError: JSWindowActorChild.sendAsyncMessage: JSWindowActorChild cannot send at the moment
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
Handler function _httpStopRequest threw an exception: TypeError: browsingContext.currentWindowGlobal is null
Stack: isChannelFromSystemPrincipal@resource://devtools/server/actors/network-monitor/utils/network-utils.js:99:1
exports.createNetworkEvent@resource://devtools/server/actors/network-monitor/utils/network-utils.js:188:33
_createNetworkEvent@resource://devtools/server/actors/network-monitor/network-observer.js:710:32
_httpStopRequest@resource://devtools/server/actors/network-monitor/network-observer.js:345:14
exports.makeInfallible/<@resource://devtools/shared/ThreadSafeDevToolsUtils.js:103:22
Line: 99, column: 1
console.error: (new TypeError("browsingContext.currentWindowGlobal is null", "resource://devtools/server/actors/network-monitor/utils/network-utils.js", 99))
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: https://s0.2mdn.net/sadbundle/4163918015545716211/index.html, line 259: TypeError: studio.Enabler is undefined
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
ATTENTION: default value of option mesa_glthread overridden by environment.
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 6146 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 422: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
JavaScript error: resource://devtools/server/actors/targets/window-global.js, line 469: NS_ERROR_NOT_AVAILABLE: Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) [nsIDocShell.domWindow]
Exiting due to channel error.
Exiting due to channel error.
Exiting due to channel error.
1660074870798	geckodriver	INFO	Listening on 127.0.0.1:53687
1660074871301	mozrunner::runner	INFO	Running command: "/usr/bin/firefox" "--marionette" "--remote-debugging-port" "44445" "--remote-allow-hosts" "localhost" "-no-remote" "-profile" "/tmp/rust_mozprofilepGIJfO"
1660074872118	Marionette	INFO	Marionette enabled
1660074872121	Marionette	INFO	Listening on port 42277
WebDriver BiDi listening on ws://localhost:44445
Read port: 42277
1660074872298	RemoteAgent	WARN	TLS certificate errors will be ignored for this session
console.warn: SearchSettings: "get: No settings file exists, new profile?" (new NotFoundError("Could not open the file at /tmp/rust_mozprofilepGIJfO/search.json.mozlz4", (void 0)))
Missing chrome or resource URL: resource://gre/modules/UpdateListener.jsm
Missing chrome or resource URL: resource://gre/modules/UpdateListener.sys.mjs
DevTools listening on ws://localhost:44445/devtools/browser/b0b04c23-1274-4eed-8353-29b8dc7e2273
JavaScript error: https://eus.rubiconproject.com/usync.js, line 4: SecurityError: The operation is insecure.
ATTENTION: default value of option mesa_glthread overridden by environment.
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 676 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 6445 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
Missing chrome or resource URL: resource://gre/modules/UpdateListener.jsm
Missing chrome or resource URL: resource://gre/modules/UpdateListener.sys.mjs
console.error: "Error during quit-application-granted: [Exception... \"File error: Not found\"  nsresult: \"0x80520012 (NS_ERROR_FILE_NOT_FOUND)\"  location: \"JS frame :: resource:///modules/BrowserGlue.jsm :: _onQuitApplicationGranted/tasks< :: line 2006\"  data: no]"
1660074986630	Marionette	INFO	Stopped listening on port 42277
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
console.warn: TopSitesFeed: Failed to fetch data from Contile server: NetworkError when attempting to fetch resource.
1660074993218	geckodriver	INFO	Listening on 127.0.0.1:42681
1660074993721	mozrunner::runner	INFO	Running command: "/usr/bin/firefox" "--marionette" "--remote-debugging-port" "51329" "--remote-allow-hosts" "localhost" "-no-remote" "-profile" "/tmp/rust_mozprofile5AK3Za"
1660074994520	Marionette	INFO	Marionette enabled
1660074994522	Marionette	INFO	Listening on port 42149
WebDriver BiDi listening on ws://localhost:51329
Read port: 42149
1660074994713	RemoteAgent	WARN	TLS certificate errors will be ignored for this session
console.warn: SearchSettings: "get: No settings file exists, new profile?" (new NotFoundError("Could not open the file at /tmp/rust_mozprofile5AK3Za/search.json.mozlz4", (void 0)))
Missing chrome or resource URL: resource://gre/modules/UpdateListener.jsm
Missing chrome or resource URL: resource://gre/modules/UpdateListener.sys.mjs
DevTools listening on ws://localhost:51329/devtools/browser/a0d59be9-bdb6-490f-9b5a-b868bd81145e
JavaScript error: https://eus.rubiconproject.com/usync.js, line 4: SecurityError: The operation is insecure.
ATTENTION: default value of option mesa_glthread overridden by environment.
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 5491 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 7024 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
Missing chrome or resource URL: resource://gre/modules/UpdateListener.jsm
Missing chrome or resource URL: resource://gre/modules/UpdateListener.sys.mjs
console.error: "Error during quit-application-granted: [Exception... \"File error: Not found\"  nsresult: \"0x80520012 (NS_ERROR_FILE_NOT_FOUND)\"  location: \"JS frame :: resource:///modules/BrowserGlue.jsm :: _onQuitApplicationGranted/tasks< :: line 2006\"  data: no]"
1660075088581	Marionette	INFO	Stopped listening on port 42149
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
console.warn: TopSitesFeed: Failed to fetch data from Contile server: NetworkError when attempting to fetch resource.
1660075101754	geckodriver	INFO	Listening on 127.0.0.1:38467
1660075102257	mozrunner::runner	INFO	Running command: "/usr/bin/firefox" "--marionette" "--remote-debugging-port" "51111" "--remote-allow-hosts" "localhost" "-no-remote" "-profile" "/tmp/rust_mozprofile5TMWm7"
1660075103066	Marionette	INFO	Marionette enabled
1660075103069	Marionette	INFO	Listening on port 35871
WebDriver BiDi listening on ws://localhost:51111
Read port: 35871
1660075103246	RemoteAgent	WARN	TLS certificate errors will be ignored for this session
console.warn: SearchSettings: "get: No settings file exists, new profile?" (new NotFoundError("Could not open the file at /tmp/rust_mozprofile5TMWm7/search.json.mozlz4", (void 0)))
Missing chrome or resource URL: resource://gre/modules/UpdateListener.jsm
Missing chrome or resource URL: resource://gre/modules/UpdateListener.sys.mjs
DevTools listening on ws://localhost:51111/devtools/browser/5fb895eb-210e-4cfd-a2a4-b7d2ee9b1302
JavaScript error: https://eus.rubiconproject.com/usync.js, line 4: SecurityError: The operation is insecure.
ATTENTION: default value of option mesa_glthread overridden by environment.
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 4727 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 5782 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
JavaScript error: , line 0: uncaught exception: Object
JavaScript error: , line 0: uncaught exception: Object
JavaScript error: , line 0: uncaught exception: Object
JavaScript error: , line 0: uncaught exception: Object
JavaScript error: , line 0: uncaught exception: Object
JavaScript error: , line 0: uncaught exception: Object
JavaScript error: , line 0: uncaught exception: Object
JavaScript error: , line 0: uncaught exception: Object
JavaScript error: resource://gre/actors/ContentMetaChild.jsm, line 185: InvalidStateError: JSWindowActorChild.sendAsyncMessage: JSWindowActorChild cannot send at the moment
JavaScript error: https://eus.rubiconproject.com/usync.js, line 4: SecurityError: The operation is insecure.
ATTENTION: default value of option mesa_glthread overridden by environment.
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 5635 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript error: , line 0: uncaught exception: Object
JavaScript error: , line 0: uncaught exception: Object
JavaScript error: https://tag.durationmedia.net/sites/10651/dm.js, line 1: TypeError: e.parsedBody is undefined
JavaScript error: , line 0: uncaught exception: Object
JavaScript error: , line 0: uncaught exception: Object
JavaScript error: , line 0: uncaught exception: Object
JavaScript error: , line 0: uncaught exception: Object
JavaScript error: , line 0: uncaught exception: Object
1660075355180	Marionette	WARN	Ignoring event 'DOMContentLoaded' because document has an invalid readyState of 'complete'.
JavaScript error: resource:///modules/FaviconLoader.jsm, line 595: InvalidStateError: JSWindowActorChild.sendAsyncMessage: JSWindowActorChild cannot send at the moment
JavaScript error: https://eus.rubiconproject.com/usync.js, line 4: SecurityError: The operation is insecure.
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 3726 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript error: https://eus.rubiconproject.com/usync.js, line 4: SecurityError: The operation is insecure.
JavaScript error: https://eus.rubiconproject.com/usync.js, line 4: SecurityError: The operation is insecure.
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 1865 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 457 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript warning: https://pagead2.googlesyndication.com/bg/3JgSxLv5M8jO-L1UtlL0rxXgrH7WG4OtpnQVSDBU2F0.js line 2 > eval line 851 > eval line 1 > eval line 1 > eval, line 1: WEBGL_debug_renderer_info is deprecated in Firefox and will be removed. Please use RENDERER.
[GFX1-]: Couldn't sanitize RENDERER device: D3D12
JavaScript error: , line 0: uncaught exception: 7
Missing chrome or resource URL: resource://gre/modules/UpdateListener.jsm
Missing chrome or resource URL: resource://gre/modules/UpdateListener.sys.mjs
console.error: "Error during quit-application-granted: [Exception... \"File error: Not found\"  nsresult: \"0x80520012 (NS_ERROR_FILE_NOT_FOUND)\"  location: \"JS frame :: resource:///modules/BrowserGlue.jsm :: _onQuitApplicationGranted/tasks< :: line 2006\"  data: no]"
1660076106175	Marionette	INFO	Stopped listening on port 35871
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
console.warn: TopSitesFeed: Failed to fetch data from Contile server: NetworkError when attempting to fetch resource.
